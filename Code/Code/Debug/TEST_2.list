
TEST_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007784  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08007940  08007940  00017940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079b0  080079b0  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080079b0  080079b0  000179b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079b8  080079b8  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079b8  080079b8  000179b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079bc  080079bc  000179bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080079c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000047c  20000014  080079d4  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000490  080079d4  00020490  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021ebf  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003099  00000000  00000000  00041f03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b48  00000000  00000000  00044fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a20  00000000  00000000  00046ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e8e8  00000000  00000000  00048508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001eeba  00000000  00000000  00076df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001272b8  00000000  00000000  00095caa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001bcf62  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000076fc  00000000  00000000  001bcfb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000014 	.word	0x20000014
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08007928 	.word	0x08007928

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000018 	.word	0x20000018
 80001f8:	08007928 	.word	0x08007928

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b96e 	b.w	80004f0 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468c      	mov	ip, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	f040 8083 	bne.w	8000342 <__udivmoddi4+0x116>
 800023c:	428a      	cmp	r2, r1
 800023e:	4617      	mov	r7, r2
 8000240:	d947      	bls.n	80002d2 <__udivmoddi4+0xa6>
 8000242:	fab2 f282 	clz	r2, r2
 8000246:	b142      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000248:	f1c2 0020 	rsb	r0, r2, #32
 800024c:	fa24 f000 	lsr.w	r0, r4, r0
 8000250:	4091      	lsls	r1, r2
 8000252:	4097      	lsls	r7, r2
 8000254:	ea40 0c01 	orr.w	ip, r0, r1
 8000258:	4094      	lsls	r4, r2
 800025a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800025e:	0c23      	lsrs	r3, r4, #16
 8000260:	fbbc f6f8 	udiv	r6, ip, r8
 8000264:	fa1f fe87 	uxth.w	lr, r7
 8000268:	fb08 c116 	mls	r1, r8, r6, ip
 800026c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000270:	fb06 f10e 	mul.w	r1, r6, lr
 8000274:	4299      	cmp	r1, r3
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x60>
 8000278:	18fb      	adds	r3, r7, r3
 800027a:	f106 30ff 	add.w	r0, r6, #4294967295
 800027e:	f080 8119 	bcs.w	80004b4 <__udivmoddi4+0x288>
 8000282:	4299      	cmp	r1, r3
 8000284:	f240 8116 	bls.w	80004b4 <__udivmoddi4+0x288>
 8000288:	3e02      	subs	r6, #2
 800028a:	443b      	add	r3, r7
 800028c:	1a5b      	subs	r3, r3, r1
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb3 f0f8 	udiv	r0, r3, r8
 8000294:	fb08 3310 	mls	r3, r8, r0, r3
 8000298:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800029c:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a0:	45a6      	cmp	lr, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x8c>
 80002a4:	193c      	adds	r4, r7, r4
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002aa:	f080 8105 	bcs.w	80004b8 <__udivmoddi4+0x28c>
 80002ae:	45a6      	cmp	lr, r4
 80002b0:	f240 8102 	bls.w	80004b8 <__udivmoddi4+0x28c>
 80002b4:	3802      	subs	r0, #2
 80002b6:	443c      	add	r4, r7
 80002b8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002bc:	eba4 040e 	sub.w	r4, r4, lr
 80002c0:	2600      	movs	r6, #0
 80002c2:	b11d      	cbz	r5, 80002cc <__udivmoddi4+0xa0>
 80002c4:	40d4      	lsrs	r4, r2
 80002c6:	2300      	movs	r3, #0
 80002c8:	e9c5 4300 	strd	r4, r3, [r5]
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	b902      	cbnz	r2, 80002d6 <__udivmoddi4+0xaa>
 80002d4:	deff      	udf	#255	; 0xff
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	2a00      	cmp	r2, #0
 80002dc:	d150      	bne.n	8000380 <__udivmoddi4+0x154>
 80002de:	1bcb      	subs	r3, r1, r7
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f f887 	uxth.w	r8, r7
 80002e8:	2601      	movs	r6, #1
 80002ea:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ee:	0c21      	lsrs	r1, r4, #16
 80002f0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002f4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002f8:	fb08 f30c 	mul.w	r3, r8, ip
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0xe4>
 8000300:	1879      	adds	r1, r7, r1
 8000302:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0xe2>
 8000308:	428b      	cmp	r3, r1
 800030a:	f200 80e9 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 800030e:	4684      	mov	ip, r0
 8000310:	1ac9      	subs	r1, r1, r3
 8000312:	b2a3      	uxth	r3, r4
 8000314:	fbb1 f0fe 	udiv	r0, r1, lr
 8000318:	fb0e 1110 	mls	r1, lr, r0, r1
 800031c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000320:	fb08 f800 	mul.w	r8, r8, r0
 8000324:	45a0      	cmp	r8, r4
 8000326:	d907      	bls.n	8000338 <__udivmoddi4+0x10c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x10a>
 8000330:	45a0      	cmp	r8, r4
 8000332:	f200 80d9 	bhi.w	80004e8 <__udivmoddi4+0x2bc>
 8000336:	4618      	mov	r0, r3
 8000338:	eba4 0408 	sub.w	r4, r4, r8
 800033c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000340:	e7bf      	b.n	80002c2 <__udivmoddi4+0x96>
 8000342:	428b      	cmp	r3, r1
 8000344:	d909      	bls.n	800035a <__udivmoddi4+0x12e>
 8000346:	2d00      	cmp	r5, #0
 8000348:	f000 80b1 	beq.w	80004ae <__udivmoddi4+0x282>
 800034c:	2600      	movs	r6, #0
 800034e:	e9c5 0100 	strd	r0, r1, [r5]
 8000352:	4630      	mov	r0, r6
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	fab3 f683 	clz	r6, r3
 800035e:	2e00      	cmp	r6, #0
 8000360:	d14a      	bne.n	80003f8 <__udivmoddi4+0x1cc>
 8000362:	428b      	cmp	r3, r1
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0x140>
 8000366:	4282      	cmp	r2, r0
 8000368:	f200 80b8 	bhi.w	80004dc <__udivmoddi4+0x2b0>
 800036c:	1a84      	subs	r4, r0, r2
 800036e:	eb61 0103 	sbc.w	r1, r1, r3
 8000372:	2001      	movs	r0, #1
 8000374:	468c      	mov	ip, r1
 8000376:	2d00      	cmp	r5, #0
 8000378:	d0a8      	beq.n	80002cc <__udivmoddi4+0xa0>
 800037a:	e9c5 4c00 	strd	r4, ip, [r5]
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0xa0>
 8000380:	f1c2 0320 	rsb	r3, r2, #32
 8000384:	fa20 f603 	lsr.w	r6, r0, r3
 8000388:	4097      	lsls	r7, r2
 800038a:	fa01 f002 	lsl.w	r0, r1, r2
 800038e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000392:	40d9      	lsrs	r1, r3
 8000394:	4330      	orrs	r0, r6
 8000396:	0c03      	lsrs	r3, r0, #16
 8000398:	fbb1 f6fe 	udiv	r6, r1, lr
 800039c:	fa1f f887 	uxth.w	r8, r7
 80003a0:	fb0e 1116 	mls	r1, lr, r6, r1
 80003a4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003a8:	fb06 f108 	mul.w	r1, r6, r8
 80003ac:	4299      	cmp	r1, r3
 80003ae:	fa04 f402 	lsl.w	r4, r4, r2
 80003b2:	d909      	bls.n	80003c8 <__udivmoddi4+0x19c>
 80003b4:	18fb      	adds	r3, r7, r3
 80003b6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ba:	f080 808d 	bcs.w	80004d8 <__udivmoddi4+0x2ac>
 80003be:	4299      	cmp	r1, r3
 80003c0:	f240 808a 	bls.w	80004d8 <__udivmoddi4+0x2ac>
 80003c4:	3e02      	subs	r6, #2
 80003c6:	443b      	add	r3, r7
 80003c8:	1a5b      	subs	r3, r3, r1
 80003ca:	b281      	uxth	r1, r0
 80003cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d8:	fb00 f308 	mul.w	r3, r0, r8
 80003dc:	428b      	cmp	r3, r1
 80003de:	d907      	bls.n	80003f0 <__udivmoddi4+0x1c4>
 80003e0:	1879      	adds	r1, r7, r1
 80003e2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003e6:	d273      	bcs.n	80004d0 <__udivmoddi4+0x2a4>
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d971      	bls.n	80004d0 <__udivmoddi4+0x2a4>
 80003ec:	3802      	subs	r0, #2
 80003ee:	4439      	add	r1, r7
 80003f0:	1acb      	subs	r3, r1, r3
 80003f2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003f6:	e778      	b.n	80002ea <__udivmoddi4+0xbe>
 80003f8:	f1c6 0c20 	rsb	ip, r6, #32
 80003fc:	fa03 f406 	lsl.w	r4, r3, r6
 8000400:	fa22 f30c 	lsr.w	r3, r2, ip
 8000404:	431c      	orrs	r4, r3
 8000406:	fa20 f70c 	lsr.w	r7, r0, ip
 800040a:	fa01 f306 	lsl.w	r3, r1, r6
 800040e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000412:	fa21 f10c 	lsr.w	r1, r1, ip
 8000416:	431f      	orrs	r7, r3
 8000418:	0c3b      	lsrs	r3, r7, #16
 800041a:	fbb1 f9fe 	udiv	r9, r1, lr
 800041e:	fa1f f884 	uxth.w	r8, r4
 8000422:	fb0e 1119 	mls	r1, lr, r9, r1
 8000426:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800042a:	fb09 fa08 	mul.w	sl, r9, r8
 800042e:	458a      	cmp	sl, r1
 8000430:	fa02 f206 	lsl.w	r2, r2, r6
 8000434:	fa00 f306 	lsl.w	r3, r0, r6
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x220>
 800043a:	1861      	adds	r1, r4, r1
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	d248      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 8000442:	458a      	cmp	sl, r1
 8000444:	d946      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 8000446:	f1a9 0902 	sub.w	r9, r9, #2
 800044a:	4421      	add	r1, r4
 800044c:	eba1 010a 	sub.w	r1, r1, sl
 8000450:	b2bf      	uxth	r7, r7
 8000452:	fbb1 f0fe 	udiv	r0, r1, lr
 8000456:	fb0e 1110 	mls	r1, lr, r0, r1
 800045a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800045e:	fb00 f808 	mul.w	r8, r0, r8
 8000462:	45b8      	cmp	r8, r7
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x24a>
 8000466:	19e7      	adds	r7, r4, r7
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d22e      	bcs.n	80004cc <__udivmoddi4+0x2a0>
 800046e:	45b8      	cmp	r8, r7
 8000470:	d92c      	bls.n	80004cc <__udivmoddi4+0x2a0>
 8000472:	3802      	subs	r0, #2
 8000474:	4427      	add	r7, r4
 8000476:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047a:	eba7 0708 	sub.w	r7, r7, r8
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	454f      	cmp	r7, r9
 8000484:	46c6      	mov	lr, r8
 8000486:	4649      	mov	r1, r9
 8000488:	d31a      	bcc.n	80004c0 <__udivmoddi4+0x294>
 800048a:	d017      	beq.n	80004bc <__udivmoddi4+0x290>
 800048c:	b15d      	cbz	r5, 80004a6 <__udivmoddi4+0x27a>
 800048e:	ebb3 020e 	subs.w	r2, r3, lr
 8000492:	eb67 0701 	sbc.w	r7, r7, r1
 8000496:	fa07 fc0c 	lsl.w	ip, r7, ip
 800049a:	40f2      	lsrs	r2, r6
 800049c:	ea4c 0202 	orr.w	r2, ip, r2
 80004a0:	40f7      	lsrs	r7, r6
 80004a2:	e9c5 2700 	strd	r2, r7, [r5]
 80004a6:	2600      	movs	r6, #0
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e70b      	b.n	80002cc <__udivmoddi4+0xa0>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e9      	b.n	800028c <__udivmoddi4+0x60>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6fd      	b.n	80002b8 <__udivmoddi4+0x8c>
 80004bc:	4543      	cmp	r3, r8
 80004be:	d2e5      	bcs.n	800048c <__udivmoddi4+0x260>
 80004c0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004c4:	eb69 0104 	sbc.w	r1, r9, r4
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7df      	b.n	800048c <__udivmoddi4+0x260>
 80004cc:	4608      	mov	r0, r1
 80004ce:	e7d2      	b.n	8000476 <__udivmoddi4+0x24a>
 80004d0:	4660      	mov	r0, ip
 80004d2:	e78d      	b.n	80003f0 <__udivmoddi4+0x1c4>
 80004d4:	4681      	mov	r9, r0
 80004d6:	e7b9      	b.n	800044c <__udivmoddi4+0x220>
 80004d8:	4666      	mov	r6, ip
 80004da:	e775      	b.n	80003c8 <__udivmoddi4+0x19c>
 80004dc:	4630      	mov	r0, r6
 80004de:	e74a      	b.n	8000376 <__udivmoddi4+0x14a>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	4439      	add	r1, r7
 80004e6:	e713      	b.n	8000310 <__udivmoddi4+0xe4>
 80004e8:	3802      	subs	r0, #2
 80004ea:	443c      	add	r4, r7
 80004ec:	e724      	b.n	8000338 <__udivmoddi4+0x10c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <testtest>:

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
unsigned int Sensitive = 500;
unsigned int Vibration = 100;
void testtest(uint32_t Channel, uint32_t Step){
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	6039      	str	r1, [r7, #0]
//TIM2->CCR1 = TIM2->CCR2 = TIM2->CCR3 = TIM2->CCR4 = 0;
if(Step <= Sensitive) Step = 0;
 80004fe:	4b21      	ldr	r3, [pc, #132]	; (8000584 <testtest+0x90>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	683a      	ldr	r2, [r7, #0]
 8000504:	429a      	cmp	r2, r3
 8000506:	d802      	bhi.n	800050e <testtest+0x1a>
 8000508:	2300      	movs	r3, #0
 800050a:	603b      	str	r3, [r7, #0]
else if(Channel == 3) TIM2->CCR4 = Step;
HAL_Delay(500);
TIM2->CCR1 = TIM2->CCR2 = TIM2->CCR3 = TIM2->CCR4 = 0;
}

}
 800050c:	e035      	b.n	800057a <testtest+0x86>
Step *= Vibration;
 800050e:	4b1e      	ldr	r3, [pc, #120]	; (8000588 <testtest+0x94>)
 8000510:	681a      	ldr	r2, [r3, #0]
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	fb02 f303 	mul.w	r3, r2, r3
 8000518:	603b      	str	r3, [r7, #0]
if(Channel == 0) TIM2->CCR1 = Step;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d104      	bne.n	800052a <testtest+0x36>
 8000520:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	6353      	str	r3, [r2, #52]	; 0x34
 8000528:	e016      	b.n	8000558 <testtest+0x64>
else if(Channel == 1) TIM2->CCR2 = Step;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	2b01      	cmp	r3, #1
 800052e:	d104      	bne.n	800053a <testtest+0x46>
 8000530:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	6393      	str	r3, [r2, #56]	; 0x38
 8000538:	e00e      	b.n	8000558 <testtest+0x64>
else if(Channel == 2) TIM2->CCR3 = Step;
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2b02      	cmp	r3, #2
 800053e:	d104      	bne.n	800054a <testtest+0x56>
 8000540:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000548:	e006      	b.n	8000558 <testtest+0x64>
else if(Channel == 3) TIM2->CCR4 = Step;
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	2b03      	cmp	r3, #3
 800054e:	d103      	bne.n	8000558 <testtest+0x64>
 8000550:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	6413      	str	r3, [r2, #64]	; 0x40
HAL_Delay(500);
 8000558:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800055c:	f001 fb7c 	bl	8001c58 <HAL_Delay>
TIM2->CCR1 = TIM2->CCR2 = TIM2->CCR3 = TIM2->CCR4 = 0;
 8000560:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000564:	2300      	movs	r3, #0
 8000566:	6413      	str	r3, [r2, #64]	; 0x40
 8000568:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800056c:	63d3      	str	r3, [r2, #60]	; 0x3c
 800056e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000572:	6393      	str	r3, [r2, #56]	; 0x38
 8000574:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000578:	6353      	str	r3, [r2, #52]	; 0x34
}
 800057a:	bf00      	nop
 800057c:	3708      	adds	r7, #8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	20000000 	.word	0x20000000
 8000588:	20000004 	.word	0x20000004

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b0a0      	sub	sp, #128	; 0x80
 8000590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */


uint32_t adcarr[4] = {0,};
 8000592:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]
 800059e:	60da      	str	r2, [r3, #12]
uint32_t maxchannel = 0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	67fb      	str	r3, [r7, #124]	; 0x7c


uint8_t arr[100] = {0,};
 80005a4:	2300      	movs	r3, #0
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	f107 0308 	add.w	r3, r7, #8
 80005ac:	2260      	movs	r2, #96	; 0x60
 80005ae:	2100      	movs	r1, #0
 80005b0:	4618      	mov	r0, r3
 80005b2:	f007 f9b1 	bl	8007918 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b6:	f001 fada 	bl	8001b6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ba:	f000 f86f 	bl	800069c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005be:	f000 f8cf 	bl	8000760 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c2:	f000 fcfd 	bl	8000fc0 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005c6:	f000 f8fb 	bl	80007c0 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 80005ca:	f000 f98f 	bl	80008ec <MX_DFSDM1_Init>
  MX_I2C1_Init();
 80005ce:	f000 f9c5 	bl	800095c <MX_I2C1_Init>
  MX_I2C2_Init();
 80005d2:	f000 fa03 	bl	80009dc <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 80005d6:	f000 fa41 	bl	8000a5c <MX_OCTOSPI1_Init>
  MX_SPI3_Init();
 80005da:	f000 fa95 	bl	8000b08 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80005de:	f000 fc01 	bl	8000de4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80005e2:	f000 fc4b 	bl	8000e7c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80005e6:	f000 fc97 	bl	8000f18 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 80005ea:	f000 fce1 	bl	8000fb0 <MX_USB_OTG_FS_USB_Init>
  MX_TIM2_Init();
 80005ee:	f000 fac9 	bl	8000b84 <MX_TIM2_Init>
  MX_TIM3_Init();
 80005f2:	f000 fb5f 	bl	8000cb4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */


  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80005f6:	2100      	movs	r1, #0
 80005f8:	4826      	ldr	r0, [pc, #152]	; (8000694 <main+0x108>)
 80005fa:	f005 fbfd 	bl	8005df8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80005fe:	2104      	movs	r1, #4
 8000600:	4824      	ldr	r0, [pc, #144]	; (8000694 <main+0x108>)
 8000602:	f005 fbf9 	bl	8005df8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000606:	2108      	movs	r1, #8
 8000608:	4822      	ldr	r0, [pc, #136]	; (8000694 <main+0x108>)
 800060a:	f005 fbf5 	bl	8005df8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800060e:	210c      	movs	r1, #12
 8000610:	4820      	ldr	r0, [pc, #128]	; (8000694 <main+0x108>)
 8000612:	f005 fbf1 	bl	8005df8 <HAL_TIM_PWM_Start>
 HAL_UART_Transmit(&huart1, "test\n\r", 6, 10);
 */



 int flag = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	67bb      	str	r3, [r7, #120]	; 0x78

 HAL_ADC_Start(&hadc1);
 800061a:	481f      	ldr	r0, [pc, #124]	; (8000698 <main+0x10c>)
 800061c:	f001 fe66 	bl	80022ec <HAL_ADC_Start>
 HAL_ADC_PollForConversion(&hadc1, 20);
 8000620:	2114      	movs	r1, #20
 8000622:	481d      	ldr	r0, [pc, #116]	; (8000698 <main+0x10c>)
 8000624:	f001 fec5 	bl	80023b2 <HAL_ADC_PollForConversion>
 adcarr[0] = HAL_ADC_GetValue(&hadc1);
 8000628:	481b      	ldr	r0, [pc, #108]	; (8000698 <main+0x10c>)
 800062a:	f001 ff51 	bl	80024d0 <HAL_ADC_GetValue>
 800062e:	4603      	mov	r3, r0
 8000630:	66bb      	str	r3, [r7, #104]	; 0x68

 HAL_ADC_Start(&hadc1);
 HAL_ADC_PollForConversion(&hadc1, 20);
 adcarr[3] = HAL_ADC_GetValue(&hadc1);
*/
 maxchannel = adcarr[0] > adcarr[1] ? 0 : 1;
 8000632:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000634:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000636:	429a      	cmp	r2, r3
 8000638:	bf94      	ite	ls
 800063a:	2301      	movls	r3, #1
 800063c:	2300      	movhi	r3, #0
 800063e:	b2db      	uxtb	r3, r3
 8000640:	67fb      	str	r3, [r7, #124]	; 0x7c
 maxchannel = adcarr[maxchannel] > adcarr[2] ? maxchannel : 2;
 8000642:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000644:	009b      	lsls	r3, r3, #2
 8000646:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800064a:	4413      	add	r3, r2
 800064c:	f853 2c18 	ldr.w	r2, [r3, #-24]
 8000650:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000652:	429a      	cmp	r2, r3
 8000654:	d901      	bls.n	800065a <main+0xce>
 8000656:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000658:	e000      	b.n	800065c <main+0xd0>
 800065a:	2302      	movs	r3, #2
 800065c:	67fb      	str	r3, [r7, #124]	; 0x7c
 maxchannel = adcarr[maxchannel] > adcarr[3] ? maxchannel : 3;
 800065e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000660:	009b      	lsls	r3, r3, #2
 8000662:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8000666:	4413      	add	r3, r2
 8000668:	f853 2c18 	ldr.w	r2, [r3, #-24]
 800066c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800066e:	429a      	cmp	r2, r3
 8000670:	d901      	bls.n	8000676 <main+0xea>
 8000672:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000674:	e000      	b.n	8000678 <main+0xec>
 8000676:	2303      	movs	r3, #3
 8000678:	67fb      	str	r3, [r7, #124]	; 0x7c


 testtest(maxchannel, adcarr[maxchannel]);
 800067a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800067c:	009b      	lsls	r3, r3, #2
 800067e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8000682:	4413      	add	r3, r2
 8000684:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8000688:	4619      	mov	r1, r3
 800068a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800068c:	f7ff ff32 	bl	80004f4 <testtest>
  {
 8000690:	e7c1      	b.n	8000616 <main+0x8a>
 8000692:	bf00      	nop
 8000694:	20000378 	.word	0x20000378
 8000698:	20000280 	.word	0x20000280

0800069c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b096      	sub	sp, #88	; 0x58
 80006a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a2:	f107 0314 	add.w	r3, r7, #20
 80006a6:	2244      	movs	r2, #68	; 0x44
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f007 f934 	bl	8007918 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b0:	463b      	mov	r3, r7
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	605a      	str	r2, [r3, #4]
 80006b8:	609a      	str	r2, [r3, #8]
 80006ba:	60da      	str	r2, [r3, #12]
 80006bc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80006be:	2000      	movs	r0, #0
 80006c0:	f003 fd9a 	bl	80041f8 <HAL_PWREx_ControlVoltageScaling>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0x32>
  {
    Error_Handler();
 80006ca:	f000 fdd5 	bl	8001278 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006ce:	f003 fd63 	bl	8004198 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006d2:	4b22      	ldr	r3, [pc, #136]	; (800075c <SystemClock_Config+0xc0>)
 80006d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80006d8:	4a20      	ldr	r2, [pc, #128]	; (800075c <SystemClock_Config+0xc0>)
 80006da:	f023 0318 	bic.w	r3, r3, #24
 80006de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80006e2:	2314      	movs	r3, #20
 80006e4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006e6:	2301      	movs	r3, #1
 80006e8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006ea:	2301      	movs	r3, #1
 80006ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006f2:	2360      	movs	r3, #96	; 0x60
 80006f4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f6:	2302      	movs	r3, #2
 80006f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006fa:	2301      	movs	r3, #1
 80006fc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006fe:	2301      	movs	r3, #1
 8000700:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000702:	233c      	movs	r3, #60	; 0x3c
 8000704:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000706:	2302      	movs	r3, #2
 8000708:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800070a:	2302      	movs	r3, #2
 800070c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800070e:	2302      	movs	r3, #2
 8000710:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000712:	f107 0314 	add.w	r3, r7, #20
 8000716:	4618      	mov	r0, r3
 8000718:	f003 fe12 	bl	8004340 <HAL_RCC_OscConfig>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000722:	f000 fda9 	bl	8001278 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000726:	230f      	movs	r3, #15
 8000728:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072a:	2303      	movs	r3, #3
 800072c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072e:	2300      	movs	r3, #0
 8000730:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800073a:	463b      	mov	r3, r7
 800073c:	2105      	movs	r1, #5
 800073e:	4618      	mov	r0, r3
 8000740:	f004 fa24 	bl	8004b8c <HAL_RCC_ClockConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800074a:	f000 fd95 	bl	8001278 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800074e:	f004 ffff 	bl	8005750 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000752:	bf00      	nop
 8000754:	3758      	adds	r7, #88	; 0x58
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40021000 	.word	0x40021000

08000760 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b0a6      	sub	sp, #152	; 0x98
 8000764:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000766:	1d3b      	adds	r3, r7, #4
 8000768:	2294      	movs	r2, #148	; 0x94
 800076a:	2100      	movs	r1, #0
 800076c:	4618      	mov	r0, r3
 800076e:	f007 f8d3 	bl	8007918 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 8000772:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000776:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000778:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800077c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000780:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000784:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000786:	2301      	movs	r3, #1
 8000788:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800078a:	2301      	movs	r3, #1
 800078c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800078e:	2318      	movs	r3, #24
 8000790:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000792:	2302      	movs	r3, #2
 8000794:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000796:	2302      	movs	r3, #2
 8000798:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800079a:	2302      	movs	r3, #2
 800079c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 800079e:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 80007a2:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007a4:	1d3b      	adds	r3, r7, #4
 80007a6:	4618      	mov	r0, r3
 80007a8:	f004 fca2 	bl	80050f0 <HAL_RCCEx_PeriphCLKConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80007b2:	f000 fd61 	bl	8001278 <Error_Handler>
  }
}
 80007b6:	bf00      	nop
 80007b8:	3798      	adds	r7, #152	; 0x98
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
	...

080007c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b086      	sub	sp, #24
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007c6:	463b      	mov	r3, r7
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]
 80007d4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80007d6:	4b3f      	ldr	r3, [pc, #252]	; (80008d4 <MX_ADC1_Init+0x114>)
 80007d8:	4a3f      	ldr	r2, [pc, #252]	; (80008d8 <MX_ADC1_Init+0x118>)
 80007da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007dc:	4b3d      	ldr	r3, [pc, #244]	; (80008d4 <MX_ADC1_Init+0x114>)
 80007de:	2200      	movs	r2, #0
 80007e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007e2:	4b3c      	ldr	r3, [pc, #240]	; (80008d4 <MX_ADC1_Init+0x114>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007e8:	4b3a      	ldr	r3, [pc, #232]	; (80008d4 <MX_ADC1_Init+0x114>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80007ee:	4b39      	ldr	r3, [pc, #228]	; (80008d4 <MX_ADC1_Init+0x114>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007f4:	4b37      	ldr	r3, [pc, #220]	; (80008d4 <MX_ADC1_Init+0x114>)
 80007f6:	2204      	movs	r2, #4
 80007f8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007fa:	4b36      	ldr	r3, [pc, #216]	; (80008d4 <MX_ADC1_Init+0x114>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000800:	4b34      	ldr	r3, [pc, #208]	; (80008d4 <MX_ADC1_Init+0x114>)
 8000802:	2200      	movs	r2, #0
 8000804:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 8000806:	4b33      	ldr	r3, [pc, #204]	; (80008d4 <MX_ADC1_Init+0x114>)
 8000808:	2204      	movs	r2, #4
 800080a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 800080c:	4b31      	ldr	r3, [pc, #196]	; (80008d4 <MX_ADC1_Init+0x114>)
 800080e:	2201      	movs	r2, #1
 8000810:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000814:	4b2f      	ldr	r3, [pc, #188]	; (80008d4 <MX_ADC1_Init+0x114>)
 8000816:	2201      	movs	r2, #1
 8000818:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800081a:	4b2e      	ldr	r3, [pc, #184]	; (80008d4 <MX_ADC1_Init+0x114>)
 800081c:	2200      	movs	r2, #0
 800081e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000820:	4b2c      	ldr	r3, [pc, #176]	; (80008d4 <MX_ADC1_Init+0x114>)
 8000822:	2200      	movs	r2, #0
 8000824:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000826:	4b2b      	ldr	r3, [pc, #172]	; (80008d4 <MX_ADC1_Init+0x114>)
 8000828:	2200      	movs	r2, #0
 800082a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800082e:	4b29      	ldr	r3, [pc, #164]	; (80008d4 <MX_ADC1_Init+0x114>)
 8000830:	2200      	movs	r2, #0
 8000832:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000834:	4b27      	ldr	r3, [pc, #156]	; (80008d4 <MX_ADC1_Init+0x114>)
 8000836:	2200      	movs	r2, #0
 8000838:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800083c:	4825      	ldr	r0, [pc, #148]	; (80008d4 <MX_ADC1_Init+0x114>)
 800083e:	f001 fc09 	bl	8002054 <HAL_ADC_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000848:	f000 fd16 	bl	8001278 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800084c:	4b23      	ldr	r3, [pc, #140]	; (80008dc <MX_ADC1_Init+0x11c>)
 800084e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000850:	2306      	movs	r3, #6
 8000852:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000854:	2300      	movs	r3, #0
 8000856:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000858:	237f      	movs	r3, #127	; 0x7f
 800085a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800085c:	2304      	movs	r3, #4
 800085e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000860:	2300      	movs	r3, #0
 8000862:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000864:	463b      	mov	r3, r7
 8000866:	4619      	mov	r1, r3
 8000868:	481a      	ldr	r0, [pc, #104]	; (80008d4 <MX_ADC1_Init+0x114>)
 800086a:	f001 fe3f 	bl	80024ec <HAL_ADC_ConfigChannel>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8000874:	f000 fd00 	bl	8001278 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000878:	4b19      	ldr	r3, [pc, #100]	; (80008e0 <MX_ADC1_Init+0x120>)
 800087a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800087c:	230c      	movs	r3, #12
 800087e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000880:	463b      	mov	r3, r7
 8000882:	4619      	mov	r1, r3
 8000884:	4813      	ldr	r0, [pc, #76]	; (80008d4 <MX_ADC1_Init+0x114>)
 8000886:	f001 fe31 	bl	80024ec <HAL_ADC_ConfigChannel>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8000890:	f000 fcf2 	bl	8001278 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000894:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <MX_ADC1_Init+0x124>)
 8000896:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000898:	2312      	movs	r3, #18
 800089a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800089c:	463b      	mov	r3, r7
 800089e:	4619      	mov	r1, r3
 80008a0:	480c      	ldr	r0, [pc, #48]	; (80008d4 <MX_ADC1_Init+0x114>)
 80008a2:	f001 fe23 	bl	80024ec <HAL_ADC_ConfigChannel>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 80008ac:	f000 fce4 	bl	8001278 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80008b0:	4b0d      	ldr	r3, [pc, #52]	; (80008e8 <MX_ADC1_Init+0x128>)
 80008b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80008b4:	2318      	movs	r3, #24
 80008b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008b8:	463b      	mov	r3, r7
 80008ba:	4619      	mov	r1, r3
 80008bc:	4805      	ldr	r0, [pc, #20]	; (80008d4 <MX_ADC1_Init+0x114>)
 80008be:	f001 fe15 	bl	80024ec <HAL_ADC_ConfigChannel>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 80008c8:	f000 fcd6 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008cc:	bf00      	nop
 80008ce:	3718      	adds	r7, #24
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20000280 	.word	0x20000280
 80008d8:	50040000 	.word	0x50040000
 80008dc:	04300002 	.word	0x04300002
 80008e0:	08600004 	.word	0x08600004
 80008e4:	0c900008 	.word	0x0c900008
 80008e8:	10c00010 	.word	0x10c00010

080008ec <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 80008f0:	4b18      	ldr	r3, [pc, #96]	; (8000954 <MX_DFSDM1_Init+0x68>)
 80008f2:	4a19      	ldr	r2, [pc, #100]	; (8000958 <MX_DFSDM1_Init+0x6c>)
 80008f4:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 80008f6:	4b17      	ldr	r3, [pc, #92]	; (8000954 <MX_DFSDM1_Init+0x68>)
 80008f8:	2201      	movs	r2, #1
 80008fa:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80008fc:	4b15      	ldr	r3, [pc, #84]	; (8000954 <MX_DFSDM1_Init+0x68>)
 80008fe:	2200      	movs	r2, #0
 8000900:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 8000902:	4b14      	ldr	r3, [pc, #80]	; (8000954 <MX_DFSDM1_Init+0x68>)
 8000904:	2202      	movs	r2, #2
 8000906:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000908:	4b12      	ldr	r3, [pc, #72]	; (8000954 <MX_DFSDM1_Init+0x68>)
 800090a:	2200      	movs	r2, #0
 800090c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800090e:	4b11      	ldr	r3, [pc, #68]	; (8000954 <MX_DFSDM1_Init+0x68>)
 8000910:	2200      	movs	r2, #0
 8000912:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000914:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <MX_DFSDM1_Init+0x68>)
 8000916:	2200      	movs	r2, #0
 8000918:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800091a:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <MX_DFSDM1_Init+0x68>)
 800091c:	2200      	movs	r2, #0
 800091e:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000920:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <MX_DFSDM1_Init+0x68>)
 8000922:	2204      	movs	r2, #4
 8000924:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000926:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <MX_DFSDM1_Init+0x68>)
 8000928:	2200      	movs	r2, #0
 800092a:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 800092c:	4b09      	ldr	r3, [pc, #36]	; (8000954 <MX_DFSDM1_Init+0x68>)
 800092e:	2201      	movs	r2, #1
 8000930:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8000932:	4b08      	ldr	r3, [pc, #32]	; (8000954 <MX_DFSDM1_Init+0x68>)
 8000934:	2200      	movs	r2, #0
 8000936:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8000938:	4b06      	ldr	r3, [pc, #24]	; (8000954 <MX_DFSDM1_Init+0x68>)
 800093a:	2200      	movs	r2, #0
 800093c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 800093e:	4805      	ldr	r0, [pc, #20]	; (8000954 <MX_DFSDM1_Init+0x68>)
 8000940:	f002 fb44 	bl	8002fcc <HAL_DFSDM_ChannelInit>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 800094a:	f000 fc95 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20000454 	.word	0x20000454
 8000958:	40016040 	.word	0x40016040

0800095c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000960:	4b1b      	ldr	r3, [pc, #108]	; (80009d0 <MX_I2C1_Init+0x74>)
 8000962:	4a1c      	ldr	r2, [pc, #112]	; (80009d4 <MX_I2C1_Init+0x78>)
 8000964:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000966:	4b1a      	ldr	r3, [pc, #104]	; (80009d0 <MX_I2C1_Init+0x74>)
 8000968:	4a1b      	ldr	r2, [pc, #108]	; (80009d8 <MX_I2C1_Init+0x7c>)
 800096a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800096c:	4b18      	ldr	r3, [pc, #96]	; (80009d0 <MX_I2C1_Init+0x74>)
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000972:	4b17      	ldr	r3, [pc, #92]	; (80009d0 <MX_I2C1_Init+0x74>)
 8000974:	2201      	movs	r2, #1
 8000976:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000978:	4b15      	ldr	r3, [pc, #84]	; (80009d0 <MX_I2C1_Init+0x74>)
 800097a:	2200      	movs	r2, #0
 800097c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800097e:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <MX_I2C1_Init+0x74>)
 8000980:	2200      	movs	r2, #0
 8000982:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000984:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <MX_I2C1_Init+0x74>)
 8000986:	2200      	movs	r2, #0
 8000988:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800098a:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <MX_I2C1_Init+0x74>)
 800098c:	2200      	movs	r2, #0
 800098e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000990:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <MX_I2C1_Init+0x74>)
 8000992:	2200      	movs	r2, #0
 8000994:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000996:	480e      	ldr	r0, [pc, #56]	; (80009d0 <MX_I2C1_Init+0x74>)
 8000998:	f002 fde6 	bl	8003568 <HAL_I2C_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009a2:	f000 fc69 	bl	8001278 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009a6:	2100      	movs	r1, #0
 80009a8:	4809      	ldr	r0, [pc, #36]	; (80009d0 <MX_I2C1_Init+0x74>)
 80009aa:	f002 fe6c 	bl	8003686 <HAL_I2CEx_ConfigAnalogFilter>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009b4:	f000 fc60 	bl	8001278 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009b8:	2100      	movs	r1, #0
 80009ba:	4805      	ldr	r0, [pc, #20]	; (80009d0 <MX_I2C1_Init+0x74>)
 80009bc:	f002 feae 	bl	800371c <HAL_I2CEx_ConfigDigitalFilter>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009c6:	f000 fc57 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	200000e8 	.word	0x200000e8
 80009d4:	40005400 	.word	0x40005400
 80009d8:	307075b1 	.word	0x307075b1

080009dc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80009e0:	4b1b      	ldr	r3, [pc, #108]	; (8000a50 <MX_I2C2_Init+0x74>)
 80009e2:	4a1c      	ldr	r2, [pc, #112]	; (8000a54 <MX_I2C2_Init+0x78>)
 80009e4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 80009e6:	4b1a      	ldr	r3, [pc, #104]	; (8000a50 <MX_I2C2_Init+0x74>)
 80009e8:	4a1b      	ldr	r2, [pc, #108]	; (8000a58 <MX_I2C2_Init+0x7c>)
 80009ea:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80009ec:	4b18      	ldr	r3, [pc, #96]	; (8000a50 <MX_I2C2_Init+0x74>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009f2:	4b17      	ldr	r3, [pc, #92]	; (8000a50 <MX_I2C2_Init+0x74>)
 80009f4:	2201      	movs	r2, #1
 80009f6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009f8:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <MX_I2C2_Init+0x74>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80009fe:	4b14      	ldr	r3, [pc, #80]	; (8000a50 <MX_I2C2_Init+0x74>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a04:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <MX_I2C2_Init+0x74>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a0a:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <MX_I2C2_Init+0x74>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a10:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <MX_I2C2_Init+0x74>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a16:	480e      	ldr	r0, [pc, #56]	; (8000a50 <MX_I2C2_Init+0x74>)
 8000a18:	f002 fda6 	bl	8003568 <HAL_I2C_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a22:	f000 fc29 	bl	8001278 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a26:	2100      	movs	r1, #0
 8000a28:	4809      	ldr	r0, [pc, #36]	; (8000a50 <MX_I2C2_Init+0x74>)
 8000a2a:	f002 fe2c 	bl	8003686 <HAL_I2CEx_ConfigAnalogFilter>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000a34:	f000 fc20 	bl	8001278 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4805      	ldr	r0, [pc, #20]	; (8000a50 <MX_I2C2_Init+0x74>)
 8000a3c:	f002 fe6e 	bl	800371c <HAL_I2CEx_ConfigDigitalFilter>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000a46:	f000 fc17 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000184 	.word	0x20000184
 8000a54:	40005800 	.word	0x40005800
 8000a58:	307075b1 	.word	0x307075b1

08000a5c <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8000a70:	4b23      	ldr	r3, [pc, #140]	; (8000b00 <MX_OCTOSPI1_Init+0xa4>)
 8000a72:	4a24      	ldr	r2, [pc, #144]	; (8000b04 <MX_OCTOSPI1_Init+0xa8>)
 8000a74:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8000a76:	4b22      	ldr	r3, [pc, #136]	; (8000b00 <MX_OCTOSPI1_Init+0xa4>)
 8000a78:	2201      	movs	r2, #1
 8000a7a:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000a7c:	4b20      	ldr	r3, [pc, #128]	; (8000b00 <MX_OCTOSPI1_Init+0xa4>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8000a82:	4b1f      	ldr	r3, [pc, #124]	; (8000b00 <MX_OCTOSPI1_Init+0xa4>)
 8000a84:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000a88:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8000a8a:	4b1d      	ldr	r3, [pc, #116]	; (8000b00 <MX_OCTOSPI1_Init+0xa4>)
 8000a8c:	2220      	movs	r2, #32
 8000a8e:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8000a90:	4b1b      	ldr	r3, [pc, #108]	; (8000b00 <MX_OCTOSPI1_Init+0xa4>)
 8000a92:	2201      	movs	r2, #1
 8000a94:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000a96:	4b1a      	ldr	r3, [pc, #104]	; (8000b00 <MX_OCTOSPI1_Init+0xa4>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000a9c:	4b18      	ldr	r3, [pc, #96]	; (8000b00 <MX_OCTOSPI1_Init+0xa4>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 8000aa2:	4b17      	ldr	r3, [pc, #92]	; (8000b00 <MX_OCTOSPI1_Init+0xa4>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000aa8:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <MX_OCTOSPI1_Init+0xa4>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000aae:	4b14      	ldr	r3, [pc, #80]	; (8000b00 <MX_OCTOSPI1_Init+0xa4>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8000ab4:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <MX_OCTOSPI1_Init+0xa4>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000aba:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <MX_OCTOSPI1_Init+0xa4>)
 8000abc:	2208      	movs	r2, #8
 8000abe:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000ac0:	480f      	ldr	r0, [pc, #60]	; (8000b00 <MX_OCTOSPI1_Init+0xa4>)
 8000ac2:	f002 fe77 	bl	80037b4 <HAL_OSPI_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 8000acc:	f000 fbd4 	bl	8001278 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000ad8:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8000adc:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4806      	ldr	r0, [pc, #24]	; (8000b00 <MX_OCTOSPI1_Init+0xa4>)
 8000ae8:	f002 ff1a 	bl	8003920 <HAL_OSPIM_Config>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 8000af2:	f000 fbc1 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000af6:	bf00      	nop
 8000af8:	3718      	adds	r7, #24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000134 	.word	0x20000134
 8000b04:	a0001000 	.word	0xa0001000

08000b08 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000b0c:	4b1b      	ldr	r3, [pc, #108]	; (8000b7c <MX_SPI3_Init+0x74>)
 8000b0e:	4a1c      	ldr	r2, [pc, #112]	; (8000b80 <MX_SPI3_Init+0x78>)
 8000b10:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000b12:	4b1a      	ldr	r3, [pc, #104]	; (8000b7c <MX_SPI3_Init+0x74>)
 8000b14:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b18:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000b1a:	4b18      	ldr	r3, [pc, #96]	; (8000b7c <MX_SPI3_Init+0x74>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000b20:	4b16      	ldr	r3, [pc, #88]	; (8000b7c <MX_SPI3_Init+0x74>)
 8000b22:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000b26:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b28:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <MX_SPI3_Init+0x74>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b2e:	4b13      	ldr	r3, [pc, #76]	; (8000b7c <MX_SPI3_Init+0x74>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000b34:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <MX_SPI3_Init+0x74>)
 8000b36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b3a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000b3c:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <MX_SPI3_Init+0x74>)
 8000b3e:	2208      	movs	r2, #8
 8000b40:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b42:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <MX_SPI3_Init+0x74>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b48:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <MX_SPI3_Init+0x74>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b4e:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <MX_SPI3_Init+0x74>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000b54:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <MX_SPI3_Init+0x74>)
 8000b56:	2207      	movs	r2, #7
 8000b58:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b5a:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <MX_SPI3_Init+0x74>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b60:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <MX_SPI3_Init+0x74>)
 8000b62:	2208      	movs	r2, #8
 8000b64:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000b66:	4805      	ldr	r0, [pc, #20]	; (8000b7c <MX_SPI3_Init+0x74>)
 8000b68:	f004 ffea 	bl	8005b40 <HAL_SPI_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000b72:	f000 fb81 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	2000021c 	.word	0x2000021c
 8000b80:	40003c00 	.word	0x40003c00

08000b84 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08e      	sub	sp, #56	; 0x38
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	605a      	str	r2, [r3, #4]
 8000b94:	609a      	str	r2, [r3, #8]
 8000b96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b98:	f107 031c 	add.w	r3, r7, #28
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ba4:	463b      	mov	r3, r7
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	609a      	str	r2, [r3, #8]
 8000bae:	60da      	str	r2, [r3, #12]
 8000bb0:	611a      	str	r2, [r3, #16]
 8000bb2:	615a      	str	r2, [r3, #20]
 8000bb4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bb6:	4b3d      	ldr	r3, [pc, #244]	; (8000cac <MX_TIM2_Init+0x128>)
 8000bb8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bbc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000bbe:	4b3b      	ldr	r3, [pc, #236]	; (8000cac <MX_TIM2_Init+0x128>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc4:	4b39      	ldr	r3, [pc, #228]	; (8000cac <MX_TIM2_Init+0x128>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 79999;
 8000bca:	4b38      	ldr	r3, [pc, #224]	; (8000cac <MX_TIM2_Init+0x128>)
 8000bcc:	4a38      	ldr	r2, [pc, #224]	; (8000cb0 <MX_TIM2_Init+0x12c>)
 8000bce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd0:	4b36      	ldr	r3, [pc, #216]	; (8000cac <MX_TIM2_Init+0x128>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bd6:	4b35      	ldr	r3, [pc, #212]	; (8000cac <MX_TIM2_Init+0x128>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bdc:	4833      	ldr	r0, [pc, #204]	; (8000cac <MX_TIM2_Init+0x128>)
 8000bde:	f005 f852 	bl	8005c86 <HAL_TIM_Base_Init>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000be8:	f000 fb46 	bl	8001278 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bf0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bf2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	482c      	ldr	r0, [pc, #176]	; (8000cac <MX_TIM2_Init+0x128>)
 8000bfa:	f005 fb17 	bl	800622c <HAL_TIM_ConfigClockSource>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000c04:	f000 fb38 	bl	8001278 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c08:	4828      	ldr	r0, [pc, #160]	; (8000cac <MX_TIM2_Init+0x128>)
 8000c0a:	f005 f893 	bl	8005d34 <HAL_TIM_PWM_Init>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000c14:	f000 fb30 	bl	8001278 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c20:	f107 031c 	add.w	r3, r7, #28
 8000c24:	4619      	mov	r1, r3
 8000c26:	4821      	ldr	r0, [pc, #132]	; (8000cac <MX_TIM2_Init+0x128>)
 8000c28:	f005 fffa 	bl	8006c20 <HAL_TIMEx_MasterConfigSynchronization>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000c32:	f000 fb21 	bl	8001278 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c36:	2360      	movs	r3, #96	; 0x60
 8000c38:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c42:	2300      	movs	r3, #0
 8000c44:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c46:	463b      	mov	r3, r7
 8000c48:	2200      	movs	r2, #0
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4817      	ldr	r0, [pc, #92]	; (8000cac <MX_TIM2_Init+0x128>)
 8000c4e:	f005 f9d9 	bl	8006004 <HAL_TIM_PWM_ConfigChannel>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000c58:	f000 fb0e 	bl	8001278 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c5c:	463b      	mov	r3, r7
 8000c5e:	2204      	movs	r2, #4
 8000c60:	4619      	mov	r1, r3
 8000c62:	4812      	ldr	r0, [pc, #72]	; (8000cac <MX_TIM2_Init+0x128>)
 8000c64:	f005 f9ce 	bl	8006004 <HAL_TIM_PWM_ConfigChannel>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000c6e:	f000 fb03 	bl	8001278 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c72:	463b      	mov	r3, r7
 8000c74:	2208      	movs	r2, #8
 8000c76:	4619      	mov	r1, r3
 8000c78:	480c      	ldr	r0, [pc, #48]	; (8000cac <MX_TIM2_Init+0x128>)
 8000c7a:	f005 f9c3 	bl	8006004 <HAL_TIM_PWM_ConfigChannel>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8000c84:	f000 faf8 	bl	8001278 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c88:	463b      	mov	r3, r7
 8000c8a:	220c      	movs	r2, #12
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4807      	ldr	r0, [pc, #28]	; (8000cac <MX_TIM2_Init+0x128>)
 8000c90:	f005 f9b8 	bl	8006004 <HAL_TIM_PWM_ConfigChannel>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8000c9a:	f000 faed 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c9e:	4803      	ldr	r0, [pc, #12]	; (8000cac <MX_TIM2_Init+0x128>)
 8000ca0:	f000 fd42 	bl	8001728 <HAL_TIM_MspPostInit>

}
 8000ca4:	bf00      	nop
 8000ca6:	3738      	adds	r7, #56	; 0x38
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20000378 	.word	0x20000378
 8000cb0:	0001387f 	.word	0x0001387f

08000cb4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08e      	sub	sp, #56	; 0x38
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	605a      	str	r2, [r3, #4]
 8000cc4:	609a      	str	r2, [r3, #8]
 8000cc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cc8:	f107 031c 	add.w	r3, r7, #28
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cd4:	463b      	mov	r3, r7
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
 8000cde:	60da      	str	r2, [r3, #12]
 8000ce0:	611a      	str	r2, [r3, #16]
 8000ce2:	615a      	str	r2, [r3, #20]
 8000ce4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ce6:	4b3d      	ldr	r3, [pc, #244]	; (8000ddc <MX_TIM3_Init+0x128>)
 8000ce8:	4a3d      	ldr	r2, [pc, #244]	; (8000de0 <MX_TIM3_Init+0x12c>)
 8000cea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000cec:	4b3b      	ldr	r3, [pc, #236]	; (8000ddc <MX_TIM3_Init+0x128>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf2:	4b3a      	ldr	r3, [pc, #232]	; (8000ddc <MX_TIM3_Init+0x128>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000cf8:	4b38      	ldr	r3, [pc, #224]	; (8000ddc <MX_TIM3_Init+0x128>)
 8000cfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cfe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d00:	4b36      	ldr	r3, [pc, #216]	; (8000ddc <MX_TIM3_Init+0x128>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d06:	4b35      	ldr	r3, [pc, #212]	; (8000ddc <MX_TIM3_Init+0x128>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d0c:	4833      	ldr	r0, [pc, #204]	; (8000ddc <MX_TIM3_Init+0x128>)
 8000d0e:	f004 ffba 	bl	8005c86 <HAL_TIM_Base_Init>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000d18:	f000 faae 	bl	8001278 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d20:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d26:	4619      	mov	r1, r3
 8000d28:	482c      	ldr	r0, [pc, #176]	; (8000ddc <MX_TIM3_Init+0x128>)
 8000d2a:	f005 fa7f 	bl	800622c <HAL_TIM_ConfigClockSource>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000d34:	f000 faa0 	bl	8001278 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d38:	4828      	ldr	r0, [pc, #160]	; (8000ddc <MX_TIM3_Init+0x128>)
 8000d3a:	f004 fffb 	bl	8005d34 <HAL_TIM_PWM_Init>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000d44:	f000 fa98 	bl	8001278 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d50:	f107 031c 	add.w	r3, r7, #28
 8000d54:	4619      	mov	r1, r3
 8000d56:	4821      	ldr	r0, [pc, #132]	; (8000ddc <MX_TIM3_Init+0x128>)
 8000d58:	f005 ff62 	bl	8006c20 <HAL_TIMEx_MasterConfigSynchronization>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000d62:	f000 fa89 	bl	8001278 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d66:	2360      	movs	r3, #96	; 0x60
 8000d68:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d72:	2300      	movs	r3, #0
 8000d74:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d76:	463b      	mov	r3, r7
 8000d78:	2200      	movs	r2, #0
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4817      	ldr	r0, [pc, #92]	; (8000ddc <MX_TIM3_Init+0x128>)
 8000d7e:	f005 f941 	bl	8006004 <HAL_TIM_PWM_ConfigChannel>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000d88:	f000 fa76 	bl	8001278 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d8c:	463b      	mov	r3, r7
 8000d8e:	2204      	movs	r2, #4
 8000d90:	4619      	mov	r1, r3
 8000d92:	4812      	ldr	r0, [pc, #72]	; (8000ddc <MX_TIM3_Init+0x128>)
 8000d94:	f005 f936 	bl	8006004 <HAL_TIM_PWM_ConfigChannel>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000d9e:	f000 fa6b 	bl	8001278 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000da2:	463b      	mov	r3, r7
 8000da4:	2208      	movs	r2, #8
 8000da6:	4619      	mov	r1, r3
 8000da8:	480c      	ldr	r0, [pc, #48]	; (8000ddc <MX_TIM3_Init+0x128>)
 8000daa:	f005 f92b 	bl	8006004 <HAL_TIM_PWM_ConfigChannel>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8000db4:	f000 fa60 	bl	8001278 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000db8:	463b      	mov	r3, r7
 8000dba:	220c      	movs	r2, #12
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4807      	ldr	r0, [pc, #28]	; (8000ddc <MX_TIM3_Init+0x128>)
 8000dc0:	f005 f920 	bl	8006004 <HAL_TIM_PWM_ConfigChannel>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8000dca:	f000 fa55 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000dce:	4803      	ldr	r0, [pc, #12]	; (8000ddc <MX_TIM3_Init+0x128>)
 8000dd0:	f000 fcaa 	bl	8001728 <HAL_TIM_MspPostInit>

}
 8000dd4:	bf00      	nop
 8000dd6:	3738      	adds	r7, #56	; 0x38
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	200001d0 	.word	0x200001d0
 8000de0:	40000400 	.word	0x40000400

08000de4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000de8:	4b22      	ldr	r3, [pc, #136]	; (8000e74 <MX_USART1_UART_Init+0x90>)
 8000dea:	4a23      	ldr	r2, [pc, #140]	; (8000e78 <MX_USART1_UART_Init+0x94>)
 8000dec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000dee:	4b21      	ldr	r3, [pc, #132]	; (8000e74 <MX_USART1_UART_Init+0x90>)
 8000df0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000df4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000df6:	4b1f      	ldr	r3, [pc, #124]	; (8000e74 <MX_USART1_UART_Init+0x90>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000dfc:	4b1d      	ldr	r3, [pc, #116]	; (8000e74 <MX_USART1_UART_Init+0x90>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e02:	4b1c      	ldr	r3, [pc, #112]	; (8000e74 <MX_USART1_UART_Init+0x90>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e08:	4b1a      	ldr	r3, [pc, #104]	; (8000e74 <MX_USART1_UART_Init+0x90>)
 8000e0a:	220c      	movs	r2, #12
 8000e0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e0e:	4b19      	ldr	r3, [pc, #100]	; (8000e74 <MX_USART1_UART_Init+0x90>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e14:	4b17      	ldr	r3, [pc, #92]	; (8000e74 <MX_USART1_UART_Init+0x90>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e1a:	4b16      	ldr	r3, [pc, #88]	; (8000e74 <MX_USART1_UART_Init+0x90>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e20:	4b14      	ldr	r3, [pc, #80]	; (8000e74 <MX_USART1_UART_Init+0x90>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e26:	4b13      	ldr	r3, [pc, #76]	; (8000e74 <MX_USART1_UART_Init+0x90>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e2c:	4811      	ldr	r0, [pc, #68]	; (8000e74 <MX_USART1_UART_Init+0x90>)
 8000e2e:	f005 ff7f 	bl	8006d30 <HAL_UART_Init>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000e38:	f000 fa1e 	bl	8001278 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	480d      	ldr	r0, [pc, #52]	; (8000e74 <MX_USART1_UART_Init+0x90>)
 8000e40:	f006 fc7c 	bl	800773c <HAL_UARTEx_SetTxFifoThreshold>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000e4a:	f000 fa15 	bl	8001278 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e4e:	2100      	movs	r1, #0
 8000e50:	4808      	ldr	r0, [pc, #32]	; (8000e74 <MX_USART1_UART_Init+0x90>)
 8000e52:	f006 fcb1 	bl	80077b8 <HAL_UARTEx_SetRxFifoThreshold>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000e5c:	f000 fa0c 	bl	8001278 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000e60:	4804      	ldr	r0, [pc, #16]	; (8000e74 <MX_USART1_UART_Init+0x90>)
 8000e62:	f006 fc32 	bl	80076ca <HAL_UARTEx_DisableFifoMode>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000e6c:	f000 fa04 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e70:	bf00      	nop
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	200002e8 	.word	0x200002e8
 8000e78:	40013800 	.word	0x40013800

08000e7c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e80:	4b23      	ldr	r3, [pc, #140]	; (8000f10 <MX_USART2_UART_Init+0x94>)
 8000e82:	4a24      	ldr	r2, [pc, #144]	; (8000f14 <MX_USART2_UART_Init+0x98>)
 8000e84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e86:	4b22      	ldr	r3, [pc, #136]	; (8000f10 <MX_USART2_UART_Init+0x94>)
 8000e88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e8e:	4b20      	ldr	r3, [pc, #128]	; (8000f10 <MX_USART2_UART_Init+0x94>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e94:	4b1e      	ldr	r3, [pc, #120]	; (8000f10 <MX_USART2_UART_Init+0x94>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e9a:	4b1d      	ldr	r3, [pc, #116]	; (8000f10 <MX_USART2_UART_Init+0x94>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ea0:	4b1b      	ldr	r3, [pc, #108]	; (8000f10 <MX_USART2_UART_Init+0x94>)
 8000ea2:	220c      	movs	r2, #12
 8000ea4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000ea6:	4b1a      	ldr	r3, [pc, #104]	; (8000f10 <MX_USART2_UART_Init+0x94>)
 8000ea8:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000eac:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eae:	4b18      	ldr	r3, [pc, #96]	; (8000f10 <MX_USART2_UART_Init+0x94>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eb4:	4b16      	ldr	r3, [pc, #88]	; (8000f10 <MX_USART2_UART_Init+0x94>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000eba:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <MX_USART2_UART_Init+0x94>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ec0:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <MX_USART2_UART_Init+0x94>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ec6:	4812      	ldr	r0, [pc, #72]	; (8000f10 <MX_USART2_UART_Init+0x94>)
 8000ec8:	f005 ff32 	bl	8006d30 <HAL_UART_Init>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000ed2:	f000 f9d1 	bl	8001278 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	480d      	ldr	r0, [pc, #52]	; (8000f10 <MX_USART2_UART_Init+0x94>)
 8000eda:	f006 fc2f 	bl	800773c <HAL_UARTEx_SetTxFifoThreshold>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000ee4:	f000 f9c8 	bl	8001278 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4809      	ldr	r0, [pc, #36]	; (8000f10 <MX_USART2_UART_Init+0x94>)
 8000eec:	f006 fc64 	bl	80077b8 <HAL_UARTEx_SetRxFifoThreshold>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000ef6:	f000 f9bf 	bl	8001278 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000efa:	4805      	ldr	r0, [pc, #20]	; (8000f10 <MX_USART2_UART_Init+0x94>)
 8000efc:	f006 fbe5 	bl	80076ca <HAL_UARTEx_DisableFifoMode>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8000f06:	f000 f9b7 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	200003c4 	.word	0x200003c4
 8000f14:	40004400 	.word	0x40004400

08000f18 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f1c:	4b22      	ldr	r3, [pc, #136]	; (8000fa8 <MX_USART3_UART_Init+0x90>)
 8000f1e:	4a23      	ldr	r2, [pc, #140]	; (8000fac <MX_USART3_UART_Init+0x94>)
 8000f20:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f22:	4b21      	ldr	r3, [pc, #132]	; (8000fa8 <MX_USART3_UART_Init+0x90>)
 8000f24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f28:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f2a:	4b1f      	ldr	r3, [pc, #124]	; (8000fa8 <MX_USART3_UART_Init+0x90>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f30:	4b1d      	ldr	r3, [pc, #116]	; (8000fa8 <MX_USART3_UART_Init+0x90>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f36:	4b1c      	ldr	r3, [pc, #112]	; (8000fa8 <MX_USART3_UART_Init+0x90>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f3c:	4b1a      	ldr	r3, [pc, #104]	; (8000fa8 <MX_USART3_UART_Init+0x90>)
 8000f3e:	220c      	movs	r2, #12
 8000f40:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f42:	4b19      	ldr	r3, [pc, #100]	; (8000fa8 <MX_USART3_UART_Init+0x90>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f48:	4b17      	ldr	r3, [pc, #92]	; (8000fa8 <MX_USART3_UART_Init+0x90>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f4e:	4b16      	ldr	r3, [pc, #88]	; (8000fa8 <MX_USART3_UART_Init+0x90>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f54:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <MX_USART3_UART_Init+0x90>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f5a:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <MX_USART3_UART_Init+0x90>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f60:	4811      	ldr	r0, [pc, #68]	; (8000fa8 <MX_USART3_UART_Init+0x90>)
 8000f62:	f005 fee5 	bl	8006d30 <HAL_UART_Init>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000f6c:	f000 f984 	bl	8001278 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f70:	2100      	movs	r1, #0
 8000f72:	480d      	ldr	r0, [pc, #52]	; (8000fa8 <MX_USART3_UART_Init+0x90>)
 8000f74:	f006 fbe2 	bl	800773c <HAL_UARTEx_SetTxFifoThreshold>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000f7e:	f000 f97b 	bl	8001278 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f82:	2100      	movs	r1, #0
 8000f84:	4808      	ldr	r0, [pc, #32]	; (8000fa8 <MX_USART3_UART_Init+0x90>)
 8000f86:	f006 fc17 	bl	80077b8 <HAL_UARTEx_SetRxFifoThreshold>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000f90:	f000 f972 	bl	8001278 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000f94:	4804      	ldr	r0, [pc, #16]	; (8000fa8 <MX_USART3_UART_Init+0x90>)
 8000f96:	f006 fb98 	bl	80076ca <HAL_UARTEx_DisableFifoMode>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000fa0:	f000 f96a 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fa4:	bf00      	nop
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20000058 	.word	0x20000058
 8000fac:	40004800 	.word	0x40004800

08000fb0 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
	...

08000fc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08c      	sub	sp, #48	; 0x30
 8000fc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc6:	f107 031c 	add.w	r3, r7, #28
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]
 8000fd0:	609a      	str	r2, [r3, #8]
 8000fd2:	60da      	str	r2, [r3, #12]
 8000fd4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fd6:	4ba3      	ldr	r3, [pc, #652]	; (8001264 <MX_GPIO_Init+0x2a4>)
 8000fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fda:	4aa2      	ldr	r2, [pc, #648]	; (8001264 <MX_GPIO_Init+0x2a4>)
 8000fdc:	f043 0310 	orr.w	r3, r3, #16
 8000fe0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fe2:	4ba0      	ldr	r3, [pc, #640]	; (8001264 <MX_GPIO_Init+0x2a4>)
 8000fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe6:	f003 0310 	and.w	r3, r3, #16
 8000fea:	61bb      	str	r3, [r7, #24]
 8000fec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fee:	4b9d      	ldr	r3, [pc, #628]	; (8001264 <MX_GPIO_Init+0x2a4>)
 8000ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff2:	4a9c      	ldr	r2, [pc, #624]	; (8001264 <MX_GPIO_Init+0x2a4>)
 8000ff4:	f043 0304 	orr.w	r3, r3, #4
 8000ff8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ffa:	4b9a      	ldr	r3, [pc, #616]	; (8001264 <MX_GPIO_Init+0x2a4>)
 8000ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffe:	f003 0304 	and.w	r3, r3, #4
 8001002:	617b      	str	r3, [r7, #20]
 8001004:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001006:	4b97      	ldr	r3, [pc, #604]	; (8001264 <MX_GPIO_Init+0x2a4>)
 8001008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100a:	4a96      	ldr	r2, [pc, #600]	; (8001264 <MX_GPIO_Init+0x2a4>)
 800100c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001010:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001012:	4b94      	ldr	r3, [pc, #592]	; (8001264 <MX_GPIO_Init+0x2a4>)
 8001014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800101a:	613b      	str	r3, [r7, #16]
 800101c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800101e:	4b91      	ldr	r3, [pc, #580]	; (8001264 <MX_GPIO_Init+0x2a4>)
 8001020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001022:	4a90      	ldr	r2, [pc, #576]	; (8001264 <MX_GPIO_Init+0x2a4>)
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	64d3      	str	r3, [r2, #76]	; 0x4c
 800102a:	4b8e      	ldr	r3, [pc, #568]	; (8001264 <MX_GPIO_Init+0x2a4>)
 800102c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001036:	4b8b      	ldr	r3, [pc, #556]	; (8001264 <MX_GPIO_Init+0x2a4>)
 8001038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103a:	4a8a      	ldr	r2, [pc, #552]	; (8001264 <MX_GPIO_Init+0x2a4>)
 800103c:	f043 0302 	orr.w	r3, r3, #2
 8001040:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001042:	4b88      	ldr	r3, [pc, #544]	; (8001264 <MX_GPIO_Init+0x2a4>)
 8001044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001046:	f003 0302 	and.w	r3, r3, #2
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800104e:	4b85      	ldr	r3, [pc, #532]	; (8001264 <MX_GPIO_Init+0x2a4>)
 8001050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001052:	4a84      	ldr	r2, [pc, #528]	; (8001264 <MX_GPIO_Init+0x2a4>)
 8001054:	f043 0308 	orr.w	r3, r3, #8
 8001058:	64d3      	str	r3, [r2, #76]	; 0x4c
 800105a:	4b82      	ldr	r3, [pc, #520]	; (8001264 <MX_GPIO_Init+0x2a4>)
 800105c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105e:	f003 0308 	and.w	r3, r3, #8
 8001062:	607b      	str	r3, [r7, #4]
 8001064:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8001066:	2200      	movs	r2, #0
 8001068:	f240 1105 	movw	r1, #261	; 0x105
 800106c:	487e      	ldr	r0, [pc, #504]	; (8001268 <MX_GPIO_Init+0x2a8>)
 800106e:	f002 fa4b 	bl	8003508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8001072:	2200      	movs	r2, #0
 8001074:	f248 1120 	movw	r1, #33056	; 0x8120
 8001078:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800107c:	f002 fa44 	bl	8003508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin|SPSGRF_915_SDN_Pin
 8001080:	2200      	movs	r2, #0
 8001082:	f24f 0130 	movw	r1, #61488	; 0xf030
 8001086:	4879      	ldr	r0, [pc, #484]	; (800126c <MX_GPIO_Init+0x2ac>)
 8001088:	f002 fa3e 	bl	8003508 <HAL_GPIO_WritePin>
                          |ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	f242 0183 	movw	r1, #8323	; 0x2083
 8001092:	4877      	ldr	r0, [pc, #476]	; (8001270 <MX_GPIO_Init+0x2b0>)
 8001094:	f002 fa38 	bl	8003508 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001098:	f240 1305 	movw	r3, #261	; 0x105
 800109c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109e:	2301      	movs	r3, #1
 80010a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a6:	2300      	movs	r3, #0
 80010a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010aa:	f107 031c 	add.w	r3, r7, #28
 80010ae:	4619      	mov	r1, r3
 80010b0:	486d      	ldr	r0, [pc, #436]	; (8001268 <MX_GPIO_Init+0x2a8>)
 80010b2:	f002 f897 	bl	80031e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin;
 80010b6:	2368      	movs	r3, #104	; 0x68
 80010b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010ba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010c4:	f107 031c 	add.w	r3, r7, #28
 80010c8:	4619      	mov	r1, r3
 80010ca:	4867      	ldr	r0, [pc, #412]	; (8001268 <MX_GPIO_Init+0x2a8>)
 80010cc:	f002 f88a 	bl	80031e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80010d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010d6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80010e0:	f107 031c 	add.w	r3, r7, #28
 80010e4:	4619      	mov	r1, r3
 80010e6:	4863      	ldr	r0, [pc, #396]	; (8001274 <MX_GPIO_Init+0x2b4>)
 80010e8:	f002 f87c 	bl	80031e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80010ec:	2310      	movs	r3, #16
 80010ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010f0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010f6:	2301      	movs	r3, #1
 80010f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fa:	f107 031c 	add.w	r3, r7, #28
 80010fe:	4619      	mov	r1, r3
 8001100:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001104:	f002 f86e 	bl	80031e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_5|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8001108:	f248 1320 	movw	r3, #33056	; 0x8120
 800110c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110e:	2301      	movs	r3, #1
 8001110:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001116:	2300      	movs	r3, #0
 8001118:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111a:	f107 031c 	add.w	r3, r7, #28
 800111e:	4619      	mov	r1, r3
 8001120:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001124:	f002 f85e 	bl	80031e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8001128:	23c0      	movs	r3, #192	; 0xc0
 800112a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112c:	2302      	movs	r3, #2
 800112e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001134:	2303      	movs	r3, #3
 8001136:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001138:	2305      	movs	r3, #5
 800113a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113c:	f107 031c 	add.w	r3, r7, #28
 8001140:	4619      	mov	r1, r3
 8001142:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001146:	f002 f84d 	bl	80031e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800114a:	2307      	movs	r3, #7
 800114c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800114e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001152:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001154:	2301      	movs	r3, #1
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001158:	f107 031c 	add.w	r3, r7, #28
 800115c:	4619      	mov	r1, r3
 800115e:	4843      	ldr	r0, [pc, #268]	; (800126c <MX_GPIO_Init+0x2ac>)
 8001160:	f002 f840 	bl	80031e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin SPSGRF_915_SDN_Pin
                           ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin|SPSGRF_915_SDN_Pin
 8001164:	f24f 0330 	movw	r3, #61488	; 0xf030
 8001168:	61fb      	str	r3, [r7, #28]
                          |ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116a:	2301      	movs	r3, #1
 800116c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001172:	2300      	movs	r3, #0
 8001174:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001176:	f107 031c 	add.w	r3, r7, #28
 800117a:	4619      	mov	r1, r3
 800117c:	483b      	ldr	r0, [pc, #236]	; (800126c <MX_GPIO_Init+0x2ac>)
 800117e:	f002 f831 	bl	80031e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 8001182:	f44f 435c 	mov.w	r3, #56320	; 0xdc00
 8001186:	61fb      	str	r3, [r7, #28]
                          |HTS221_DRDY_EXTI15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001188:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800118c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001192:	f107 031c 	add.w	r3, r7, #28
 8001196:	4619      	mov	r1, r3
 8001198:	4835      	ldr	r0, [pc, #212]	; (8001270 <MX_GPIO_Init+0x2b0>)
 800119a:	f002 f823 	bl	80031e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 800119e:	f242 0383 	movw	r3, #8323	; 0x2083
 80011a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a4:	2301      	movs	r3, #1
 80011a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ac:	2300      	movs	r3, #0
 80011ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011b0:	f107 031c 	add.w	r3, r7, #28
 80011b4:	4619      	mov	r1, r3
 80011b6:	482e      	ldr	r0, [pc, #184]	; (8001270 <MX_GPIO_Init+0x2b0>)
 80011b8:	f002 f814 	bl	80031e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80011bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011c2:	2300      	movs	r3, #0
 80011c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80011ca:	f107 031c 	add.w	r3, r7, #28
 80011ce:	4619      	mov	r1, r3
 80011d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d4:	f002 f806 	bl	80031e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80011d8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80011dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011de:	2302      	movs	r3, #2
 80011e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e6:	2303      	movs	r3, #3
 80011e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80011ea:	230a      	movs	r3, #10
 80011ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ee:	f107 031c 	add.w	r3, r7, #28
 80011f2:	4619      	mov	r1, r3
 80011f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f8:	f001 fff4 	bl	80031e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80011fc:	2200      	movs	r2, #0
 80011fe:	2100      	movs	r1, #0
 8001200:	2006      	movs	r0, #6
 8001202:	f001 feac 	bl	8002f5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001206:	2006      	movs	r0, #6
 8001208:	f001 fec5 	bl	8002f96 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800120c:	2200      	movs	r2, #0
 800120e:	2100      	movs	r1, #0
 8001210:	2007      	movs	r0, #7
 8001212:	f001 fea4 	bl	8002f5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001216:	2007      	movs	r0, #7
 8001218:	f001 febd 	bl	8002f96 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800121c:	2200      	movs	r2, #0
 800121e:	2100      	movs	r1, #0
 8001220:	2008      	movs	r0, #8
 8001222:	f001 fe9c 	bl	8002f5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001226:	2008      	movs	r0, #8
 8001228:	f001 feb5 	bl	8002f96 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800122c:	2200      	movs	r2, #0
 800122e:	2100      	movs	r1, #0
 8001230:	200a      	movs	r0, #10
 8001232:	f001 fe94 	bl	8002f5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001236:	200a      	movs	r0, #10
 8001238:	f001 fead 	bl	8002f96 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800123c:	2200      	movs	r2, #0
 800123e:	2100      	movs	r1, #0
 8001240:	2017      	movs	r0, #23
 8001242:	f001 fe8c 	bl	8002f5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001246:	2017      	movs	r0, #23
 8001248:	f001 fea5 	bl	8002f96 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800124c:	2200      	movs	r2, #0
 800124e:	2100      	movs	r1, #0
 8001250:	2028      	movs	r0, #40	; 0x28
 8001252:	f001 fe84 	bl	8002f5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001256:	2028      	movs	r0, #40	; 0x28
 8001258:	f001 fe9d 	bl	8002f96 <HAL_NVIC_EnableIRQ>

}
 800125c:	bf00      	nop
 800125e:	3730      	adds	r7, #48	; 0x30
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40021000 	.word	0x40021000
 8001268:	48001000 	.word	0x48001000
 800126c:	48000400 	.word	0x48000400
 8001270:	48000c00 	.word	0x48000c00
 8001274:	48000800 	.word	0x48000800

08001278 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800127c:	b672      	cpsid	i
}
 800127e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001280:	e7fe      	b.n	8001280 <Error_Handler+0x8>
	...

08001284 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128a:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <HAL_MspInit+0x50>)
 800128c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800128e:	4a11      	ldr	r2, [pc, #68]	; (80012d4 <HAL_MspInit+0x50>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	6613      	str	r3, [r2, #96]	; 0x60
 8001296:	4b0f      	ldr	r3, [pc, #60]	; (80012d4 <HAL_MspInit+0x50>)
 8001298:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	607b      	str	r3, [r7, #4]
 80012a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a2:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <HAL_MspInit+0x50>)
 80012a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012a6:	4a0b      	ldr	r2, [pc, #44]	; (80012d4 <HAL_MspInit+0x50>)
 80012a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ac:	6593      	str	r3, [r2, #88]	; 0x58
 80012ae:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <HAL_MspInit+0x50>)
 80012b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b6:	603b      	str	r3, [r7, #0]
 80012b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80012ba:	2200      	movs	r2, #0
 80012bc:	2100      	movs	r1, #0
 80012be:	2005      	movs	r0, #5
 80012c0:	f001 fe4d 	bl	8002f5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80012c4:	2005      	movs	r0, #5
 80012c6:	f001 fe66 	bl	8002f96 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40021000 	.word	0x40021000

080012d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08a      	sub	sp, #40	; 0x28
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a15      	ldr	r2, [pc, #84]	; (800134c <HAL_ADC_MspInit+0x74>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d123      	bne.n	8001342 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80012fa:	4b15      	ldr	r3, [pc, #84]	; (8001350 <HAL_ADC_MspInit+0x78>)
 80012fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fe:	4a14      	ldr	r2, [pc, #80]	; (8001350 <HAL_ADC_MspInit+0x78>)
 8001300:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001304:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001306:	4b12      	ldr	r3, [pc, #72]	; (8001350 <HAL_ADC_MspInit+0x78>)
 8001308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800130e:	613b      	str	r3, [r7, #16]
 8001310:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001312:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <HAL_ADC_MspInit+0x78>)
 8001314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001316:	4a0e      	ldr	r2, [pc, #56]	; (8001350 <HAL_ADC_MspInit+0x78>)
 8001318:	f043 0304 	orr.w	r3, r3, #4
 800131c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800131e:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <HAL_ADC_MspInit+0x78>)
 8001320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001322:	f003 0304 	and.w	r3, r3, #4
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800132a:	233f      	movs	r3, #63	; 0x3f
 800132c:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800132e:	230b      	movs	r3, #11
 8001330:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001336:	f107 0314 	add.w	r3, r7, #20
 800133a:	4619      	mov	r1, r3
 800133c:	4805      	ldr	r0, [pc, #20]	; (8001354 <HAL_ADC_MspInit+0x7c>)
 800133e:	f001 ff51 	bl	80031e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001342:	bf00      	nop
 8001344:	3728      	adds	r7, #40	; 0x28
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	50040000 	.word	0x50040000
 8001350:	40021000 	.word	0x40021000
 8001354:	48000800 	.word	0x48000800

08001358 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b0ae      	sub	sp, #184	; 0xb8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001360:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001370:	f107 0310 	add.w	r3, r7, #16
 8001374:	2294      	movs	r2, #148	; 0x94
 8001376:	2100      	movs	r1, #0
 8001378:	4618      	mov	r0, r3
 800137a:	f006 facd 	bl	8007918 <memset>
  if(DFSDM1_Init == 0)
 800137e:	4b25      	ldr	r3, [pc, #148]	; (8001414 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d142      	bne.n	800140c <HAL_DFSDM_ChannelMspInit+0xb4>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001386:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800138a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 800138c:	2300      	movs	r3, #0
 800138e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001392:	f107 0310 	add.w	r3, r7, #16
 8001396:	4618      	mov	r0, r3
 8001398:	f003 feaa 	bl	80050f0 <HAL_RCCEx_PeriphCLKConfig>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 80013a2:	f7ff ff69 	bl	8001278 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80013a6:	4b1c      	ldr	r3, [pc, #112]	; (8001418 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80013a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013aa:	4a1b      	ldr	r2, [pc, #108]	; (8001418 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80013ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013b0:	6613      	str	r3, [r2, #96]	; 0x60
 80013b2:	4b19      	ldr	r3, [pc, #100]	; (8001418 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80013b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80013be:	4b16      	ldr	r3, [pc, #88]	; (8001418 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80013c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c2:	4a15      	ldr	r2, [pc, #84]	; (8001418 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80013c4:	f043 0310 	orr.w	r3, r3, #16
 80013c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ca:	4b13      	ldr	r3, [pc, #76]	; (8001418 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80013cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ce:	f003 0310 	and.w	r3, r3, #16
 80013d2:	60bb      	str	r3, [r7, #8]
 80013d4:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80013d6:	f44f 7320 	mov.w	r3, #640	; 0x280
 80013da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013de:	2302      	movs	r3, #2
 80013e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ea:	2300      	movs	r3, #0
 80013ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80013f0:	2306      	movs	r3, #6
 80013f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013f6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80013fa:	4619      	mov	r1, r3
 80013fc:	4807      	ldr	r0, [pc, #28]	; (800141c <HAL_DFSDM_ChannelMspInit+0xc4>)
 80013fe:	f001 fef1 	bl	80031e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001402:	4b04      	ldr	r3, [pc, #16]	; (8001414 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	3301      	adds	r3, #1
 8001408:	4a02      	ldr	r2, [pc, #8]	; (8001414 <HAL_DFSDM_ChannelMspInit+0xbc>)
 800140a:	6013      	str	r3, [r2, #0]
  }

}
 800140c:	bf00      	nop
 800140e:	37b8      	adds	r7, #184	; 0xb8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20000030 	.word	0x20000030
 8001418:	40021000 	.word	0x40021000
 800141c:	48001000 	.word	0x48001000

08001420 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b0b0      	sub	sp, #192	; 0xc0
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001428:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
 8001436:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001438:	f107 0318 	add.w	r3, r7, #24
 800143c:	2294      	movs	r2, #148	; 0x94
 800143e:	2100      	movs	r1, #0
 8001440:	4618      	mov	r0, r3
 8001442:	f006 fa69 	bl	8007918 <memset>
  if(hi2c->Instance==I2C1)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a42      	ldr	r2, [pc, #264]	; (8001554 <HAL_I2C_MspInit+0x134>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d13c      	bne.n	80014ca <HAL_I2C_MspInit+0xaa>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001450:	2340      	movs	r3, #64	; 0x40
 8001452:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001454:	2300      	movs	r3, #0
 8001456:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001458:	f107 0318 	add.w	r3, r7, #24
 800145c:	4618      	mov	r0, r3
 800145e:	f003 fe47 	bl	80050f0 <HAL_RCCEx_PeriphCLKConfig>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001468:	f7ff ff06 	bl	8001278 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800146c:	4b3a      	ldr	r3, [pc, #232]	; (8001558 <HAL_I2C_MspInit+0x138>)
 800146e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001470:	4a39      	ldr	r2, [pc, #228]	; (8001558 <HAL_I2C_MspInit+0x138>)
 8001472:	f043 0302 	orr.w	r3, r3, #2
 8001476:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001478:	4b37      	ldr	r3, [pc, #220]	; (8001558 <HAL_I2C_MspInit+0x138>)
 800147a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147c:	f003 0302 	and.w	r3, r3, #2
 8001480:	617b      	str	r3, [r7, #20]
 8001482:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001484:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001488:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800148c:	2312      	movs	r3, #18
 800148e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001492:	2301      	movs	r3, #1
 8001494:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001498:	2303      	movs	r3, #3
 800149a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800149e:	2304      	movs	r3, #4
 80014a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80014a8:	4619      	mov	r1, r3
 80014aa:	482c      	ldr	r0, [pc, #176]	; (800155c <HAL_I2C_MspInit+0x13c>)
 80014ac:	f001 fe9a 	bl	80031e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014b0:	4b29      	ldr	r3, [pc, #164]	; (8001558 <HAL_I2C_MspInit+0x138>)
 80014b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b4:	4a28      	ldr	r2, [pc, #160]	; (8001558 <HAL_I2C_MspInit+0x138>)
 80014b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014ba:	6593      	str	r3, [r2, #88]	; 0x58
 80014bc:	4b26      	ldr	r3, [pc, #152]	; (8001558 <HAL_I2C_MspInit+0x138>)
 80014be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014c4:	613b      	str	r3, [r7, #16]
 80014c6:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80014c8:	e040      	b.n	800154c <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a24      	ldr	r2, [pc, #144]	; (8001560 <HAL_I2C_MspInit+0x140>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d13b      	bne.n	800154c <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80014d4:	2380      	movs	r3, #128	; 0x80
 80014d6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80014d8:	2300      	movs	r3, #0
 80014da:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014dc:	f107 0318 	add.w	r3, r7, #24
 80014e0:	4618      	mov	r0, r3
 80014e2:	f003 fe05 	bl	80050f0 <HAL_RCCEx_PeriphCLKConfig>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 80014ec:	f7ff fec4 	bl	8001278 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f0:	4b19      	ldr	r3, [pc, #100]	; (8001558 <HAL_I2C_MspInit+0x138>)
 80014f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f4:	4a18      	ldr	r2, [pc, #96]	; (8001558 <HAL_I2C_MspInit+0x138>)
 80014f6:	f043 0302 	orr.w	r3, r3, #2
 80014fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014fc:	4b16      	ldr	r3, [pc, #88]	; (8001558 <HAL_I2C_MspInit+0x138>)
 80014fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001500:	f003 0302 	and.w	r3, r3, #2
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001508:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800150c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001510:	2312      	movs	r3, #18
 8001512:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001516:	2301      	movs	r3, #1
 8001518:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151c:	2303      	movs	r3, #3
 800151e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001522:	2304      	movs	r3, #4
 8001524:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001528:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800152c:	4619      	mov	r1, r3
 800152e:	480b      	ldr	r0, [pc, #44]	; (800155c <HAL_I2C_MspInit+0x13c>)
 8001530:	f001 fe58 	bl	80031e4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001534:	4b08      	ldr	r3, [pc, #32]	; (8001558 <HAL_I2C_MspInit+0x138>)
 8001536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001538:	4a07      	ldr	r2, [pc, #28]	; (8001558 <HAL_I2C_MspInit+0x138>)
 800153a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800153e:	6593      	str	r3, [r2, #88]	; 0x58
 8001540:	4b05      	ldr	r3, [pc, #20]	; (8001558 <HAL_I2C_MspInit+0x138>)
 8001542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001544:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	68bb      	ldr	r3, [r7, #8]
}
 800154c:	bf00      	nop
 800154e:	37c0      	adds	r7, #192	; 0xc0
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40005400 	.word	0x40005400
 8001558:	40021000 	.word	0x40021000
 800155c:	48000400 	.word	0x48000400
 8001560:	40005800 	.word	0x40005800

08001564 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b0b0      	sub	sp, #192	; 0xc0
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	605a      	str	r2, [r3, #4]
 8001576:	609a      	str	r2, [r3, #8]
 8001578:	60da      	str	r2, [r3, #12]
 800157a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800157c:	f107 0318 	add.w	r3, r7, #24
 8001580:	2294      	movs	r2, #148	; 0x94
 8001582:	2100      	movs	r1, #0
 8001584:	4618      	mov	r0, r3
 8001586:	f006 f9c7 	bl	8007918 <memset>
  if(hospi->Instance==OCTOSPI1)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a28      	ldr	r2, [pc, #160]	; (8001630 <HAL_OSPI_MspInit+0xcc>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d149      	bne.n	8001628 <HAL_OSPI_MspInit+0xc4>
  /* USER CODE BEGIN OCTOSPI1_MspInit 0 */

  /* USER CODE END OCTOSPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8001594:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001598:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 800159a:	2300      	movs	r3, #0
 800159c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015a0:	f107 0318 	add.w	r3, r7, #24
 80015a4:	4618      	mov	r0, r3
 80015a6:	f003 fda3 	bl	80050f0 <HAL_RCCEx_PeriphCLKConfig>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 80015b0:	f7ff fe62 	bl	8001278 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 80015b4:	4b1f      	ldr	r3, [pc, #124]	; (8001634 <HAL_OSPI_MspInit+0xd0>)
 80015b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b8:	4a1e      	ldr	r2, [pc, #120]	; (8001634 <HAL_OSPI_MspInit+0xd0>)
 80015ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80015be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015c0:	4b1c      	ldr	r3, [pc, #112]	; (8001634 <HAL_OSPI_MspInit+0xd0>)
 80015c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015c8:	617b      	str	r3, [r7, #20]
 80015ca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80015cc:	4b19      	ldr	r3, [pc, #100]	; (8001634 <HAL_OSPI_MspInit+0xd0>)
 80015ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015d0:	4a18      	ldr	r2, [pc, #96]	; (8001634 <HAL_OSPI_MspInit+0xd0>)
 80015d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015d6:	6513      	str	r3, [r2, #80]	; 0x50
 80015d8:	4b16      	ldr	r3, [pc, #88]	; (8001634 <HAL_OSPI_MspInit+0xd0>)
 80015da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e0:	613b      	str	r3, [r7, #16]
 80015e2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80015e4:	4b13      	ldr	r3, [pc, #76]	; (8001634 <HAL_OSPI_MspInit+0xd0>)
 80015e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e8:	4a12      	ldr	r2, [pc, #72]	; (8001634 <HAL_OSPI_MspInit+0xd0>)
 80015ea:	f043 0310 	orr.w	r3, r3, #16
 80015ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015f0:	4b10      	ldr	r3, [pc, #64]	; (8001634 <HAL_OSPI_MspInit+0xd0>)
 80015f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f4:	f003 0310 	and.w	r3, r3, #16
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80015fc:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001600:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001604:	2302      	movs	r3, #2
 8001606:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001610:	2303      	movs	r3, #3
 8001612:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001616:	230a      	movs	r3, #10
 8001618:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800161c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001620:	4619      	mov	r1, r3
 8001622:	4805      	ldr	r0, [pc, #20]	; (8001638 <HAL_OSPI_MspInit+0xd4>)
 8001624:	f001 fdde 	bl	80031e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8001628:	bf00      	nop
 800162a:	37c0      	adds	r7, #192	; 0xc0
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	a0001000 	.word	0xa0001000
 8001634:	40021000 	.word	0x40021000
 8001638:	48001000 	.word	0x48001000

0800163c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08a      	sub	sp, #40	; 0x28
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a17      	ldr	r2, [pc, #92]	; (80016b8 <HAL_SPI_MspInit+0x7c>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d128      	bne.n	80016b0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800165e:	4b17      	ldr	r3, [pc, #92]	; (80016bc <HAL_SPI_MspInit+0x80>)
 8001660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001662:	4a16      	ldr	r2, [pc, #88]	; (80016bc <HAL_SPI_MspInit+0x80>)
 8001664:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001668:	6593      	str	r3, [r2, #88]	; 0x58
 800166a:	4b14      	ldr	r3, [pc, #80]	; (80016bc <HAL_SPI_MspInit+0x80>)
 800166c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800166e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001672:	613b      	str	r3, [r7, #16]
 8001674:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001676:	4b11      	ldr	r3, [pc, #68]	; (80016bc <HAL_SPI_MspInit+0x80>)
 8001678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167a:	4a10      	ldr	r2, [pc, #64]	; (80016bc <HAL_SPI_MspInit+0x80>)
 800167c:	f043 0304 	orr.w	r3, r3, #4
 8001680:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001682:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <HAL_SPI_MspInit+0x80>)
 8001684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001686:	f003 0304 	and.w	r3, r3, #4
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800168e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001692:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001694:	2302      	movs	r3, #2
 8001696:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169c:	2303      	movs	r3, #3
 800169e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80016a0:	2306      	movs	r3, #6
 80016a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016a4:	f107 0314 	add.w	r3, r7, #20
 80016a8:	4619      	mov	r1, r3
 80016aa:	4805      	ldr	r0, [pc, #20]	; (80016c0 <HAL_SPI_MspInit+0x84>)
 80016ac:	f001 fd9a 	bl	80031e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80016b0:	bf00      	nop
 80016b2:	3728      	adds	r7, #40	; 0x28
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40003c00 	.word	0x40003c00
 80016bc:	40021000 	.word	0x40021000
 80016c0:	48000800 	.word	0x48000800

080016c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016d4:	d10c      	bne.n	80016f0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016d6:	4b12      	ldr	r3, [pc, #72]	; (8001720 <HAL_TIM_Base_MspInit+0x5c>)
 80016d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016da:	4a11      	ldr	r2, [pc, #68]	; (8001720 <HAL_TIM_Base_MspInit+0x5c>)
 80016dc:	f043 0301 	orr.w	r3, r3, #1
 80016e0:	6593      	str	r3, [r2, #88]	; 0x58
 80016e2:	4b0f      	ldr	r3, [pc, #60]	; (8001720 <HAL_TIM_Base_MspInit+0x5c>)
 80016e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80016ee:	e010      	b.n	8001712 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a0b      	ldr	r2, [pc, #44]	; (8001724 <HAL_TIM_Base_MspInit+0x60>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d10b      	bne.n	8001712 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016fa:	4b09      	ldr	r3, [pc, #36]	; (8001720 <HAL_TIM_Base_MspInit+0x5c>)
 80016fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016fe:	4a08      	ldr	r2, [pc, #32]	; (8001720 <HAL_TIM_Base_MspInit+0x5c>)
 8001700:	f043 0302 	orr.w	r3, r3, #2
 8001704:	6593      	str	r3, [r2, #88]	; 0x58
 8001706:	4b06      	ldr	r3, [pc, #24]	; (8001720 <HAL_TIM_Base_MspInit+0x5c>)
 8001708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	60bb      	str	r3, [r7, #8]
 8001710:	68bb      	ldr	r3, [r7, #8]
}
 8001712:	bf00      	nop
 8001714:	3714      	adds	r7, #20
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	40021000 	.word	0x40021000
 8001724:	40000400 	.word	0x40000400

08001728 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b08a      	sub	sp, #40	; 0x28
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001748:	d11d      	bne.n	8001786 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800174a:	4b22      	ldr	r3, [pc, #136]	; (80017d4 <HAL_TIM_MspPostInit+0xac>)
 800174c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800174e:	4a21      	ldr	r2, [pc, #132]	; (80017d4 <HAL_TIM_MspPostInit+0xac>)
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001756:	4b1f      	ldr	r3, [pc, #124]	; (80017d4 <HAL_TIM_MspPostInit+0xac>)
 8001758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	613b      	str	r3, [r7, #16]
 8001760:	693b      	ldr	r3, [r7, #16]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001762:	230f      	movs	r3, #15
 8001764:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001766:	2302      	movs	r3, #2
 8001768:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176a:	2300      	movs	r3, #0
 800176c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176e:	2300      	movs	r3, #0
 8001770:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001772:	2301      	movs	r3, #1
 8001774:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001776:	f107 0314 	add.w	r3, r7, #20
 800177a:	4619      	mov	r1, r3
 800177c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001780:	f001 fd30 	bl	80031e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001784:	e021      	b.n	80017ca <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM3)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a13      	ldr	r2, [pc, #76]	; (80017d8 <HAL_TIM_MspPostInit+0xb0>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d11c      	bne.n	80017ca <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001790:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <HAL_TIM_MspPostInit+0xac>)
 8001792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001794:	4a0f      	ldr	r2, [pc, #60]	; (80017d4 <HAL_TIM_MspPostInit+0xac>)
 8001796:	f043 0304 	orr.w	r3, r3, #4
 800179a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800179c:	4b0d      	ldr	r3, [pc, #52]	; (80017d4 <HAL_TIM_MspPostInit+0xac>)
 800179e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a0:	f003 0304 	and.w	r3, r3, #4
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80017a8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80017ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ae:	2302      	movs	r3, #2
 80017b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b6:	2300      	movs	r3, #0
 80017b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017ba:	2302      	movs	r3, #2
 80017bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017be:	f107 0314 	add.w	r3, r7, #20
 80017c2:	4619      	mov	r1, r3
 80017c4:	4805      	ldr	r0, [pc, #20]	; (80017dc <HAL_TIM_MspPostInit+0xb4>)
 80017c6:	f001 fd0d 	bl	80031e4 <HAL_GPIO_Init>
}
 80017ca:	bf00      	nop
 80017cc:	3728      	adds	r7, #40	; 0x28
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40021000 	.word	0x40021000
 80017d8:	40000400 	.word	0x40000400
 80017dc:	48000800 	.word	0x48000800

080017e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b0b2      	sub	sp, #200	; 0xc8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017f8:	f107 0320 	add.w	r3, r7, #32
 80017fc:	2294      	movs	r2, #148	; 0x94
 80017fe:	2100      	movs	r1, #0
 8001800:	4618      	mov	r0, r3
 8001802:	f006 f889 	bl	8007918 <memset>
  if(huart->Instance==USART1)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a62      	ldr	r2, [pc, #392]	; (8001994 <HAL_UART_MspInit+0x1b4>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d13b      	bne.n	8001888 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001810:	2301      	movs	r3, #1
 8001812:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001814:	2300      	movs	r3, #0
 8001816:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001818:	f107 0320 	add.w	r3, r7, #32
 800181c:	4618      	mov	r0, r3
 800181e:	f003 fc67 	bl	80050f0 <HAL_RCCEx_PeriphCLKConfig>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001828:	f7ff fd26 	bl	8001278 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800182c:	4b5a      	ldr	r3, [pc, #360]	; (8001998 <HAL_UART_MspInit+0x1b8>)
 800182e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001830:	4a59      	ldr	r2, [pc, #356]	; (8001998 <HAL_UART_MspInit+0x1b8>)
 8001832:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001836:	6613      	str	r3, [r2, #96]	; 0x60
 8001838:	4b57      	ldr	r3, [pc, #348]	; (8001998 <HAL_UART_MspInit+0x1b8>)
 800183a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800183c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001840:	61fb      	str	r3, [r7, #28]
 8001842:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001844:	4b54      	ldr	r3, [pc, #336]	; (8001998 <HAL_UART_MspInit+0x1b8>)
 8001846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001848:	4a53      	ldr	r2, [pc, #332]	; (8001998 <HAL_UART_MspInit+0x1b8>)
 800184a:	f043 0302 	orr.w	r3, r3, #2
 800184e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001850:	4b51      	ldr	r3, [pc, #324]	; (8001998 <HAL_UART_MspInit+0x1b8>)
 8001852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001854:	f003 0302 	and.w	r3, r3, #2
 8001858:	61bb      	str	r3, [r7, #24]
 800185a:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800185c:	23c0      	movs	r3, #192	; 0xc0
 800185e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001862:	2302      	movs	r3, #2
 8001864:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800186e:	2303      	movs	r3, #3
 8001870:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001874:	2307      	movs	r3, #7
 8001876:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800187a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800187e:	4619      	mov	r1, r3
 8001880:	4846      	ldr	r0, [pc, #280]	; (800199c <HAL_UART_MspInit+0x1bc>)
 8001882:	f001 fcaf 	bl	80031e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001886:	e081      	b.n	800198c <HAL_UART_MspInit+0x1ac>
  else if(huart->Instance==USART2)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a44      	ldr	r2, [pc, #272]	; (80019a0 <HAL_UART_MspInit+0x1c0>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d13b      	bne.n	800190a <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001892:	2302      	movs	r3, #2
 8001894:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001896:	2300      	movs	r3, #0
 8001898:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800189a:	f107 0320 	add.w	r3, r7, #32
 800189e:	4618      	mov	r0, r3
 80018a0:	f003 fc26 	bl	80050f0 <HAL_RCCEx_PeriphCLKConfig>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <HAL_UART_MspInit+0xce>
      Error_Handler();
 80018aa:	f7ff fce5 	bl	8001278 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80018ae:	4b3a      	ldr	r3, [pc, #232]	; (8001998 <HAL_UART_MspInit+0x1b8>)
 80018b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b2:	4a39      	ldr	r2, [pc, #228]	; (8001998 <HAL_UART_MspInit+0x1b8>)
 80018b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018b8:	6593      	str	r3, [r2, #88]	; 0x58
 80018ba:	4b37      	ldr	r3, [pc, #220]	; (8001998 <HAL_UART_MspInit+0x1b8>)
 80018bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c2:	617b      	str	r3, [r7, #20]
 80018c4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018c6:	4b34      	ldr	r3, [pc, #208]	; (8001998 <HAL_UART_MspInit+0x1b8>)
 80018c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ca:	4a33      	ldr	r2, [pc, #204]	; (8001998 <HAL_UART_MspInit+0x1b8>)
 80018cc:	f043 0308 	orr.w	r3, r3, #8
 80018d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018d2:	4b31      	ldr	r3, [pc, #196]	; (8001998 <HAL_UART_MspInit+0x1b8>)
 80018d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d6:	f003 0308 	and.w	r3, r3, #8
 80018da:	613b      	str	r3, [r7, #16]
 80018dc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80018de:	2378      	movs	r3, #120	; 0x78
 80018e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e4:	2302      	movs	r3, #2
 80018e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f0:	2303      	movs	r3, #3
 80018f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018f6:	2307      	movs	r3, #7
 80018f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018fc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001900:	4619      	mov	r1, r3
 8001902:	4828      	ldr	r0, [pc, #160]	; (80019a4 <HAL_UART_MspInit+0x1c4>)
 8001904:	f001 fc6e 	bl	80031e4 <HAL_GPIO_Init>
}
 8001908:	e040      	b.n	800198c <HAL_UART_MspInit+0x1ac>
  else if(huart->Instance==USART3)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a26      	ldr	r2, [pc, #152]	; (80019a8 <HAL_UART_MspInit+0x1c8>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d13b      	bne.n	800198c <HAL_UART_MspInit+0x1ac>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001914:	2304      	movs	r3, #4
 8001916:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001918:	2300      	movs	r3, #0
 800191a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800191c:	f107 0320 	add.w	r3, r7, #32
 8001920:	4618      	mov	r0, r3
 8001922:	f003 fbe5 	bl	80050f0 <HAL_RCCEx_PeriphCLKConfig>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <HAL_UART_MspInit+0x150>
      Error_Handler();
 800192c:	f7ff fca4 	bl	8001278 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001930:	4b19      	ldr	r3, [pc, #100]	; (8001998 <HAL_UART_MspInit+0x1b8>)
 8001932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001934:	4a18      	ldr	r2, [pc, #96]	; (8001998 <HAL_UART_MspInit+0x1b8>)
 8001936:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800193a:	6593      	str	r3, [r2, #88]	; 0x58
 800193c:	4b16      	ldr	r3, [pc, #88]	; (8001998 <HAL_UART_MspInit+0x1b8>)
 800193e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001940:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001948:	4b13      	ldr	r3, [pc, #76]	; (8001998 <HAL_UART_MspInit+0x1b8>)
 800194a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194c:	4a12      	ldr	r2, [pc, #72]	; (8001998 <HAL_UART_MspInit+0x1b8>)
 800194e:	f043 0308 	orr.w	r3, r3, #8
 8001952:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001954:	4b10      	ldr	r3, [pc, #64]	; (8001998 <HAL_UART_MspInit+0x1b8>)
 8001956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001958:	f003 0308 	and.w	r3, r3, #8
 800195c:	60bb      	str	r3, [r7, #8]
 800195e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001960:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001964:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001968:	2302      	movs	r3, #2
 800196a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001974:	2303      	movs	r3, #3
 8001976:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800197a:	2307      	movs	r3, #7
 800197c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001980:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001984:	4619      	mov	r1, r3
 8001986:	4807      	ldr	r0, [pc, #28]	; (80019a4 <HAL_UART_MspInit+0x1c4>)
 8001988:	f001 fc2c 	bl	80031e4 <HAL_GPIO_Init>
}
 800198c:	bf00      	nop
 800198e:	37c8      	adds	r7, #200	; 0xc8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40013800 	.word	0x40013800
 8001998:	40021000 	.word	0x40021000
 800199c:	48000400 	.word	0x48000400
 80019a0:	40004400 	.word	0x40004400
 80019a4:	48000c00 	.word	0x48000c00
 80019a8:	40004800 	.word	0x40004800

080019ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019b0:	e7fe      	b.n	80019b0 <NMI_Handler+0x4>

080019b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019b2:	b480      	push	{r7}
 80019b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019b6:	e7fe      	b.n	80019b6 <HardFault_Handler+0x4>

080019b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019bc:	e7fe      	b.n	80019bc <MemManage_Handler+0x4>

080019be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019be:	b480      	push	{r7}
 80019c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019c2:	e7fe      	b.n	80019c2 <BusFault_Handler+0x4>

080019c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019c8:	e7fe      	b.n	80019c8 <UsageFault_Handler+0x4>

080019ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019ca:	b480      	push	{r7}
 80019cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr

080019e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019e6:	b480      	push	{r7}
 80019e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019f8:	f000 f90e 	bl	8001c18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019fc:	bf00      	nop
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001a04:	bf00      	nop
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PMOD_RESET_Pin);
 8001a12:	2001      	movs	r0, #1
 8001a14:	f001 fd90 	bl	8003538 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001a18:	bf00      	nop
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PMOD_SPI2_SCK_Pin);
 8001a20:	2002      	movs	r0, #2
 8001a22:	f001 fd89 	bl	8003538 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ST25DV04K_RF_DISABLE_Pin);
 8001a2e:	2004      	movs	r0, #4
 8001a30:	f001 fd82 	bl	8003538 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001a34:	bf00      	nop
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ARD_A1_Pin);
 8001a3c:	2010      	movs	r0, #16
 8001a3e:	f001 fd7b 	bl	8003538 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001a4a:	2020      	movs	r0, #32
 8001a4c:	f001 fd74 	bl	8003538 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8001a50:	2040      	movs	r0, #64	; 0x40
 8001a52:	f001 fd71 	bl	8003538 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(QUADSPI_CLK_Pin);
 8001a5e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001a62:	f001 fd69 	bl	8003538 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(QUADSPI_NCS_Pin);
 8001a66:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001a6a:	f001 fd65 	bl	8003538 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OQUADSPI_BK1_IO0_Pin);
 8001a6e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001a72:	f001 fd61 	bl	8003538 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001a76:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a7a:	f001 fd5d 	bl	8003538 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(QUAD_SPI_BK1_IO2_Pin);
 8001a7e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001a82:	f001 fd59 	bl	8003538 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(QUAD_SPI_BK1_IO3_Pin);
 8001a86:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001a8a:	f001 fd55 	bl	8003538 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
	...

08001a94 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	80fb      	strh	r3, [r7, #6]
	extern int Sensitive;
	extern int Vibration;

	if(GPIO_Pin == PMOD_RESET_Pin)
 8001a9e:	88fb      	ldrh	r3, [r7, #6]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d105      	bne.n	8001ab0 <HAL_GPIO_EXTI_Callback+0x1c>
	{
		Sensitive += 100;
 8001aa4:	4b12      	ldr	r3, [pc, #72]	; (8001af0 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	3364      	adds	r3, #100	; 0x64
 8001aaa:	4a11      	ldr	r2, [pc, #68]	; (8001af0 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001aac:	6013      	str	r3, [r2, #0]
	}
	else if(GPIO_Pin == ARD_A1_Pin)
		{
			Vibration -= 10;
		}
}
 8001aae:	e019      	b.n	8001ae4 <HAL_GPIO_EXTI_Callback+0x50>
	else if(GPIO_Pin == PMOD_SPI2_SCK_Pin)
 8001ab0:	88fb      	ldrh	r3, [r7, #6]
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d105      	bne.n	8001ac2 <HAL_GPIO_EXTI_Callback+0x2e>
		Sensitive -= 100;
 8001ab6:	4b0e      	ldr	r3, [pc, #56]	; (8001af0 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	3b64      	subs	r3, #100	; 0x64
 8001abc:	4a0c      	ldr	r2, [pc, #48]	; (8001af0 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001abe:	6013      	str	r3, [r2, #0]
}
 8001ac0:	e010      	b.n	8001ae4 <HAL_GPIO_EXTI_Callback+0x50>
	else if(GPIO_Pin == ST25DV04K_RF_DISABLE_Pin)
 8001ac2:	88fb      	ldrh	r3, [r7, #6]
 8001ac4:	2b04      	cmp	r3, #4
 8001ac6:	d105      	bne.n	8001ad4 <HAL_GPIO_EXTI_Callback+0x40>
		Vibration += 10;
 8001ac8:	4b0a      	ldr	r3, [pc, #40]	; (8001af4 <HAL_GPIO_EXTI_Callback+0x60>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	330a      	adds	r3, #10
 8001ace:	4a09      	ldr	r2, [pc, #36]	; (8001af4 <HAL_GPIO_EXTI_Callback+0x60>)
 8001ad0:	6013      	str	r3, [r2, #0]
}
 8001ad2:	e007      	b.n	8001ae4 <HAL_GPIO_EXTI_Callback+0x50>
	else if(GPIO_Pin == ARD_A1_Pin)
 8001ad4:	88fb      	ldrh	r3, [r7, #6]
 8001ad6:	2b10      	cmp	r3, #16
 8001ad8:	d104      	bne.n	8001ae4 <HAL_GPIO_EXTI_Callback+0x50>
			Vibration -= 10;
 8001ada:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <HAL_GPIO_EXTI_Callback+0x60>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	3b0a      	subs	r3, #10
 8001ae0:	4a04      	ldr	r2, [pc, #16]	; (8001af4 <HAL_GPIO_EXTI_Callback+0x60>)
 8001ae2:	6013      	str	r3, [r2, #0]
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	20000000 	.word	0x20000000
 8001af4:	20000004 	.word	0x20000004

08001af8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001afc:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <SystemInit+0x20>)
 8001afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b02:	4a05      	ldr	r2, [pc, #20]	; (8001b18 <SystemInit+0x20>)
 8001b04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	e000ed00 	.word	0xe000ed00

08001b1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b54 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b20:	f7ff ffea 	bl	8001af8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b24:	480c      	ldr	r0, [pc, #48]	; (8001b58 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b26:	490d      	ldr	r1, [pc, #52]	; (8001b5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b28:	4a0d      	ldr	r2, [pc, #52]	; (8001b60 <LoopForever+0xe>)
  movs r3, #0
 8001b2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b2c:	e002      	b.n	8001b34 <LoopCopyDataInit>

08001b2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b32:	3304      	adds	r3, #4

08001b34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b38:	d3f9      	bcc.n	8001b2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b3a:	4a0a      	ldr	r2, [pc, #40]	; (8001b64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b3c:	4c0a      	ldr	r4, [pc, #40]	; (8001b68 <LoopForever+0x16>)
  movs r3, #0
 8001b3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b40:	e001      	b.n	8001b46 <LoopFillZerobss>

08001b42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b44:	3204      	adds	r2, #4

08001b46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b48:	d3fb      	bcc.n	8001b42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b4a:	f005 fec1 	bl	80078d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b4e:	f7fe fd1d 	bl	800058c <main>

08001b52 <LoopForever>:

LoopForever:
    b LoopForever
 8001b52:	e7fe      	b.n	8001b52 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b54:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001b58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b5c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001b60:	080079c0 	.word	0x080079c0
  ldr r2, =_sbss
 8001b64:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001b68:	20000490 	.word	0x20000490

08001b6c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b6c:	e7fe      	b.n	8001b6c <ADC1_IRQHandler>

08001b6e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b082      	sub	sp, #8
 8001b72:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b74:	2300      	movs	r3, #0
 8001b76:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b78:	2003      	movs	r0, #3
 8001b7a:	f001 f9e5 	bl	8002f48 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b7e:	2000      	movs	r0, #0
 8001b80:	f000 f80e 	bl	8001ba0 <HAL_InitTick>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d002      	beq.n	8001b90 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	71fb      	strb	r3, [r7, #7]
 8001b8e:	e001      	b.n	8001b94 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b90:	f7ff fb78 	bl	8001284 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b94:	79fb      	ldrb	r3, [r7, #7]
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
	...

08001ba0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001bac:	4b17      	ldr	r3, [pc, #92]	; (8001c0c <HAL_InitTick+0x6c>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d023      	beq.n	8001bfc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001bb4:	4b16      	ldr	r3, [pc, #88]	; (8001c10 <HAL_InitTick+0x70>)
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	4b14      	ldr	r3, [pc, #80]	; (8001c0c <HAL_InitTick+0x6c>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f001 f9f1 	bl	8002fb2 <HAL_SYSTICK_Config>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d10f      	bne.n	8001bf6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2b0f      	cmp	r3, #15
 8001bda:	d809      	bhi.n	8001bf0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bdc:	2200      	movs	r2, #0
 8001bde:	6879      	ldr	r1, [r7, #4]
 8001be0:	f04f 30ff 	mov.w	r0, #4294967295
 8001be4:	f001 f9bb 	bl	8002f5e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001be8:	4a0a      	ldr	r2, [pc, #40]	; (8001c14 <HAL_InitTick+0x74>)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6013      	str	r3, [r2, #0]
 8001bee:	e007      	b.n	8001c00 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	73fb      	strb	r3, [r7, #15]
 8001bf4:	e004      	b.n	8001c00 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	73fb      	strb	r3, [r7, #15]
 8001bfa:	e001      	b.n	8001c00 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20000010 	.word	0x20000010
 8001c10:	20000008 	.word	0x20000008
 8001c14:	2000000c 	.word	0x2000000c

08001c18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c1c:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <HAL_IncTick+0x20>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	461a      	mov	r2, r3
 8001c22:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <HAL_IncTick+0x24>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4413      	add	r3, r2
 8001c28:	4a04      	ldr	r2, [pc, #16]	; (8001c3c <HAL_IncTick+0x24>)
 8001c2a:	6013      	str	r3, [r2, #0]
}
 8001c2c:	bf00      	nop
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	20000010 	.word	0x20000010
 8001c3c:	2000048c 	.word	0x2000048c

08001c40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  return uwTick;
 8001c44:	4b03      	ldr	r3, [pc, #12]	; (8001c54 <HAL_GetTick+0x14>)
 8001c46:	681b      	ldr	r3, [r3, #0]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	2000048c 	.word	0x2000048c

08001c58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c60:	f7ff ffee 	bl	8001c40 <HAL_GetTick>
 8001c64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c70:	d005      	beq.n	8001c7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001c72:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <HAL_Delay+0x44>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	461a      	mov	r2, r3
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c7e:	bf00      	nop
 8001c80:	f7ff ffde 	bl	8001c40 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	68fa      	ldr	r2, [r7, #12]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d8f7      	bhi.n	8001c80 <HAL_Delay+0x28>
  {
  }
}
 8001c90:	bf00      	nop
 8001c92:	bf00      	nop
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20000010 	.word	0x20000010

08001ca0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	431a      	orrs	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	609a      	str	r2, [r3, #8]
}
 8001cba:	bf00      	nop
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b083      	sub	sp, #12
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
 8001cce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	431a      	orrs	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	609a      	str	r2, [r3, #8]
}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b087      	sub	sp, #28
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
 8001d14:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	3360      	adds	r3, #96	; 0x60
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	4413      	add	r3, r2
 8001d22:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	4b08      	ldr	r3, [pc, #32]	; (8001d4c <LL_ADC_SetOffset+0x44>)
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	430a      	orrs	r2, r1
 8001d36:	4313      	orrs	r3, r2
 8001d38:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001d40:	bf00      	nop
 8001d42:	371c      	adds	r7, #28
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	03fff000 	.word	0x03fff000

08001d50 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	3360      	adds	r3, #96	; 0x60
 8001d5e:	461a      	mov	r2, r3
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	4413      	add	r3, r2
 8001d66:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3714      	adds	r7, #20
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b087      	sub	sp, #28
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	3360      	adds	r3, #96	; 0x60
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	4413      	add	r3, r2
 8001d94:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	431a      	orrs	r2, r3
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001da6:	bf00      	nop
 8001da8:	371c      	adds	r7, #28
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001db2:	b480      	push	{r7}
 8001db4:	b083      	sub	sp, #12
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
 8001dba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	695b      	ldr	r3, [r3, #20]
 8001dc0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	431a      	orrs	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	615a      	str	r2, [r3, #20]
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d101      	bne.n	8001df0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001dec:	2301      	movs	r3, #1
 8001dee:	e000      	b.n	8001df2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr

08001dfe <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	b087      	sub	sp, #28
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	60f8      	str	r0, [r7, #12]
 8001e06:	60b9      	str	r1, [r7, #8]
 8001e08:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	3330      	adds	r3, #48	; 0x30
 8001e0e:	461a      	mov	r2, r3
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	0a1b      	lsrs	r3, r3, #8
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	f003 030c 	and.w	r3, r3, #12
 8001e1a:	4413      	add	r3, r2
 8001e1c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	f003 031f 	and.w	r3, r3, #31
 8001e28:	211f      	movs	r1, #31
 8001e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2e:	43db      	mvns	r3, r3
 8001e30:	401a      	ands	r2, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	0e9b      	lsrs	r3, r3, #26
 8001e36:	f003 011f 	and.w	r1, r3, #31
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	f003 031f 	and.w	r3, r3, #31
 8001e40:	fa01 f303 	lsl.w	r3, r1, r3
 8001e44:	431a      	orrs	r2, r3
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001e4a:	bf00      	nop
 8001e4c:	371c      	adds	r7, #28
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e56:	b480      	push	{r7}
 8001e58:	b087      	sub	sp, #28
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	60f8      	str	r0, [r7, #12]
 8001e5e:	60b9      	str	r1, [r7, #8]
 8001e60:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	3314      	adds	r3, #20
 8001e66:	461a      	mov	r2, r3
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	0e5b      	lsrs	r3, r3, #25
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	f003 0304 	and.w	r3, r3, #4
 8001e72:	4413      	add	r3, r2
 8001e74:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	0d1b      	lsrs	r3, r3, #20
 8001e7e:	f003 031f 	and.w	r3, r3, #31
 8001e82:	2107      	movs	r1, #7
 8001e84:	fa01 f303 	lsl.w	r3, r1, r3
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	401a      	ands	r2, r3
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	0d1b      	lsrs	r3, r3, #20
 8001e90:	f003 031f 	and.w	r3, r3, #31
 8001e94:	6879      	ldr	r1, [r7, #4]
 8001e96:	fa01 f303 	lsl.w	r3, r1, r3
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001ea0:	bf00      	nop
 8001ea2:	371c      	adds	r7, #28
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	401a      	ands	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f003 0318 	and.w	r3, r3, #24
 8001ece:	4908      	ldr	r1, [pc, #32]	; (8001ef0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001ed0:	40d9      	lsrs	r1, r3
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	400b      	ands	r3, r1
 8001ed6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eda:	431a      	orrs	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001ee2:	bf00      	nop
 8001ee4:	3714      	adds	r7, #20
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	0007ffff 	.word	0x0007ffff

08001ef4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001f04:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	6093      	str	r3, [r2, #8]
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f2c:	d101      	bne.n	8001f32 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e000      	b.n	8001f34 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001f50:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f54:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f7c:	d101      	bne.n	8001f82 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e000      	b.n	8001f84 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001fa0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fa4:	f043 0201 	orr.w	r2, r3, #1
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f003 0301 	and.w	r3, r3, #1
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d101      	bne.n	8001fd0 <LL_ADC_IsEnabled+0x18>
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e000      	b.n	8001fd2 <LL_ADC_IsEnabled+0x1a>
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	b083      	sub	sp, #12
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001fee:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ff2:	f043 0204 	orr.w	r2, r3, #4
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001ffa:	bf00      	nop
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr

08002006 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002006:	b480      	push	{r7}
 8002008:	b083      	sub	sp, #12
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f003 0304 	and.w	r3, r3, #4
 8002016:	2b04      	cmp	r3, #4
 8002018:	d101      	bne.n	800201e <LL_ADC_REG_IsConversionOngoing+0x18>
 800201a:	2301      	movs	r3, #1
 800201c:	e000      	b.n	8002020 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800201e:	2300      	movs	r3, #0
}
 8002020:	4618      	mov	r0, r3
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f003 0308 	and.w	r3, r3, #8
 800203c:	2b08      	cmp	r3, #8
 800203e:	d101      	bne.n	8002044 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002040:	2301      	movs	r3, #1
 8002042:	e000      	b.n	8002046 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
	...

08002054 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b088      	sub	sp, #32
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800205c:	2300      	movs	r3, #0
 800205e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002060:	2300      	movs	r3, #0
 8002062:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e12f      	b.n	80022ce <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002078:	2b00      	cmp	r3, #0
 800207a:	d109      	bne.n	8002090 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f7ff f92b 	bl	80012d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff ff3f 	bl	8001f18 <LL_ADC_IsDeepPowerDownEnabled>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d004      	beq.n	80020aa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff ff25 	bl	8001ef4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff ff5a 	bl	8001f68 <LL_ADC_IsInternalRegulatorEnabled>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d115      	bne.n	80020e6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4618      	mov	r0, r3
 80020c0:	f7ff ff3e 	bl	8001f40 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020c4:	4b84      	ldr	r3, [pc, #528]	; (80022d8 <HAL_ADC_Init+0x284>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	099b      	lsrs	r3, r3, #6
 80020ca:	4a84      	ldr	r2, [pc, #528]	; (80022dc <HAL_ADC_Init+0x288>)
 80020cc:	fba2 2303 	umull	r2, r3, r2, r3
 80020d0:	099b      	lsrs	r3, r3, #6
 80020d2:	3301      	adds	r3, #1
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80020d8:	e002      	b.n	80020e0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	3b01      	subs	r3, #1
 80020de:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1f9      	bne.n	80020da <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff ff3c 	bl	8001f68 <LL_ADC_IsInternalRegulatorEnabled>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d10d      	bne.n	8002112 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fa:	f043 0210 	orr.w	r2, r3, #16
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002106:	f043 0201 	orr.w	r2, r3, #1
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f7ff ff75 	bl	8002006 <LL_ADC_REG_IsConversionOngoing>
 800211c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002122:	f003 0310 	and.w	r3, r3, #16
 8002126:	2b00      	cmp	r3, #0
 8002128:	f040 80c8 	bne.w	80022bc <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	2b00      	cmp	r3, #0
 8002130:	f040 80c4 	bne.w	80022bc <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002138:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800213c:	f043 0202 	orr.w	r2, r3, #2
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff ff35 	bl	8001fb8 <LL_ADC_IsEnabled>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d10b      	bne.n	800216c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002154:	4862      	ldr	r0, [pc, #392]	; (80022e0 <HAL_ADC_Init+0x28c>)
 8002156:	f7ff ff2f 	bl	8001fb8 <LL_ADC_IsEnabled>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d105      	bne.n	800216c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	4619      	mov	r1, r3
 8002166:	485f      	ldr	r0, [pc, #380]	; (80022e4 <HAL_ADC_Init+0x290>)
 8002168:	f7ff fd9a 	bl	8001ca0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	7e5b      	ldrb	r3, [r3, #25]
 8002170:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002176:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800217c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002182:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f893 3020 	ldrb.w	r3, [r3, #32]
 800218a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800218c:	4313      	orrs	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d106      	bne.n	80021a8 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219e:	3b01      	subs	r3, #1
 80021a0:	045b      	lsls	r3, r3, #17
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d009      	beq.n	80021c4 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021bc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68da      	ldr	r2, [r3, #12]
 80021ca:	4b47      	ldr	r3, [pc, #284]	; (80022e8 <HAL_ADC_Init+0x294>)
 80021cc:	4013      	ands	r3, r2
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	6812      	ldr	r2, [r2, #0]
 80021d2:	69b9      	ldr	r1, [r7, #24]
 80021d4:	430b      	orrs	r3, r1
 80021d6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff ff12 	bl	8002006 <LL_ADC_REG_IsConversionOngoing>
 80021e2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff ff1f 	bl	800202c <LL_ADC_INJ_IsConversionOngoing>
 80021ee:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d140      	bne.n	8002278 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d13d      	bne.n	8002278 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	7e1b      	ldrb	r3, [r3, #24]
 8002204:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002206:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800220e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002210:	4313      	orrs	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800221e:	f023 0306 	bic.w	r3, r3, #6
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	6812      	ldr	r2, [r2, #0]
 8002226:	69b9      	ldr	r1, [r7, #24]
 8002228:	430b      	orrs	r3, r1
 800222a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002232:	2b01      	cmp	r3, #1
 8002234:	d118      	bne.n	8002268 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002240:	f023 0304 	bic.w	r3, r3, #4
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800224c:	4311      	orrs	r1, r2
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002252:	4311      	orrs	r1, r2
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002258:	430a      	orrs	r2, r1
 800225a:	431a      	orrs	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f042 0201 	orr.w	r2, r2, #1
 8002264:	611a      	str	r2, [r3, #16]
 8002266:	e007      	b.n	8002278 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	691a      	ldr	r2, [r3, #16]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f022 0201 	bic.w	r2, r2, #1
 8002276:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d10c      	bne.n	800229a <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	f023 010f 	bic.w	r1, r3, #15
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	69db      	ldr	r3, [r3, #28]
 800228e:	1e5a      	subs	r2, r3, #1
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	430a      	orrs	r2, r1
 8002296:	631a      	str	r2, [r3, #48]	; 0x30
 8002298:	e007      	b.n	80022aa <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f022 020f 	bic.w	r2, r2, #15
 80022a8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ae:	f023 0303 	bic.w	r3, r3, #3
 80022b2:	f043 0201 	orr.w	r2, r3, #1
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	659a      	str	r2, [r3, #88]	; 0x58
 80022ba:	e007      	b.n	80022cc <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c0:	f043 0210 	orr.w	r2, r3, #16
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80022cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3720      	adds	r7, #32
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	20000008 	.word	0x20000008
 80022dc:	053e2d63 	.word	0x053e2d63
 80022e0:	50040000 	.word	0x50040000
 80022e4:	50040300 	.word	0x50040300
 80022e8:	fff0c007 	.word	0xfff0c007

080022ec <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff fe84 	bl	8002006 <LL_ADC_REG_IsConversionOngoing>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d14f      	bne.n	80023a4 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800230a:	2b01      	cmp	r3, #1
 800230c:	d101      	bne.n	8002312 <HAL_ADC_Start+0x26>
 800230e:	2302      	movs	r3, #2
 8002310:	e04b      	b.n	80023aa <HAL_ADC_Start+0xbe>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2201      	movs	r2, #1
 8002316:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f000 fce2 	bl	8002ce4 <ADC_Enable>
 8002320:	4603      	mov	r3, r0
 8002322:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002324:	7bfb      	ldrb	r3, [r7, #15]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d137      	bne.n	800239a <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800232e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002332:	f023 0301 	bic.w	r3, r3, #1
 8002336:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002342:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800234a:	d106      	bne.n	800235a <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002350:	f023 0206 	bic.w	r2, r3, #6
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	65da      	str	r2, [r3, #92]	; 0x5c
 8002358:	e002      	b.n	8002360 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	221c      	movs	r2, #28
 8002366:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d007      	beq.n	800238e <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002382:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002386:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff fe23 	bl	8001fde <LL_ADC_REG_StartConversion>
 8002398:	e006      	b.n	80023a8 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80023a2:	e001      	b.n	80023a8 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80023a4:	2302      	movs	r3, #2
 80023a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80023a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b086      	sub	sp, #24
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
 80023ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	695b      	ldr	r3, [r3, #20]
 80023c0:	2b08      	cmp	r3, #8
 80023c2:	d102      	bne.n	80023ca <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80023c4:	2308      	movs	r3, #8
 80023c6:	617b      	str	r3, [r7, #20]
 80023c8:	e010      	b.n	80023ec <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	f003 0301 	and.w	r3, r3, #1
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d007      	beq.n	80023e8 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023dc:	f043 0220 	orr.w	r2, r3, #32
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e06f      	b.n	80024c8 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 80023e8:	2304      	movs	r3, #4
 80023ea:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80023ec:	f7ff fc28 	bl	8001c40 <HAL_GetTick>
 80023f0:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80023f2:	e021      	b.n	8002438 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023fa:	d01d      	beq.n	8002438 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80023fc:	f7ff fc20 	bl	8001c40 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	683a      	ldr	r2, [r7, #0]
 8002408:	429a      	cmp	r2, r3
 800240a:	d302      	bcc.n	8002412 <HAL_ADC_PollForConversion+0x60>
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d112      	bne.n	8002438 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	4013      	ands	r3, r2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d10b      	bne.n	8002438 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002424:	f043 0204 	orr.w	r2, r3, #4
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e047      	b.n	80024c8 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	4013      	ands	r3, r2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d0d6      	beq.n	80023f4 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800244a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	f7ff fcbe 	bl	8001dd8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d01c      	beq.n	800249c <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	7e5b      	ldrb	r3, [r3, #25]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d118      	bne.n	800249c <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0308 	and.w	r3, r3, #8
 8002474:	2b08      	cmp	r3, #8
 8002476:	d111      	bne.n	800249c <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800247c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002488:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d105      	bne.n	800249c <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002494:	f043 0201 	orr.w	r2, r3, #1
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	659a      	str	r2, [r3, #88]	; 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	2b08      	cmp	r3, #8
 80024a8:	d104      	bne.n	80024b4 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2208      	movs	r2, #8
 80024b0:	601a      	str	r2, [r3, #0]
 80024b2:	e008      	b.n	80024c6 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d103      	bne.n	80024c6 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	220c      	movs	r2, #12
 80024c4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3718      	adds	r7, #24
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80024de:	4618      	mov	r0, r3
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
	...

080024ec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b0b6      	sub	sp, #216	; 0xd8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024f6:	2300      	movs	r3, #0
 80024f8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80024fc:	2300      	movs	r3, #0
 80024fe:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002506:	2b01      	cmp	r3, #1
 8002508:	d101      	bne.n	800250e <HAL_ADC_ConfigChannel+0x22>
 800250a:	2302      	movs	r3, #2
 800250c:	e3d5      	b.n	8002cba <HAL_ADC_ConfigChannel+0x7ce>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2201      	movs	r2, #1
 8002512:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff fd73 	bl	8002006 <LL_ADC_REG_IsConversionOngoing>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	f040 83ba 	bne.w	8002c9c <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	2b05      	cmp	r3, #5
 800252e:	d824      	bhi.n	800257a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	3b02      	subs	r3, #2
 8002536:	2b03      	cmp	r3, #3
 8002538:	d81b      	bhi.n	8002572 <HAL_ADC_ConfigChannel+0x86>
 800253a:	a201      	add	r2, pc, #4	; (adr r2, 8002540 <HAL_ADC_ConfigChannel+0x54>)
 800253c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002540:	08002551 	.word	0x08002551
 8002544:	08002559 	.word	0x08002559
 8002548:	08002561 	.word	0x08002561
 800254c:	08002569 	.word	0x08002569
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	220c      	movs	r2, #12
 8002554:	605a      	str	r2, [r3, #4]
          break;
 8002556:	e011      	b.n	800257c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	2212      	movs	r2, #18
 800255c:	605a      	str	r2, [r3, #4]
          break;
 800255e:	e00d      	b.n	800257c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	2218      	movs	r2, #24
 8002564:	605a      	str	r2, [r3, #4]
          break;
 8002566:	e009      	b.n	800257c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800256e:	605a      	str	r2, [r3, #4]
          break;
 8002570:	e004      	b.n	800257c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	2206      	movs	r2, #6
 8002576:	605a      	str	r2, [r3, #4]
          break;
 8002578:	e000      	b.n	800257c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800257a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6818      	ldr	r0, [r3, #0]
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	6859      	ldr	r1, [r3, #4]
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	461a      	mov	r2, r3
 800258a:	f7ff fc38 	bl	8001dfe <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4618      	mov	r0, r3
 8002594:	f7ff fd37 	bl	8002006 <LL_ADC_REG_IsConversionOngoing>
 8002598:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff fd43 	bl	800202c <LL_ADC_INJ_IsConversionOngoing>
 80025a6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025aa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f040 81c1 	bne.w	8002936 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80025b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f040 81bc 	bne.w	8002936 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80025c6:	d10f      	bne.n	80025e8 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6818      	ldr	r0, [r3, #0]
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2200      	movs	r2, #0
 80025d2:	4619      	mov	r1, r3
 80025d4:	f7ff fc3f 	bl	8001e56 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7ff fbe6 	bl	8001db2 <LL_ADC_SetSamplingTimeCommonConfig>
 80025e6:	e00e      	b.n	8002606 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6818      	ldr	r0, [r3, #0]
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	6819      	ldr	r1, [r3, #0]
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	461a      	mov	r2, r3
 80025f6:	f7ff fc2e 	bl	8001e56 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2100      	movs	r1, #0
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff fbd6 	bl	8001db2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	695a      	ldr	r2, [r3, #20]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	08db      	lsrs	r3, r3, #3
 8002612:	f003 0303 	and.w	r3, r3, #3
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	2b04      	cmp	r3, #4
 8002626:	d00a      	beq.n	800263e <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6818      	ldr	r0, [r3, #0]
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	6919      	ldr	r1, [r3, #16]
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002638:	f7ff fb66 	bl	8001d08 <LL_ADC_SetOffset>
 800263c:	e17b      	b.n	8002936 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2100      	movs	r1, #0
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff fb83 	bl	8001d50 <LL_ADC_GetOffsetChannel>
 800264a:	4603      	mov	r3, r0
 800264c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002650:	2b00      	cmp	r3, #0
 8002652:	d10a      	bne.n	800266a <HAL_ADC_ConfigChannel+0x17e>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2100      	movs	r1, #0
 800265a:	4618      	mov	r0, r3
 800265c:	f7ff fb78 	bl	8001d50 <LL_ADC_GetOffsetChannel>
 8002660:	4603      	mov	r3, r0
 8002662:	0e9b      	lsrs	r3, r3, #26
 8002664:	f003 021f 	and.w	r2, r3, #31
 8002668:	e01e      	b.n	80026a8 <HAL_ADC_ConfigChannel+0x1bc>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2100      	movs	r1, #0
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff fb6d 	bl	8001d50 <LL_ADC_GetOffsetChannel>
 8002676:	4603      	mov	r3, r0
 8002678:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002680:	fa93 f3a3 	rbit	r3, r3
 8002684:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002688:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800268c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002690:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8002698:	2320      	movs	r3, #32
 800269a:	e004      	b.n	80026a6 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 800269c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80026a0:	fab3 f383 	clz	r3, r3
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d105      	bne.n	80026c0 <HAL_ADC_ConfigChannel+0x1d4>
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	0e9b      	lsrs	r3, r3, #26
 80026ba:	f003 031f 	and.w	r3, r3, #31
 80026be:	e018      	b.n	80026f2 <HAL_ADC_ConfigChannel+0x206>
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80026cc:	fa93 f3a3 	rbit	r3, r3
 80026d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80026d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80026d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80026dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d101      	bne.n	80026e8 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 80026e4:	2320      	movs	r3, #32
 80026e6:	e004      	b.n	80026f2 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 80026e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80026ec:	fab3 f383 	clz	r3, r3
 80026f0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d106      	bne.n	8002704 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2200      	movs	r2, #0
 80026fc:	2100      	movs	r1, #0
 80026fe:	4618      	mov	r0, r3
 8002700:	f7ff fb3c 	bl	8001d7c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2101      	movs	r1, #1
 800270a:	4618      	mov	r0, r3
 800270c:	f7ff fb20 	bl	8001d50 <LL_ADC_GetOffsetChannel>
 8002710:	4603      	mov	r3, r0
 8002712:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002716:	2b00      	cmp	r3, #0
 8002718:	d10a      	bne.n	8002730 <HAL_ADC_ConfigChannel+0x244>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2101      	movs	r1, #1
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff fb15 	bl	8001d50 <LL_ADC_GetOffsetChannel>
 8002726:	4603      	mov	r3, r0
 8002728:	0e9b      	lsrs	r3, r3, #26
 800272a:	f003 021f 	and.w	r2, r3, #31
 800272e:	e01e      	b.n	800276e <HAL_ADC_ConfigChannel+0x282>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2101      	movs	r1, #1
 8002736:	4618      	mov	r0, r3
 8002738:	f7ff fb0a 	bl	8001d50 <LL_ADC_GetOffsetChannel>
 800273c:	4603      	mov	r3, r0
 800273e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002742:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002746:	fa93 f3a3 	rbit	r3, r3
 800274a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800274e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002752:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002756:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 800275e:	2320      	movs	r3, #32
 8002760:	e004      	b.n	800276c <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8002762:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002766:	fab3 f383 	clz	r3, r3
 800276a:	b2db      	uxtb	r3, r3
 800276c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002776:	2b00      	cmp	r3, #0
 8002778:	d105      	bne.n	8002786 <HAL_ADC_ConfigChannel+0x29a>
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	0e9b      	lsrs	r3, r3, #26
 8002780:	f003 031f 	and.w	r3, r3, #31
 8002784:	e018      	b.n	80027b8 <HAL_ADC_ConfigChannel+0x2cc>
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002792:	fa93 f3a3 	rbit	r3, r3
 8002796:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800279a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800279e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80027a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80027aa:	2320      	movs	r3, #32
 80027ac:	e004      	b.n	80027b8 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80027ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80027b2:	fab3 f383 	clz	r3, r3
 80027b6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d106      	bne.n	80027ca <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2200      	movs	r2, #0
 80027c2:	2101      	movs	r1, #1
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7ff fad9 	bl	8001d7c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2102      	movs	r1, #2
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff fabd 	bl	8001d50 <LL_ADC_GetOffsetChannel>
 80027d6:	4603      	mov	r3, r0
 80027d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d10a      	bne.n	80027f6 <HAL_ADC_ConfigChannel+0x30a>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2102      	movs	r1, #2
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff fab2 	bl	8001d50 <LL_ADC_GetOffsetChannel>
 80027ec:	4603      	mov	r3, r0
 80027ee:	0e9b      	lsrs	r3, r3, #26
 80027f0:	f003 021f 	and.w	r2, r3, #31
 80027f4:	e01e      	b.n	8002834 <HAL_ADC_ConfigChannel+0x348>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2102      	movs	r1, #2
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff faa7 	bl	8001d50 <LL_ADC_GetOffsetChannel>
 8002802:	4603      	mov	r3, r0
 8002804:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002808:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800280c:	fa93 f3a3 	rbit	r3, r3
 8002810:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002814:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002818:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800281c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002820:	2b00      	cmp	r3, #0
 8002822:	d101      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8002824:	2320      	movs	r3, #32
 8002826:	e004      	b.n	8002832 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8002828:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800282c:	fab3 f383 	clz	r3, r3
 8002830:	b2db      	uxtb	r3, r3
 8002832:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800283c:	2b00      	cmp	r3, #0
 800283e:	d105      	bne.n	800284c <HAL_ADC_ConfigChannel+0x360>
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	0e9b      	lsrs	r3, r3, #26
 8002846:	f003 031f 	and.w	r3, r3, #31
 800284a:	e016      	b.n	800287a <HAL_ADC_ConfigChannel+0x38e>
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002854:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002858:	fa93 f3a3 	rbit	r3, r3
 800285c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800285e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002860:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002864:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002868:	2b00      	cmp	r3, #0
 800286a:	d101      	bne.n	8002870 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 800286c:	2320      	movs	r3, #32
 800286e:	e004      	b.n	800287a <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002870:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002874:	fab3 f383 	clz	r3, r3
 8002878:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800287a:	429a      	cmp	r2, r3
 800287c:	d106      	bne.n	800288c <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2200      	movs	r2, #0
 8002884:	2102      	movs	r1, #2
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff fa78 	bl	8001d7c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2103      	movs	r1, #3
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff fa5c 	bl	8001d50 <LL_ADC_GetOffsetChannel>
 8002898:	4603      	mov	r3, r0
 800289a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d10a      	bne.n	80028b8 <HAL_ADC_ConfigChannel+0x3cc>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2103      	movs	r1, #3
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7ff fa51 	bl	8001d50 <LL_ADC_GetOffsetChannel>
 80028ae:	4603      	mov	r3, r0
 80028b0:	0e9b      	lsrs	r3, r3, #26
 80028b2:	f003 021f 	and.w	r2, r3, #31
 80028b6:	e017      	b.n	80028e8 <HAL_ADC_ConfigChannel+0x3fc>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2103      	movs	r1, #3
 80028be:	4618      	mov	r0, r3
 80028c0:	f7ff fa46 	bl	8001d50 <LL_ADC_GetOffsetChannel>
 80028c4:	4603      	mov	r3, r0
 80028c6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028ca:	fa93 f3a3 	rbit	r3, r3
 80028ce:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80028d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028d2:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80028d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80028da:	2320      	movs	r3, #32
 80028dc:	e003      	b.n	80028e6 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80028de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028e0:	fab3 f383 	clz	r3, r3
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d105      	bne.n	8002900 <HAL_ADC_ConfigChannel+0x414>
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	0e9b      	lsrs	r3, r3, #26
 80028fa:	f003 031f 	and.w	r3, r3, #31
 80028fe:	e011      	b.n	8002924 <HAL_ADC_ConfigChannel+0x438>
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002906:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002908:	fa93 f3a3 	rbit	r3, r3
 800290c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800290e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002910:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002912:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002914:	2b00      	cmp	r3, #0
 8002916:	d101      	bne.n	800291c <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8002918:	2320      	movs	r3, #32
 800291a:	e003      	b.n	8002924 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 800291c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800291e:	fab3 f383 	clz	r3, r3
 8002922:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002924:	429a      	cmp	r2, r3
 8002926:	d106      	bne.n	8002936 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2200      	movs	r2, #0
 800292e:	2103      	movs	r1, #3
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff fa23 	bl	8001d7c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff fb3c 	bl	8001fb8 <LL_ADC_IsEnabled>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	f040 8140 	bne.w	8002bc8 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6818      	ldr	r0, [r3, #0]
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	6819      	ldr	r1, [r3, #0]
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	461a      	mov	r2, r3
 8002956:	f7ff faa9 	bl	8001eac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	4a8f      	ldr	r2, [pc, #572]	; (8002b9c <HAL_ADC_ConfigChannel+0x6b0>)
 8002960:	4293      	cmp	r3, r2
 8002962:	f040 8131 	bne.w	8002bc8 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002972:	2b00      	cmp	r3, #0
 8002974:	d10b      	bne.n	800298e <HAL_ADC_ConfigChannel+0x4a2>
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	0e9b      	lsrs	r3, r3, #26
 800297c:	3301      	adds	r3, #1
 800297e:	f003 031f 	and.w	r3, r3, #31
 8002982:	2b09      	cmp	r3, #9
 8002984:	bf94      	ite	ls
 8002986:	2301      	movls	r3, #1
 8002988:	2300      	movhi	r3, #0
 800298a:	b2db      	uxtb	r3, r3
 800298c:	e019      	b.n	80029c2 <HAL_ADC_ConfigChannel+0x4d6>
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002994:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002996:	fa93 f3a3 	rbit	r3, r3
 800299a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800299c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800299e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80029a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80029a6:	2320      	movs	r3, #32
 80029a8:	e003      	b.n	80029b2 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80029aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029ac:	fab3 f383 	clz	r3, r3
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	3301      	adds	r3, #1
 80029b4:	f003 031f 	and.w	r3, r3, #31
 80029b8:	2b09      	cmp	r3, #9
 80029ba:	bf94      	ite	ls
 80029bc:	2301      	movls	r3, #1
 80029be:	2300      	movhi	r3, #0
 80029c0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d079      	beq.n	8002aba <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d107      	bne.n	80029e2 <HAL_ADC_ConfigChannel+0x4f6>
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	0e9b      	lsrs	r3, r3, #26
 80029d8:	3301      	adds	r3, #1
 80029da:	069b      	lsls	r3, r3, #26
 80029dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029e0:	e015      	b.n	8002a0e <HAL_ADC_ConfigChannel+0x522>
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029ea:	fa93 f3a3 	rbit	r3, r3
 80029ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80029f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029f2:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80029f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d101      	bne.n	80029fe <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 80029fa:	2320      	movs	r3, #32
 80029fc:	e003      	b.n	8002a06 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 80029fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a00:	fab3 f383 	clz	r3, r3
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	3301      	adds	r3, #1
 8002a08:	069b      	lsls	r3, r3, #26
 8002a0a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d109      	bne.n	8002a2e <HAL_ADC_ConfigChannel+0x542>
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	0e9b      	lsrs	r3, r3, #26
 8002a20:	3301      	adds	r3, #1
 8002a22:	f003 031f 	and.w	r3, r3, #31
 8002a26:	2101      	movs	r1, #1
 8002a28:	fa01 f303 	lsl.w	r3, r1, r3
 8002a2c:	e017      	b.n	8002a5e <HAL_ADC_ConfigChannel+0x572>
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a36:	fa93 f3a3 	rbit	r3, r3
 8002a3a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002a3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a3e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002a40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8002a46:	2320      	movs	r3, #32
 8002a48:	e003      	b.n	8002a52 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8002a4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a4c:	fab3 f383 	clz	r3, r3
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	3301      	adds	r3, #1
 8002a54:	f003 031f 	and.w	r3, r3, #31
 8002a58:	2101      	movs	r1, #1
 8002a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a5e:	ea42 0103 	orr.w	r1, r2, r3
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d10a      	bne.n	8002a84 <HAL_ADC_ConfigChannel+0x598>
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	0e9b      	lsrs	r3, r3, #26
 8002a74:	3301      	adds	r3, #1
 8002a76:	f003 021f 	and.w	r2, r3, #31
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	4413      	add	r3, r2
 8002a80:	051b      	lsls	r3, r3, #20
 8002a82:	e018      	b.n	8002ab6 <HAL_ADC_ConfigChannel+0x5ca>
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a8c:	fa93 f3a3 	rbit	r3, r3
 8002a90:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a94:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002a96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d101      	bne.n	8002aa0 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8002a9c:	2320      	movs	r3, #32
 8002a9e:	e003      	b.n	8002aa8 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8002aa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aa2:	fab3 f383 	clz	r3, r3
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	f003 021f 	and.w	r2, r3, #31
 8002aae:	4613      	mov	r3, r2
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	4413      	add	r3, r2
 8002ab4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ab6:	430b      	orrs	r3, r1
 8002ab8:	e081      	b.n	8002bbe <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d107      	bne.n	8002ad6 <HAL_ADC_ConfigChannel+0x5ea>
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	0e9b      	lsrs	r3, r3, #26
 8002acc:	3301      	adds	r3, #1
 8002ace:	069b      	lsls	r3, r3, #26
 8002ad0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ad4:	e015      	b.n	8002b02 <HAL_ADC_ConfigChannel+0x616>
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ade:	fa93 f3a3 	rbit	r3, r3
 8002ae2:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae6:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d101      	bne.n	8002af2 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8002aee:	2320      	movs	r3, #32
 8002af0:	e003      	b.n	8002afa <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8002af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af4:	fab3 f383 	clz	r3, r3
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	3301      	adds	r3, #1
 8002afc:	069b      	lsls	r3, r3, #26
 8002afe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d109      	bne.n	8002b22 <HAL_ADC_ConfigChannel+0x636>
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	0e9b      	lsrs	r3, r3, #26
 8002b14:	3301      	adds	r3, #1
 8002b16:	f003 031f 	and.w	r3, r3, #31
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b20:	e017      	b.n	8002b52 <HAL_ADC_ConfigChannel+0x666>
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b28:	6a3b      	ldr	r3, [r7, #32]
 8002b2a:	fa93 f3a3 	rbit	r3, r3
 8002b2e:	61fb      	str	r3, [r7, #28]
  return result;
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8002b3a:	2320      	movs	r3, #32
 8002b3c:	e003      	b.n	8002b46 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b40:	fab3 f383 	clz	r3, r3
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	3301      	adds	r3, #1
 8002b48:	f003 031f 	and.w	r3, r3, #31
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b52:	ea42 0103 	orr.w	r1, r2, r3
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d10d      	bne.n	8002b7e <HAL_ADC_ConfigChannel+0x692>
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	0e9b      	lsrs	r3, r3, #26
 8002b68:	3301      	adds	r3, #1
 8002b6a:	f003 021f 	and.w	r2, r3, #31
 8002b6e:	4613      	mov	r3, r2
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	4413      	add	r3, r2
 8002b74:	3b1e      	subs	r3, #30
 8002b76:	051b      	lsls	r3, r3, #20
 8002b78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b7c:	e01e      	b.n	8002bbc <HAL_ADC_ConfigChannel+0x6d0>
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	fa93 f3a3 	rbit	r3, r3
 8002b8a:	613b      	str	r3, [r7, #16]
  return result;
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d104      	bne.n	8002ba0 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002b96:	2320      	movs	r3, #32
 8002b98:	e006      	b.n	8002ba8 <HAL_ADC_ConfigChannel+0x6bc>
 8002b9a:	bf00      	nop
 8002b9c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	fab3 f383 	clz	r3, r3
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	3301      	adds	r3, #1
 8002baa:	f003 021f 	and.w	r2, r3, #31
 8002bae:	4613      	mov	r3, r2
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	4413      	add	r3, r2
 8002bb4:	3b1e      	subs	r3, #30
 8002bb6:	051b      	lsls	r3, r3, #20
 8002bb8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bbc:	430b      	orrs	r3, r1
 8002bbe:	683a      	ldr	r2, [r7, #0]
 8002bc0:	6892      	ldr	r2, [r2, #8]
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	f7ff f947 	bl	8001e56 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	4b3d      	ldr	r3, [pc, #244]	; (8002cc4 <HAL_ADC_ConfigChannel+0x7d8>)
 8002bce:	4013      	ands	r3, r2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d06c      	beq.n	8002cae <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002bd4:	483c      	ldr	r0, [pc, #240]	; (8002cc8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002bd6:	f7ff f889 	bl	8001cec <LL_ADC_GetCommonPathInternalCh>
 8002bda:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a3a      	ldr	r2, [pc, #232]	; (8002ccc <HAL_ADC_ConfigChannel+0x7e0>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d127      	bne.n	8002c38 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002be8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d121      	bne.n	8002c38 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a35      	ldr	r2, [pc, #212]	; (8002cd0 <HAL_ADC_ConfigChannel+0x7e4>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d157      	bne.n	8002cae <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bfe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c02:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c06:	4619      	mov	r1, r3
 8002c08:	482f      	ldr	r0, [pc, #188]	; (8002cc8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002c0a:	f7ff f85c 	bl	8001cc6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c0e:	4b31      	ldr	r3, [pc, #196]	; (8002cd4 <HAL_ADC_ConfigChannel+0x7e8>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	099b      	lsrs	r3, r3, #6
 8002c14:	4a30      	ldr	r2, [pc, #192]	; (8002cd8 <HAL_ADC_ConfigChannel+0x7ec>)
 8002c16:	fba2 2303 	umull	r2, r3, r2, r3
 8002c1a:	099b      	lsrs	r3, r3, #6
 8002c1c:	1c5a      	adds	r2, r3, #1
 8002c1e:	4613      	mov	r3, r2
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	4413      	add	r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002c28:	e002      	b.n	8002c30 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1f9      	bne.n	8002c2a <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c36:	e03a      	b.n	8002cae <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a27      	ldr	r2, [pc, #156]	; (8002cdc <HAL_ADC_ConfigChannel+0x7f0>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d113      	bne.n	8002c6a <HAL_ADC_ConfigChannel+0x77e>
 8002c42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d10d      	bne.n	8002c6a <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a1f      	ldr	r2, [pc, #124]	; (8002cd0 <HAL_ADC_ConfigChannel+0x7e4>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d12a      	bne.n	8002cae <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c60:	4619      	mov	r1, r3
 8002c62:	4819      	ldr	r0, [pc, #100]	; (8002cc8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002c64:	f7ff f82f 	bl	8001cc6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c68:	e021      	b.n	8002cae <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a1c      	ldr	r2, [pc, #112]	; (8002ce0 <HAL_ADC_ConfigChannel+0x7f4>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d11c      	bne.n	8002cae <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c74:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d116      	bne.n	8002cae <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a12      	ldr	r2, [pc, #72]	; (8002cd0 <HAL_ADC_ConfigChannel+0x7e4>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d111      	bne.n	8002cae <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c8e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c92:	4619      	mov	r1, r3
 8002c94:	480c      	ldr	r0, [pc, #48]	; (8002cc8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002c96:	f7ff f816 	bl	8001cc6 <LL_ADC_SetCommonPathInternalCh>
 8002c9a:	e008      	b.n	8002cae <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca0:	f043 0220 	orr.w	r2, r3, #32
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002cb6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	37d8      	adds	r7, #216	; 0xd8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	80080000 	.word	0x80080000
 8002cc8:	50040300 	.word	0x50040300
 8002ccc:	c7520000 	.word	0xc7520000
 8002cd0:	50040000 	.word	0x50040000
 8002cd4:	20000008 	.word	0x20000008
 8002cd8:	053e2d63 	.word	0x053e2d63
 8002cdc:	cb840000 	.word	0xcb840000
 8002ce0:	80000001 	.word	0x80000001

08002ce4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff f961 	bl	8001fb8 <LL_ADC_IsEnabled>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d14d      	bne.n	8002d98 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	689a      	ldr	r2, [r3, #8]
 8002d02:	4b28      	ldr	r3, [pc, #160]	; (8002da4 <ADC_Enable+0xc0>)
 8002d04:	4013      	ands	r3, r2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00d      	beq.n	8002d26 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d0e:	f043 0210 	orr.w	r2, r3, #16
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d1a:	f043 0201 	orr.w	r2, r3, #1
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e039      	b.n	8002d9a <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7ff f930 	bl	8001f90 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002d30:	f7fe ff86 	bl	8001c40 <HAL_GetTick>
 8002d34:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d36:	e028      	b.n	8002d8a <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff f93b 	bl	8001fb8 <LL_ADC_IsEnabled>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d104      	bne.n	8002d52 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7ff f91f 	bl	8001f90 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002d52:	f7fe ff75 	bl	8001c40 <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d914      	bls.n	8002d8a <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d00d      	beq.n	8002d8a <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d72:	f043 0210 	orr.w	r2, r3, #16
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d7e:	f043 0201 	orr.w	r2, r3, #1
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e007      	b.n	8002d9a <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0301 	and.w	r3, r3, #1
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d1cf      	bne.n	8002d38 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	8000003f 	.word	0x8000003f

08002da8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f003 0307 	and.w	r3, r3, #7
 8002db6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002db8:	4b0c      	ldr	r3, [pc, #48]	; (8002dec <__NVIC_SetPriorityGrouping+0x44>)
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dbe:	68ba      	ldr	r2, [r7, #8]
 8002dc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002dd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dda:	4a04      	ldr	r2, [pc, #16]	; (8002dec <__NVIC_SetPriorityGrouping+0x44>)
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	60d3      	str	r3, [r2, #12]
}
 8002de0:	bf00      	nop
 8002de2:	3714      	adds	r7, #20
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr
 8002dec:	e000ed00 	.word	0xe000ed00

08002df0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002df4:	4b04      	ldr	r3, [pc, #16]	; (8002e08 <__NVIC_GetPriorityGrouping+0x18>)
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	0a1b      	lsrs	r3, r3, #8
 8002dfa:	f003 0307 	and.w	r3, r3, #7
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr
 8002e08:	e000ed00 	.word	0xe000ed00

08002e0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	4603      	mov	r3, r0
 8002e14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	db0b      	blt.n	8002e36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e1e:	79fb      	ldrb	r3, [r7, #7]
 8002e20:	f003 021f 	and.w	r2, r3, #31
 8002e24:	4907      	ldr	r1, [pc, #28]	; (8002e44 <__NVIC_EnableIRQ+0x38>)
 8002e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e2a:	095b      	lsrs	r3, r3, #5
 8002e2c:	2001      	movs	r0, #1
 8002e2e:	fa00 f202 	lsl.w	r2, r0, r2
 8002e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e36:	bf00      	nop
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	e000e100 	.word	0xe000e100

08002e48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	4603      	mov	r3, r0
 8002e50:	6039      	str	r1, [r7, #0]
 8002e52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	db0a      	blt.n	8002e72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	b2da      	uxtb	r2, r3
 8002e60:	490c      	ldr	r1, [pc, #48]	; (8002e94 <__NVIC_SetPriority+0x4c>)
 8002e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e66:	0112      	lsls	r2, r2, #4
 8002e68:	b2d2      	uxtb	r2, r2
 8002e6a:	440b      	add	r3, r1
 8002e6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e70:	e00a      	b.n	8002e88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	b2da      	uxtb	r2, r3
 8002e76:	4908      	ldr	r1, [pc, #32]	; (8002e98 <__NVIC_SetPriority+0x50>)
 8002e78:	79fb      	ldrb	r3, [r7, #7]
 8002e7a:	f003 030f 	and.w	r3, r3, #15
 8002e7e:	3b04      	subs	r3, #4
 8002e80:	0112      	lsls	r2, r2, #4
 8002e82:	b2d2      	uxtb	r2, r2
 8002e84:	440b      	add	r3, r1
 8002e86:	761a      	strb	r2, [r3, #24]
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr
 8002e94:	e000e100 	.word	0xe000e100
 8002e98:	e000ed00 	.word	0xe000ed00

08002e9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b089      	sub	sp, #36	; 0x24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f003 0307 	and.w	r3, r3, #7
 8002eae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	f1c3 0307 	rsb	r3, r3, #7
 8002eb6:	2b04      	cmp	r3, #4
 8002eb8:	bf28      	it	cs
 8002eba:	2304      	movcs	r3, #4
 8002ebc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	3304      	adds	r3, #4
 8002ec2:	2b06      	cmp	r3, #6
 8002ec4:	d902      	bls.n	8002ecc <NVIC_EncodePriority+0x30>
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	3b03      	subs	r3, #3
 8002eca:	e000      	b.n	8002ece <NVIC_EncodePriority+0x32>
 8002ecc:	2300      	movs	r3, #0
 8002ece:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eda:	43da      	mvns	r2, r3
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	401a      	ands	r2, r3
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ee4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	fa01 f303 	lsl.w	r3, r1, r3
 8002eee:	43d9      	mvns	r1, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ef4:	4313      	orrs	r3, r2
         );
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3724      	adds	r7, #36	; 0x24
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
	...

08002f04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f14:	d301      	bcc.n	8002f1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f16:	2301      	movs	r3, #1
 8002f18:	e00f      	b.n	8002f3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f1a:	4a0a      	ldr	r2, [pc, #40]	; (8002f44 <SysTick_Config+0x40>)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f22:	210f      	movs	r1, #15
 8002f24:	f04f 30ff 	mov.w	r0, #4294967295
 8002f28:	f7ff ff8e 	bl	8002e48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f2c:	4b05      	ldr	r3, [pc, #20]	; (8002f44 <SysTick_Config+0x40>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f32:	4b04      	ldr	r3, [pc, #16]	; (8002f44 <SysTick_Config+0x40>)
 8002f34:	2207      	movs	r2, #7
 8002f36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	e000e010 	.word	0xe000e010

08002f48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f7ff ff29 	bl	8002da8 <__NVIC_SetPriorityGrouping>
}
 8002f56:	bf00      	nop
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b086      	sub	sp, #24
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	4603      	mov	r3, r0
 8002f66:	60b9      	str	r1, [r7, #8]
 8002f68:	607a      	str	r2, [r7, #4]
 8002f6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f70:	f7ff ff3e 	bl	8002df0 <__NVIC_GetPriorityGrouping>
 8002f74:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	68b9      	ldr	r1, [r7, #8]
 8002f7a:	6978      	ldr	r0, [r7, #20]
 8002f7c:	f7ff ff8e 	bl	8002e9c <NVIC_EncodePriority>
 8002f80:	4602      	mov	r2, r0
 8002f82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f86:	4611      	mov	r1, r2
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff ff5d 	bl	8002e48 <__NVIC_SetPriority>
}
 8002f8e:	bf00      	nop
 8002f90:	3718      	adds	r7, #24
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b082      	sub	sp, #8
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7ff ff31 	bl	8002e0c <__NVIC_EnableIRQ>
}
 8002faa:	bf00      	nop
 8002fac:	3708      	adds	r7, #8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b082      	sub	sp, #8
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f7ff ffa2 	bl	8002f04 <SysTick_Config>
 8002fc0:	4603      	mov	r3, r0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
	...

08002fcc <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e0ac      	b.n	8003138 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f000 f8b2 	bl	800314c <DFSDM_GetChannelFromInstance>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	4a55      	ldr	r2, [pc, #340]	; (8003140 <HAL_DFSDM_ChannelInit+0x174>)
 8002fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d001      	beq.n	8002ff8 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e09f      	b.n	8003138 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f7fe f9ad 	bl	8001358 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002ffe:	4b51      	ldr	r3, [pc, #324]	; (8003144 <HAL_DFSDM_ChannelInit+0x178>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	3301      	adds	r3, #1
 8003004:	4a4f      	ldr	r2, [pc, #316]	; (8003144 <HAL_DFSDM_ChannelInit+0x178>)
 8003006:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003008:	4b4e      	ldr	r3, [pc, #312]	; (8003144 <HAL_DFSDM_ChannelInit+0x178>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d125      	bne.n	800305c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003010:	4b4d      	ldr	r3, [pc, #308]	; (8003148 <HAL_DFSDM_ChannelInit+0x17c>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a4c      	ldr	r2, [pc, #304]	; (8003148 <HAL_DFSDM_ChannelInit+0x17c>)
 8003016:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800301a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800301c:	4b4a      	ldr	r3, [pc, #296]	; (8003148 <HAL_DFSDM_ChannelInit+0x17c>)
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	4948      	ldr	r1, [pc, #288]	; (8003148 <HAL_DFSDM_ChannelInit+0x17c>)
 8003026:	4313      	orrs	r3, r2
 8003028:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800302a:	4b47      	ldr	r3, [pc, #284]	; (8003148 <HAL_DFSDM_ChannelInit+0x17c>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a46      	ldr	r2, [pc, #280]	; (8003148 <HAL_DFSDM_ChannelInit+0x17c>)
 8003030:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8003034:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	791b      	ldrb	r3, [r3, #4]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d108      	bne.n	8003050 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800303e:	4b42      	ldr	r3, [pc, #264]	; (8003148 <HAL_DFSDM_ChannelInit+0x17c>)
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	3b01      	subs	r3, #1
 8003048:	041b      	lsls	r3, r3, #16
 800304a:	493f      	ldr	r1, [pc, #252]	; (8003148 <HAL_DFSDM_ChannelInit+0x17c>)
 800304c:	4313      	orrs	r3, r2
 800304e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003050:	4b3d      	ldr	r3, [pc, #244]	; (8003148 <HAL_DFSDM_ChannelInit+0x17c>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a3c      	ldr	r2, [pc, #240]	; (8003148 <HAL_DFSDM_ChannelInit+0x17c>)
 8003056:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800305a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800306a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	6819      	ldr	r1, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800307a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003080:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	430a      	orrs	r2, r1
 8003088:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f022 020f 	bic.w	r2, r2, #15
 8003098:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	6819      	ldr	r1, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80030a8:	431a      	orrs	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	430a      	orrs	r2, r1
 80030b0:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80030c0:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	6899      	ldr	r1, [r3, #8]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d0:	3b01      	subs	r3, #1
 80030d2:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80030d4:	431a      	orrs	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	430a      	orrs	r2, r1
 80030dc:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	685a      	ldr	r2, [r3, #4]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f002 0207 	and.w	r2, r2, #7
 80030ec:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	6859      	ldr	r1, [r3, #4]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f8:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fe:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003100:	431a      	orrs	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	430a      	orrs	r2, r1
 8003108:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003118:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4618      	mov	r0, r3
 8003128:	f000 f810 	bl	800314c <DFSDM_GetChannelFromInstance>
 800312c:	4602      	mov	r2, r0
 800312e:	4904      	ldr	r1, [pc, #16]	; (8003140 <HAL_DFSDM_ChannelInit+0x174>)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3708      	adds	r7, #8
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	20000038 	.word	0x20000038
 8003144:	20000034 	.word	0x20000034
 8003148:	40016000 	.word	0x40016000

0800314c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 800314c:	b480      	push	{r7}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a1c      	ldr	r2, [pc, #112]	; (80031c8 <DFSDM_GetChannelFromInstance+0x7c>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d102      	bne.n	8003162 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 800315c:	2300      	movs	r3, #0
 800315e:	60fb      	str	r3, [r7, #12]
 8003160:	e02b      	b.n	80031ba <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a19      	ldr	r2, [pc, #100]	; (80031cc <DFSDM_GetChannelFromInstance+0x80>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d102      	bne.n	8003170 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800316a:	2301      	movs	r3, #1
 800316c:	60fb      	str	r3, [r7, #12]
 800316e:	e024      	b.n	80031ba <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a17      	ldr	r2, [pc, #92]	; (80031d0 <DFSDM_GetChannelFromInstance+0x84>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d102      	bne.n	800317e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003178:	2302      	movs	r3, #2
 800317a:	60fb      	str	r3, [r7, #12]
 800317c:	e01d      	b.n	80031ba <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a14      	ldr	r2, [pc, #80]	; (80031d4 <DFSDM_GetChannelFromInstance+0x88>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d102      	bne.n	800318c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8003186:	2304      	movs	r3, #4
 8003188:	60fb      	str	r3, [r7, #12]
 800318a:	e016      	b.n	80031ba <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a12      	ldr	r2, [pc, #72]	; (80031d8 <DFSDM_GetChannelFromInstance+0x8c>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d102      	bne.n	800319a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8003194:	2305      	movs	r3, #5
 8003196:	60fb      	str	r3, [r7, #12]
 8003198:	e00f      	b.n	80031ba <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a0f      	ldr	r2, [pc, #60]	; (80031dc <DFSDM_GetChannelFromInstance+0x90>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d102      	bne.n	80031a8 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80031a2:	2306      	movs	r3, #6
 80031a4:	60fb      	str	r3, [r7, #12]
 80031a6:	e008      	b.n	80031ba <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a0d      	ldr	r2, [pc, #52]	; (80031e0 <DFSDM_GetChannelFromInstance+0x94>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d102      	bne.n	80031b6 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80031b0:	2307      	movs	r3, #7
 80031b2:	60fb      	str	r3, [r7, #12]
 80031b4:	e001      	b.n	80031ba <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80031b6:	2303      	movs	r3, #3
 80031b8:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80031ba:	68fb      	ldr	r3, [r7, #12]
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3714      	adds	r7, #20
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr
 80031c8:	40016000 	.word	0x40016000
 80031cc:	40016020 	.word	0x40016020
 80031d0:	40016040 	.word	0x40016040
 80031d4:	40016080 	.word	0x40016080
 80031d8:	400160a0 	.word	0x400160a0
 80031dc:	400160c0 	.word	0x400160c0
 80031e0:	400160e0 	.word	0x400160e0

080031e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b087      	sub	sp, #28
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031ee:	2300      	movs	r3, #0
 80031f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031f2:	e166      	b.n	80034c2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	2101      	movs	r1, #1
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003200:	4013      	ands	r3, r2
 8003202:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2b00      	cmp	r3, #0
 8003208:	f000 8158 	beq.w	80034bc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f003 0303 	and.w	r3, r3, #3
 8003214:	2b01      	cmp	r3, #1
 8003216:	d005      	beq.n	8003224 <HAL_GPIO_Init+0x40>
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f003 0303 	and.w	r3, r3, #3
 8003220:	2b02      	cmp	r3, #2
 8003222:	d130      	bne.n	8003286 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	2203      	movs	r2, #3
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	43db      	mvns	r3, r3
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	4013      	ands	r3, r2
 800323a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	68da      	ldr	r2, [r3, #12]
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	4313      	orrs	r3, r2
 800324c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800325a:	2201      	movs	r2, #1
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	fa02 f303 	lsl.w	r3, r2, r3
 8003262:	43db      	mvns	r3, r3
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	4013      	ands	r3, r2
 8003268:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	091b      	lsrs	r3, r3, #4
 8003270:	f003 0201 	and.w	r2, r3, #1
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	fa02 f303 	lsl.w	r3, r2, r3
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	4313      	orrs	r3, r2
 800327e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f003 0303 	and.w	r3, r3, #3
 800328e:	2b03      	cmp	r3, #3
 8003290:	d017      	beq.n	80032c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	2203      	movs	r2, #3
 800329e:	fa02 f303 	lsl.w	r3, r2, r3
 80032a2:	43db      	mvns	r3, r3
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	4013      	ands	r3, r2
 80032a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	689a      	ldr	r2, [r3, #8]
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	fa02 f303 	lsl.w	r3, r2, r3
 80032b6:	693a      	ldr	r2, [r7, #16]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f003 0303 	and.w	r3, r3, #3
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d123      	bne.n	8003316 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	08da      	lsrs	r2, r3, #3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	3208      	adds	r2, #8
 80032d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	f003 0307 	and.w	r3, r3, #7
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	220f      	movs	r2, #15
 80032e6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ea:	43db      	mvns	r3, r3
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	4013      	ands	r3, r2
 80032f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	691a      	ldr	r2, [r3, #16]
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	f003 0307 	and.w	r3, r3, #7
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003302:	693a      	ldr	r2, [r7, #16]
 8003304:	4313      	orrs	r3, r2
 8003306:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	08da      	lsrs	r2, r3, #3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	3208      	adds	r2, #8
 8003310:	6939      	ldr	r1, [r7, #16]
 8003312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	2203      	movs	r2, #3
 8003322:	fa02 f303 	lsl.w	r3, r2, r3
 8003326:	43db      	mvns	r3, r3
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	4013      	ands	r3, r2
 800332c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f003 0203 	and.w	r2, r3, #3
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	fa02 f303 	lsl.w	r3, r2, r3
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	4313      	orrs	r3, r2
 8003342:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003352:	2b00      	cmp	r3, #0
 8003354:	f000 80b2 	beq.w	80034bc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003358:	4b61      	ldr	r3, [pc, #388]	; (80034e0 <HAL_GPIO_Init+0x2fc>)
 800335a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800335c:	4a60      	ldr	r2, [pc, #384]	; (80034e0 <HAL_GPIO_Init+0x2fc>)
 800335e:	f043 0301 	orr.w	r3, r3, #1
 8003362:	6613      	str	r3, [r2, #96]	; 0x60
 8003364:	4b5e      	ldr	r3, [pc, #376]	; (80034e0 <HAL_GPIO_Init+0x2fc>)
 8003366:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003368:	f003 0301 	and.w	r3, r3, #1
 800336c:	60bb      	str	r3, [r7, #8]
 800336e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003370:	4a5c      	ldr	r2, [pc, #368]	; (80034e4 <HAL_GPIO_Init+0x300>)
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	089b      	lsrs	r3, r3, #2
 8003376:	3302      	adds	r3, #2
 8003378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800337c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	f003 0303 	and.w	r3, r3, #3
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	220f      	movs	r2, #15
 8003388:	fa02 f303 	lsl.w	r3, r2, r3
 800338c:	43db      	mvns	r3, r3
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	4013      	ands	r3, r2
 8003392:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800339a:	d02b      	beq.n	80033f4 <HAL_GPIO_Init+0x210>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a52      	ldr	r2, [pc, #328]	; (80034e8 <HAL_GPIO_Init+0x304>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d025      	beq.n	80033f0 <HAL_GPIO_Init+0x20c>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a51      	ldr	r2, [pc, #324]	; (80034ec <HAL_GPIO_Init+0x308>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d01f      	beq.n	80033ec <HAL_GPIO_Init+0x208>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a50      	ldr	r2, [pc, #320]	; (80034f0 <HAL_GPIO_Init+0x30c>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d019      	beq.n	80033e8 <HAL_GPIO_Init+0x204>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a4f      	ldr	r2, [pc, #316]	; (80034f4 <HAL_GPIO_Init+0x310>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d013      	beq.n	80033e4 <HAL_GPIO_Init+0x200>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a4e      	ldr	r2, [pc, #312]	; (80034f8 <HAL_GPIO_Init+0x314>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d00d      	beq.n	80033e0 <HAL_GPIO_Init+0x1fc>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a4d      	ldr	r2, [pc, #308]	; (80034fc <HAL_GPIO_Init+0x318>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d007      	beq.n	80033dc <HAL_GPIO_Init+0x1f8>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a4c      	ldr	r2, [pc, #304]	; (8003500 <HAL_GPIO_Init+0x31c>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d101      	bne.n	80033d8 <HAL_GPIO_Init+0x1f4>
 80033d4:	2307      	movs	r3, #7
 80033d6:	e00e      	b.n	80033f6 <HAL_GPIO_Init+0x212>
 80033d8:	2308      	movs	r3, #8
 80033da:	e00c      	b.n	80033f6 <HAL_GPIO_Init+0x212>
 80033dc:	2306      	movs	r3, #6
 80033de:	e00a      	b.n	80033f6 <HAL_GPIO_Init+0x212>
 80033e0:	2305      	movs	r3, #5
 80033e2:	e008      	b.n	80033f6 <HAL_GPIO_Init+0x212>
 80033e4:	2304      	movs	r3, #4
 80033e6:	e006      	b.n	80033f6 <HAL_GPIO_Init+0x212>
 80033e8:	2303      	movs	r3, #3
 80033ea:	e004      	b.n	80033f6 <HAL_GPIO_Init+0x212>
 80033ec:	2302      	movs	r3, #2
 80033ee:	e002      	b.n	80033f6 <HAL_GPIO_Init+0x212>
 80033f0:	2301      	movs	r3, #1
 80033f2:	e000      	b.n	80033f6 <HAL_GPIO_Init+0x212>
 80033f4:	2300      	movs	r3, #0
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	f002 0203 	and.w	r2, r2, #3
 80033fc:	0092      	lsls	r2, r2, #2
 80033fe:	4093      	lsls	r3, r2
 8003400:	693a      	ldr	r2, [r7, #16]
 8003402:	4313      	orrs	r3, r2
 8003404:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003406:	4937      	ldr	r1, [pc, #220]	; (80034e4 <HAL_GPIO_Init+0x300>)
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	089b      	lsrs	r3, r3, #2
 800340c:	3302      	adds	r3, #2
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003414:	4b3b      	ldr	r3, [pc, #236]	; (8003504 <HAL_GPIO_Init+0x320>)
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	43db      	mvns	r3, r3
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	4013      	ands	r3, r2
 8003422:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d003      	beq.n	8003438 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	4313      	orrs	r3, r2
 8003436:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003438:	4a32      	ldr	r2, [pc, #200]	; (8003504 <HAL_GPIO_Init+0x320>)
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800343e:	4b31      	ldr	r3, [pc, #196]	; (8003504 <HAL_GPIO_Init+0x320>)
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	43db      	mvns	r3, r3
 8003448:	693a      	ldr	r2, [r7, #16]
 800344a:	4013      	ands	r3, r2
 800344c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d003      	beq.n	8003462 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	4313      	orrs	r3, r2
 8003460:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003462:	4a28      	ldr	r2, [pc, #160]	; (8003504 <HAL_GPIO_Init+0x320>)
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003468:	4b26      	ldr	r3, [pc, #152]	; (8003504 <HAL_GPIO_Init+0x320>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	43db      	mvns	r3, r3
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	4013      	ands	r3, r2
 8003476:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d003      	beq.n	800348c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003484:	693a      	ldr	r2, [r7, #16]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	4313      	orrs	r3, r2
 800348a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800348c:	4a1d      	ldr	r2, [pc, #116]	; (8003504 <HAL_GPIO_Init+0x320>)
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003492:	4b1c      	ldr	r3, [pc, #112]	; (8003504 <HAL_GPIO_Init+0x320>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	43db      	mvns	r3, r3
 800349c:	693a      	ldr	r2, [r7, #16]
 800349e:	4013      	ands	r3, r2
 80034a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80034b6:	4a13      	ldr	r2, [pc, #76]	; (8003504 <HAL_GPIO_Init+0x320>)
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	3301      	adds	r3, #1
 80034c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	fa22 f303 	lsr.w	r3, r2, r3
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f47f ae91 	bne.w	80031f4 <HAL_GPIO_Init+0x10>
  }
}
 80034d2:	bf00      	nop
 80034d4:	bf00      	nop
 80034d6:	371c      	adds	r7, #28
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr
 80034e0:	40021000 	.word	0x40021000
 80034e4:	40010000 	.word	0x40010000
 80034e8:	48000400 	.word	0x48000400
 80034ec:	48000800 	.word	0x48000800
 80034f0:	48000c00 	.word	0x48000c00
 80034f4:	48001000 	.word	0x48001000
 80034f8:	48001400 	.word	0x48001400
 80034fc:	48001800 	.word	0x48001800
 8003500:	48001c00 	.word	0x48001c00
 8003504:	40010400 	.word	0x40010400

08003508 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	460b      	mov	r3, r1
 8003512:	807b      	strh	r3, [r7, #2]
 8003514:	4613      	mov	r3, r2
 8003516:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003518:	787b      	ldrb	r3, [r7, #1]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d003      	beq.n	8003526 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800351e:	887a      	ldrh	r2, [r7, #2]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003524:	e002      	b.n	800352c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003526:	887a      	ldrh	r2, [r7, #2]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800352c:	bf00      	nop
 800352e:	370c      	adds	r7, #12
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	4603      	mov	r3, r0
 8003540:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003542:	4b08      	ldr	r3, [pc, #32]	; (8003564 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003544:	695a      	ldr	r2, [r3, #20]
 8003546:	88fb      	ldrh	r3, [r7, #6]
 8003548:	4013      	ands	r3, r2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d006      	beq.n	800355c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800354e:	4a05      	ldr	r2, [pc, #20]	; (8003564 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003550:	88fb      	ldrh	r3, [r7, #6]
 8003552:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003554:	88fb      	ldrh	r3, [r7, #6]
 8003556:	4618      	mov	r0, r3
 8003558:	f7fe fa9c 	bl	8001a94 <HAL_GPIO_EXTI_Callback>
  }
}
 800355c:	bf00      	nop
 800355e:	3708      	adds	r7, #8
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	40010400 	.word	0x40010400

08003568 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e081      	b.n	800367e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d106      	bne.n	8003594 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f7fd ff46 	bl	8001420 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2224      	movs	r2, #36	; 0x24
 8003598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f022 0201 	bic.w	r2, r2, #1
 80035aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685a      	ldr	r2, [r3, #4]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	689a      	ldr	r2, [r3, #8]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d107      	bne.n	80035e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	689a      	ldr	r2, [r3, #8]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035de:	609a      	str	r2, [r3, #8]
 80035e0:	e006      	b.n	80035f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	689a      	ldr	r2, [r3, #8]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80035ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d104      	bne.n	8003602 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003600:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	6812      	ldr	r2, [r2, #0]
 800360c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003610:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003614:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68da      	ldr	r2, [r3, #12]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003624:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	691a      	ldr	r2, [r3, #16]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	430a      	orrs	r2, r1
 800363e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	69d9      	ldr	r1, [r3, #28]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a1a      	ldr	r2, [r3, #32]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	430a      	orrs	r2, r1
 800364e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f042 0201 	orr.w	r2, r2, #1
 800365e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2220      	movs	r2, #32
 800366a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3708      	adds	r7, #8
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003686:	b480      	push	{r7}
 8003688:	b083      	sub	sp, #12
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
 800368e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003696:	b2db      	uxtb	r3, r3
 8003698:	2b20      	cmp	r3, #32
 800369a:	d138      	bne.n	800370e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d101      	bne.n	80036aa <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80036a6:	2302      	movs	r3, #2
 80036a8:	e032      	b.n	8003710 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2224      	movs	r2, #36	; 0x24
 80036b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f022 0201 	bic.w	r2, r2, #1
 80036c8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80036d8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	6819      	ldr	r1, [r3, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	430a      	orrs	r2, r1
 80036e8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f042 0201 	orr.w	r2, r2, #1
 80036f8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2220      	movs	r2, #32
 80036fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800370a:	2300      	movs	r3, #0
 800370c:	e000      	b.n	8003710 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800370e:	2302      	movs	r3, #2
  }
}
 8003710:	4618      	mov	r0, r3
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800371c:	b480      	push	{r7}
 800371e:	b085      	sub	sp, #20
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2b20      	cmp	r3, #32
 8003730:	d139      	bne.n	80037a6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003738:	2b01      	cmp	r3, #1
 800373a:	d101      	bne.n	8003740 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800373c:	2302      	movs	r3, #2
 800373e:	e033      	b.n	80037a8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2224      	movs	r2, #36	; 0x24
 800374c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f022 0201 	bic.w	r2, r2, #1
 800375e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800376e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	021b      	lsls	r3, r3, #8
 8003774:	68fa      	ldr	r2, [r7, #12]
 8003776:	4313      	orrs	r3, r2
 8003778:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68fa      	ldr	r2, [r7, #12]
 8003780:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f042 0201 	orr.w	r2, r2, #1
 8003790:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2220      	movs	r2, #32
 8003796:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037a2:	2300      	movs	r3, #0
 80037a4:	e000      	b.n	80037a8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80037a6:	2302      	movs	r3, #2
  }
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3714      	adds	r7, #20
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af02      	add	r7, sp, #8
 80037ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037bc:	2300      	movs	r3, #0
 80037be:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80037c0:	f7fe fa3e 	bl	8001c40 <HAL_GetTick>
 80037c4:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d102      	bne.n	80037d2 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	73fb      	strb	r3, [r7, #15]
 80037d0:	e08f      	b.n	80038f2 <HAL_OSPI_Init+0x13e>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037dc:	2b00      	cmp	r3, #0
 80037de:	f040 8088 	bne.w	80038f2 <HAL_OSPI_Init+0x13e>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f7fd febe 	bl	8001564 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 80037e8:	f241 3188 	movw	r1, #5000	; 0x1388
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 f887 	bl	8003900 <HAL_OSPI_SetTimeout>

     /* Configure memory type, device size, chip select high time, free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1, (OCTOSPI_DCR1_MTYP | OCTOSPI_DCR1_DEVSIZE | OCTOSPI_DCR1_CSHT |
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	689a      	ldr	r2, [r3, #8]
 80037f8:	4b40      	ldr	r3, [pc, #256]	; (80038fc <HAL_OSPI_Init+0x148>)
 80037fa:	4013      	ands	r3, r2
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	68d1      	ldr	r1, [r2, #12]
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	6912      	ldr	r2, [r2, #16]
 8003804:	3a01      	subs	r2, #1
 8003806:	0412      	lsls	r2, r2, #16
 8003808:	4311      	orrs	r1, r2
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	6952      	ldr	r2, [r2, #20]
 800380e:	3a01      	subs	r2, #1
 8003810:	0212      	lsls	r2, r2, #8
 8003812:	4311      	orrs	r1, r2
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	69d2      	ldr	r2, [r2, #28]
 8003818:	4311      	orrs	r1, r2
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	6812      	ldr	r2, [r2, #0]
 800381e:	430b      	orrs	r3, r1
 8003820:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	0412      	lsls	r2, r2, #16
 800382c:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	3b01      	subs	r3, #1
 800383e:	021a      	lsls	r2, r3, #8
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	430a      	orrs	r2, r1
 8003846:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800384c:	9300      	str	r3, [sp, #0]
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	2200      	movs	r2, #0
 8003852:	2120      	movs	r1, #32
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 fbb7 	bl	8003fc8 <OSPI_WaitFlagStateUntilTimeout>
 800385a:	4603      	mov	r3, r0
 800385c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800385e:	7bfb      	ldrb	r3, [r7, #15]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d146      	bne.n	80038f2 <HAL_OSPI_Init+0x13e>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a1b      	ldr	r3, [r3, #32]
 8003872:	1e5a      	subs	r2, r3, #1
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	430a      	orrs	r2, r1
 800387a:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	689a      	ldr	r2, [r3, #8]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	430a      	orrs	r2, r1
 8003890:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800389a:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a6:	431a      	orrs	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	430a      	orrs	r2, r1
 80038ae:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f042 0201 	orr.w	r2, r2, #1
 80038c0:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d107      	bne.n	80038da <HAL_OSPI_Init+0x126>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	689a      	ldr	r2, [r3, #8]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f042 0202 	orr.w	r2, r2, #2
 80038d8:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038e2:	d103      	bne.n	80038ec <HAL_OSPI_Init+0x138>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	645a      	str	r2, [r3, #68]	; 0x44
 80038ea:	e002      	b.n	80038f2 <HAL_OSPI_Init+0x13e>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2202      	movs	r2, #2
 80038f0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 80038f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3710      	adds	r7, #16
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	f8e0f8fc 	.word	0xf8e0f8fc

08003900 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	683a      	ldr	r2, [r7, #0]
 800390e:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
	...

08003920 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b092      	sub	sp, #72	; 0x48
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800392c:	2300      	movs	r3, #0
 800392e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8003932:	2300      	movs	r3, #0
 8003934:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a08      	ldr	r2, [pc, #32]	; (8003960 <HAL_OSPIM_Config+0x40>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d105      	bne.n	800394e <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8003942:	2300      	movs	r3, #0
 8003944:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 8003946:	2301      	movs	r3, #1
 8003948:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 800394c:	e004      	b.n	8003958 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 800394e:	2301      	movs	r3, #1
 8003950:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 8003952:	2300      	movs	r3, #0
 8003954:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003958:	2300      	movs	r3, #0
 800395a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800395e:	e01f      	b.n	80039a0 <HAL_OSPIM_Config+0x80>
 8003960:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 8003964:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003968:	3301      	adds	r3, #1
 800396a:	b2d8      	uxtb	r0, r3
 800396c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003970:	f107 0114 	add.w	r1, r7, #20
 8003974:	4613      	mov	r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	4413      	add	r3, r2
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	440b      	add	r3, r1
 800397e:	4619      	mov	r1, r3
 8003980:	f000 fb5a 	bl	8004038 <OSPIM_GetConfig>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d005      	beq.n	8003996 <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2208      	movs	r2, #8
 8003994:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003996:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800399a:	3301      	adds	r3, #1
 800399c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80039a0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d9dd      	bls.n	8003964 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 80039a8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f040 82fe 	bne.w	8003fae <HAL_OSPIM_Config+0x68e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 80039b2:	4bcd      	ldr	r3, [pc, #820]	; (8003ce8 <HAL_OSPIM_Config+0x3c8>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00b      	beq.n	80039d6 <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80039be:	4bca      	ldr	r3, [pc, #808]	; (8003ce8 <HAL_OSPIM_Config+0x3c8>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4ac9      	ldr	r2, [pc, #804]	; (8003ce8 <HAL_OSPIM_Config+0x3c8>)
 80039c4:	f023 0301 	bic.w	r3, r3, #1
 80039c8:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 80039ca:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80039ce:	f043 0301 	orr.w	r3, r3, #1
 80039d2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 80039d6:	4bc5      	ldr	r3, [pc, #788]	; (8003cec <HAL_OSPIM_Config+0x3cc>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00b      	beq.n	80039fa <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80039e2:	4bc2      	ldr	r3, [pc, #776]	; (8003cec <HAL_OSPIM_Config+0x3cc>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4ac1      	ldr	r2, [pc, #772]	; (8003cec <HAL_OSPIM_Config+0x3cc>)
 80039e8:	f023 0301 	bic.w	r3, r3, #1
 80039ec:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 80039ee:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80039f2:	f043 0302 	orr.w	r3, r3, #2
 80039f6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 80039fa:	49bd      	ldr	r1, [pc, #756]	; (8003cf0 <HAL_OSPIM_Config+0x3d0>)
 80039fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80039fe:	4613      	mov	r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	4413      	add	r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003a0a:	4413      	add	r3, r2
 8003a0c:	3b2c      	subs	r3, #44	; 0x2c
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	3b01      	subs	r3, #1
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	440b      	add	r3, r1
 8003a16:	6859      	ldr	r1, [r3, #4]
 8003a18:	48b5      	ldr	r0, [pc, #724]	; (8003cf0 <HAL_OSPIM_Config+0x3d0>)
 8003a1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	4413      	add	r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003a28:	4413      	add	r3, r2
 8003a2a:	3b2c      	subs	r3, #44	; 0x2c
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	4403      	add	r3, r0
 8003a38:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 8003a3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4413      	add	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003a48:	4413      	add	r3, r2
 8003a4a:	3b34      	subs	r3, #52	; 0x34
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f000 80ac 	beq.w	8003bac <HAL_OSPIM_Config+0x28c>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8003a54:	49a6      	ldr	r1, [pc, #664]	; (8003cf0 <HAL_OSPIM_Config+0x3d0>)
 8003a56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a58:	4613      	mov	r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	4413      	add	r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003a64:	4413      	add	r3, r2
 8003a66:	3b34      	subs	r3, #52	; 0x34
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	440b      	add	r3, r1
 8003a70:	6859      	ldr	r1, [r3, #4]
 8003a72:	489f      	ldr	r0, [pc, #636]	; (8003cf0 <HAL_OSPIM_Config+0x3d0>)
 8003a74:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a76:	4613      	mov	r3, r2
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	4413      	add	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003a82:	4413      	add	r3, r2
 8003a84:	3b34      	subs	r3, #52	; 0x34
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	f021 0201 	bic.w	r2, r1, #1
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	4403      	add	r3, r0
 8003a92:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8003a94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a96:	4613      	mov	r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	4413      	add	r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003aa2:	4413      	add	r3, r2
 8003aa4:	3b30      	subs	r3, #48	; 0x30
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d01f      	beq.n	8003aec <HAL_OSPIM_Config+0x1cc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8003aac:	4990      	ldr	r1, [pc, #576]	; (8003cf0 <HAL_OSPIM_Config+0x3d0>)
 8003aae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	4413      	add	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003abc:	4413      	add	r3, r2
 8003abe:	3b30      	subs	r3, #48	; 0x30
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	440b      	add	r3, r1
 8003ac8:	6859      	ldr	r1, [r3, #4]
 8003aca:	4889      	ldr	r0, [pc, #548]	; (8003cf0 <HAL_OSPIM_Config+0x3d0>)
 8003acc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ace:	4613      	mov	r3, r2
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	4413      	add	r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003ada:	4413      	add	r3, r2
 8003adc:	3b30      	subs	r3, #48	; 0x30
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	f021 0210 	bic.w	r2, r1, #16
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	4403      	add	r3, r0
 8003aea:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003aec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003aee:	4613      	mov	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	4413      	add	r3, r2
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003afa:	4413      	add	r3, r2
 8003afc:	3b28      	subs	r3, #40	; 0x28
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d023      	beq.n	8003b4c <HAL_OSPIM_Config+0x22c>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8003b04:	497a      	ldr	r1, [pc, #488]	; (8003cf0 <HAL_OSPIM_Config+0x3d0>)
 8003b06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b08:	4613      	mov	r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	4413      	add	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003b14:	4413      	add	r3, r2
 8003b16:	3b28      	subs	r3, #40	; 0x28
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	f003 0301 	and.w	r3, r3, #1
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	440b      	add	r3, r1
 8003b24:	6859      	ldr	r1, [r3, #4]
 8003b26:	4872      	ldr	r0, [pc, #456]	; (8003cf0 <HAL_OSPIM_Config+0x3d0>)
 8003b28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	4413      	add	r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003b36:	4413      	add	r3, r2
 8003b38:	3b28      	subs	r3, #40	; 0x28
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	f003 0301 	and.w	r3, r3, #1
 8003b42:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	4403      	add	r3, r0
 8003b4a:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003b4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b4e:	4613      	mov	r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	4413      	add	r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003b5a:	4413      	add	r3, r2
 8003b5c:	3b24      	subs	r3, #36	; 0x24
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d023      	beq.n	8003bac <HAL_OSPIM_Config+0x28c>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8003b64:	4962      	ldr	r1, [pc, #392]	; (8003cf0 <HAL_OSPIM_Config+0x3d0>)
 8003b66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b68:	4613      	mov	r3, r2
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	4413      	add	r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003b74:	4413      	add	r3, r2
 8003b76:	3b24      	subs	r3, #36	; 0x24
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	440b      	add	r3, r1
 8003b84:	6859      	ldr	r1, [r3, #4]
 8003b86:	485a      	ldr	r0, [pc, #360]	; (8003cf0 <HAL_OSPIM_Config+0x3d0>)
 8003b88:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	4413      	add	r3, r2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003b96:	4413      	add	r3, r2
 8003b98:	3b24      	subs	r3, #36	; 0x24
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	4403      	add	r3, r0
 8003baa:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	6819      	ldr	r1, [r3, #0]
 8003bb0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	4413      	add	r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003bc0:	4413      	add	r3, r2
 8003bc2:	3b34      	subs	r3, #52	; 0x34
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4299      	cmp	r1, r3
 8003bc8:	d03c      	beq.n	8003c44 <HAL_OSPIM_Config+0x324>
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	6859      	ldr	r1, [r3, #4]
 8003bce:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	4413      	add	r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003bde:	4413      	add	r3, r2
 8003be0:	3b30      	subs	r3, #48	; 0x30
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4299      	cmp	r1, r3
 8003be6:	d02d      	beq.n	8003c44 <HAL_OSPIM_Config+0x324>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	6899      	ldr	r1, [r3, #8]
 8003bec:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	4413      	add	r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003bfc:	4413      	add	r3, r2
 8003bfe:	3b2c      	subs	r3, #44	; 0x2c
 8003c00:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8003c02:	4299      	cmp	r1, r3
 8003c04:	d01e      	beq.n	8003c44 <HAL_OSPIM_Config+0x324>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	68d9      	ldr	r1, [r3, #12]
 8003c0a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003c0e:	4613      	mov	r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	4413      	add	r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003c1a:	4413      	add	r3, r2
 8003c1c:	3b28      	subs	r3, #40	; 0x28
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4299      	cmp	r1, r3
 8003c22:	d00f      	beq.n	8003c44 <HAL_OSPIM_Config+0x324>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	6919      	ldr	r1, [r3, #16]
 8003c28:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	4413      	add	r3, r2
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003c38:	4413      	add	r3, r2
 8003c3a:	3b24      	subs	r3, #36	; 0x24
 8003c3c:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003c3e:	4299      	cmp	r1, r3
 8003c40:	f040 80e0 	bne.w	8003e04 <HAL_OSPIM_Config+0x4e4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8003c44:	492a      	ldr	r1, [pc, #168]	; (8003cf0 <HAL_OSPIM_Config+0x3d0>)
 8003c46:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	4413      	add	r3, r2
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003c56:	4413      	add	r3, r2
 8003c58:	3b34      	subs	r3, #52	; 0x34
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	440b      	add	r3, r1
 8003c62:	6859      	ldr	r1, [r3, #4]
 8003c64:	4822      	ldr	r0, [pc, #136]	; (8003cf0 <HAL_OSPIM_Config+0x3d0>)
 8003c66:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	4413      	add	r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003c76:	4413      	add	r3, r2
 8003c78:	3b34      	subs	r3, #52	; 0x34
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	3b01      	subs	r3, #1
 8003c7e:	f021 0201 	bic.w	r2, r1, #1
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	4403      	add	r3, r0
 8003c86:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8003c88:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	4413      	add	r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003c98:	4413      	add	r3, r2
 8003c9a:	3b30      	subs	r3, #48	; 0x30
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d028      	beq.n	8003cf4 <HAL_OSPIM_Config+0x3d4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8003ca2:	4913      	ldr	r1, [pc, #76]	; (8003cf0 <HAL_OSPIM_Config+0x3d0>)
 8003ca4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003ca8:	4613      	mov	r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	4413      	add	r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003cb4:	4413      	add	r3, r2
 8003cb6:	3b30      	subs	r3, #48	; 0x30
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	440b      	add	r3, r1
 8003cc0:	6859      	ldr	r1, [r3, #4]
 8003cc2:	480b      	ldr	r0, [pc, #44]	; (8003cf0 <HAL_OSPIM_Config+0x3d0>)
 8003cc4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003cc8:	4613      	mov	r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	4413      	add	r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003cd4:	4413      	add	r3, r2
 8003cd6:	3b30      	subs	r3, #48	; 0x30
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	f021 0210 	bic.w	r2, r1, #16
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	4403      	add	r3, r0
 8003ce4:	605a      	str	r2, [r3, #4]
 8003ce6:	e005      	b.n	8003cf4 <HAL_OSPIM_Config+0x3d4>
 8003ce8:	a0001000 	.word	0xa0001000
 8003cec:	a0001400 	.word	0xa0001400
 8003cf0:	50061c00 	.word	0x50061c00
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8003cf4:	49b1      	ldr	r1, [pc, #708]	; (8003fbc <HAL_OSPIM_Config+0x69c>)
 8003cf6:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	4413      	add	r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003d06:	4413      	add	r3, r2
 8003d08:	3b2c      	subs	r3, #44	; 0x2c
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	440b      	add	r3, r1
 8003d12:	6859      	ldr	r1, [r3, #4]
 8003d14:	48a9      	ldr	r0, [pc, #676]	; (8003fbc <HAL_OSPIM_Config+0x69c>)
 8003d16:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	4413      	add	r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003d26:	4413      	add	r3, r2
 8003d28:	3b2c      	subs	r3, #44	; 0x2c
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	3b01      	subs	r3, #1
 8003d2e:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	4403      	add	r3, r0
 8003d36:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003d38:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	4413      	add	r3, r2
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003d48:	4413      	add	r3, r2
 8003d4a:	3b28      	subs	r3, #40	; 0x28
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d025      	beq.n	8003d9e <HAL_OSPIM_Config+0x47e>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8003d52:	499a      	ldr	r1, [pc, #616]	; (8003fbc <HAL_OSPIM_Config+0x69c>)
 8003d54:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003d58:	4613      	mov	r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	4413      	add	r3, r2
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003d64:	4413      	add	r3, r2
 8003d66:	3b28      	subs	r3, #40	; 0x28
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	f003 0301 	and.w	r3, r3, #1
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	440b      	add	r3, r1
 8003d74:	6859      	ldr	r1, [r3, #4]
 8003d76:	4891      	ldr	r0, [pc, #580]	; (8003fbc <HAL_OSPIM_Config+0x69c>)
 8003d78:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	4413      	add	r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003d88:	4413      	add	r3, r2
 8003d8a:	3b28      	subs	r3, #40	; 0x28
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	f003 0301 	and.w	r3, r3, #1
 8003d94:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	4403      	add	r3, r0
 8003d9c:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003d9e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003da2:	4613      	mov	r3, r2
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	4413      	add	r3, r2
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003dae:	4413      	add	r3, r2
 8003db0:	3b24      	subs	r3, #36	; 0x24
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d025      	beq.n	8003e04 <HAL_OSPIM_Config+0x4e4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8003db8:	4980      	ldr	r1, [pc, #512]	; (8003fbc <HAL_OSPIM_Config+0x69c>)
 8003dba:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	4413      	add	r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003dca:	4413      	add	r3, r2
 8003dcc:	3b24      	subs	r3, #36	; 0x24
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	440b      	add	r3, r1
 8003dda:	6859      	ldr	r1, [r3, #4]
 8003ddc:	4877      	ldr	r0, [pc, #476]	; (8003fbc <HAL_OSPIM_Config+0x69c>)
 8003dde:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003de2:	4613      	mov	r3, r2
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	4413      	add	r3, r2
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003dee:	4413      	add	r3, r2
 8003df0:	3b24      	subs	r3, #36	; 0x24
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	3b01      	subs	r3, #1
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	4403      	add	r3, r0
 8003e02:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8003e04:	4a6d      	ldr	r2, [pc, #436]	; (8003fbc <HAL_OSPIM_Config+0x69c>)
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	4413      	add	r3, r2
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e18:	025b      	lsls	r3, r3, #9
 8003e1a:	431a      	orrs	r2, r3
 8003e1c:	4967      	ldr	r1, [pc, #412]	; (8003fbc <HAL_OSPIM_Config+0x69c>)
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	3b01      	subs	r3, #1
 8003e24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	440b      	add	r3, r1
 8003e2c:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8003e2e:	4a63      	ldr	r2, [pc, #396]	; (8003fbc <HAL_OSPIM_Config+0x69c>)
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	3b01      	subs	r3, #1
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	4413      	add	r3, r2
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f023 0203 	bic.w	r2, r3, #3
 8003e40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e42:	005b      	lsls	r3, r3, #1
 8003e44:	431a      	orrs	r2, r3
 8003e46:	495d      	ldr	r1, [pc, #372]	; (8003fbc <HAL_OSPIM_Config+0x69c>)
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	f042 0201 	orr.w	r2, r2, #1
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	440b      	add	r3, r1
 8003e56:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d014      	beq.n	8003e8a <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8003e60:	4a56      	ldr	r2, [pc, #344]	; (8003fbc <HAL_OSPIM_Config+0x69c>)
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	3b01      	subs	r3, #1
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	4413      	add	r3, r2
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e74:	015b      	lsls	r3, r3, #5
 8003e76:	431a      	orrs	r2, r3
 8003e78:	4950      	ldr	r1, [pc, #320]	; (8003fbc <HAL_OSPIM_Config+0x69c>)
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	f042 0210 	orr.w	r2, r2, #16
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	440b      	add	r3, r1
 8003e88:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d019      	beq.n	8003eca <HAL_OSPIM_Config+0x5aa>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8003e96:	4a49      	ldr	r2, [pc, #292]	; (8003fbc <HAL_OSPIM_Config+0x69c>)
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	4413      	add	r3, r2
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003eac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003eae:	049b      	lsls	r3, r3, #18
 8003eb0:	431a      	orrs	r2, r3
 8003eb2:	4942      	ldr	r1, [pc, #264]	; (8003fbc <HAL_OSPIM_Config+0x69c>)
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	f003 0301 	and.w	r3, r3, #1
 8003ebe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	440b      	add	r3, r1
 8003ec6:	605a      	str	r2, [r3, #4]
 8003ec8:	e01c      	b.n	8003f04 <HAL_OSPIM_Config+0x5e4>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d018      	beq.n	8003f04 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8003ed2:	4a3a      	ldr	r2, [pc, #232]	; (8003fbc <HAL_OSPIM_Config+0x69c>)
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4413      	add	r3, r2
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003ee8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003eea:	069b      	lsls	r3, r3, #26
 8003eec:	431a      	orrs	r2, r3
 8003eee:	4933      	ldr	r1, [pc, #204]	; (8003fbc <HAL_OSPIM_Config+0x69c>)
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	440b      	add	r3, r1
 8003f02:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d019      	beq.n	8003f44 <HAL_OSPIM_Config+0x624>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8003f10:	4a2a      	ldr	r2, [pc, #168]	; (8003fbc <HAL_OSPIM_Config+0x69c>)
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	3b01      	subs	r3, #1
 8003f18:	f003 0301 	and.w	r3, r3, #1
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	4413      	add	r3, r2
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003f26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f28:	049b      	lsls	r3, r3, #18
 8003f2a:	431a      	orrs	r2, r3
 8003f2c:	4923      	ldr	r1, [pc, #140]	; (8003fbc <HAL_OSPIM_Config+0x69c>)
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	3b01      	subs	r3, #1
 8003f34:	f003 0301 	and.w	r3, r3, #1
 8003f38:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	440b      	add	r3, r1
 8003f40:	605a      	str	r2, [r3, #4]
 8003f42:	e01c      	b.n	8003f7e <HAL_OSPIM_Config+0x65e>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d018      	beq.n	8003f7e <HAL_OSPIM_Config+0x65e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8003f4c:	4a1b      	ldr	r2, [pc, #108]	; (8003fbc <HAL_OSPIM_Config+0x69c>)
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	3b01      	subs	r3, #1
 8003f54:	f003 0301 	and.w	r3, r3, #1
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	4413      	add	r3, r2
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003f62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f64:	069b      	lsls	r3, r3, #26
 8003f66:	431a      	orrs	r2, r3
 8003f68:	4914      	ldr	r1, [pc, #80]	; (8003fbc <HAL_OSPIM_Config+0x69c>)
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	f003 0301 	and.w	r3, r3, #1
 8003f74:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	440b      	add	r3, r1
 8003f7c:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8003f7e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d005      	beq.n	8003f96 <HAL_OSPIM_Config+0x676>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8003f8a:	4b0d      	ldr	r3, [pc, #52]	; (8003fc0 <HAL_OSPIM_Config+0x6a0>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a0c      	ldr	r2, [pc, #48]	; (8003fc0 <HAL_OSPIM_Config+0x6a0>)
 8003f90:	f043 0301 	orr.w	r3, r3, #1
 8003f94:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8003f96:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d005      	beq.n	8003fae <HAL_OSPIM_Config+0x68e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003fa2:	4b08      	ldr	r3, [pc, #32]	; (8003fc4 <HAL_OSPIM_Config+0x6a4>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a07      	ldr	r2, [pc, #28]	; (8003fc4 <HAL_OSPIM_Config+0x6a4>)
 8003fa8:	f043 0301 	orr.w	r3, r3, #1
 8003fac:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8003fae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3748      	adds	r7, #72	; 0x48
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	50061c00 	.word	0x50061c00
 8003fc0:	a0001000 	.word	0xa0001000
 8003fc4:	a0001400 	.word	0xa0001400

08003fc8 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	603b      	str	r3, [r7, #0]
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003fd8:	e01a      	b.n	8004010 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe0:	d016      	beq.n	8004010 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fe2:	f7fd fe2d 	bl	8001c40 <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	69ba      	ldr	r2, [r7, #24]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d302      	bcc.n	8003ff8 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d10b      	bne.n	8004010 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ffe:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004004:	f043 0201 	orr.w	r2, r3, #1
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e00e      	b.n	800402e <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	6a1a      	ldr	r2, [r3, #32]
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	4013      	ands	r3, r2
 800401a:	2b00      	cmp	r3, #0
 800401c:	bf14      	ite	ne
 800401e:	2301      	movne	r3, #1
 8004020:	2300      	moveq	r3, #0
 8004022:	b2db      	uxtb	r3, r3
 8004024:	461a      	mov	r2, r3
 8004026:	79fb      	ldrb	r3, [r7, #7]
 8004028:	429a      	cmp	r2, r3
 800402a:	d1d6      	bne.n	8003fda <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
	...

08004038 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8004038:	b480      	push	{r7}
 800403a:	b087      	sub	sp, #28
 800403c:	af00      	add	r7, sp, #0
 800403e:	4603      	mov	r3, r0
 8004040:	6039      	str	r1, [r7, #0]
 8004042:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8004044:	2300      	movs	r3, #0
 8004046:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8004048:	2300      	movs	r3, #0
 800404a:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 800404c:	79fb      	ldrb	r3, [r7, #7]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d005      	beq.n	800405e <OSPIM_GetConfig+0x26>
 8004052:	79fb      	ldrb	r3, [r7, #7]
 8004054:	2b02      	cmp	r3, #2
 8004056:	d802      	bhi.n	800405e <OSPIM_GetConfig+0x26>
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d102      	bne.n	8004064 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	75fb      	strb	r3, [r7, #23]
 8004062:	e08e      	b.n	8004182 <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	2200      	movs	r2, #0
 8004068:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	2200      	movs	r2, #0
 800406e:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	2200      	movs	r2, #0
 8004074:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	2200      	movs	r2, #0
 800407a:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	2200      	movs	r2, #0
 8004080:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8004082:	79fb      	ldrb	r3, [r7, #7]
 8004084:	2b02      	cmp	r3, #2
 8004086:	d101      	bne.n	800408c <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8004088:	4b41      	ldr	r3, [pc, #260]	; (8004190 <OSPIM_GetConfig+0x158>)
 800408a:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800408c:	2300      	movs	r3, #0
 800408e:	60fb      	str	r3, [r7, #12]
 8004090:	e074      	b.n	800417c <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 8004092:	4a40      	ldr	r2, [pc, #256]	; (8004194 <OSPIM_GetConfig+0x15c>)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	4413      	add	r3, r2
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	f003 0301 	and.w	r3, r3, #1
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00a      	beq.n	80040be <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 80040a8:	68ba      	ldr	r2, [r7, #8]
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	4053      	eors	r3, r2
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d103      	bne.n	80040be <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	1c5a      	adds	r2, r3, #1
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	f003 0310 	and.w	r3, r3, #16
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00a      	beq.n	80040de <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 80040c8:	68ba      	ldr	r2, [r7, #8]
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	4053      	eors	r3, r2
 80040ce:	f003 0320 	and.w	r3, r3, #32
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d103      	bne.n	80040de <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	1c5a      	adds	r2, r3, #1
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00a      	beq.n	80040fe <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 80040e8:	68ba      	ldr	r2, [r7, #8]
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	4053      	eors	r3, r2
 80040ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d103      	bne.n	80040fe <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	1c5a      	adds	r2, r3, #1
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d018      	beq.n	800413a <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8004108:	68ba      	ldr	r2, [r7, #8]
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	4053      	eors	r3, r2
 800410e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d111      	bne.n	800413a <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d106      	bne.n	800412e <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	3301      	adds	r3, #1
 8004124:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	60da      	str	r2, [r3, #12]
 800412c:	e005      	b.n	800413a <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	3301      	adds	r3, #1
 8004132:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d018      	beq.n	8004176 <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8004144:	68ba      	ldr	r2, [r7, #8]
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	4053      	eors	r3, r2
 800414a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d111      	bne.n	8004176 <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d106      	bne.n	800416a <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	3301      	adds	r3, #1
 8004160:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	611a      	str	r2, [r3, #16]
 8004168:	e005      	b.n	8004176 <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	3301      	adds	r3, #1
 800416e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	3301      	adds	r3, #1
 800417a:	60fb      	str	r3, [r7, #12]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2b01      	cmp	r3, #1
 8004180:	d987      	bls.n	8004092 <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 8004182:	7dfb      	ldrb	r3, [r7, #23]
}
 8004184:	4618      	mov	r0, r3
 8004186:	371c      	adds	r7, #28
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr
 8004190:	04040222 	.word	0x04040222
 8004194:	50061c00 	.word	0x50061c00

08004198 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004198:	b480      	push	{r7}
 800419a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800419c:	4b05      	ldr	r3, [pc, #20]	; (80041b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a04      	ldr	r2, [pc, #16]	; (80041b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80041a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041a6:	6013      	str	r3, [r2, #0]
}
 80041a8:	bf00      	nop
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	40007000 	.word	0x40007000

080041b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80041b8:	b480      	push	{r7}
 80041ba:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80041bc:	4b0d      	ldr	r3, [pc, #52]	; (80041f4 <HAL_PWREx_GetVoltageRange+0x3c>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80041c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041c8:	d102      	bne.n	80041d0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80041ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041ce:	e00b      	b.n	80041e8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80041d0:	4b08      	ldr	r3, [pc, #32]	; (80041f4 <HAL_PWREx_GetVoltageRange+0x3c>)
 80041d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041de:	d102      	bne.n	80041e6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80041e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041e4:	e000      	b.n	80041e8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80041e6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	40007000 	.word	0x40007000

080041f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d141      	bne.n	800428a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004206:	4b4b      	ldr	r3, [pc, #300]	; (8004334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800420e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004212:	d131      	bne.n	8004278 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004214:	4b47      	ldr	r3, [pc, #284]	; (8004334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004216:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800421a:	4a46      	ldr	r2, [pc, #280]	; (8004334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800421c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004220:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004224:	4b43      	ldr	r3, [pc, #268]	; (8004334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800422c:	4a41      	ldr	r2, [pc, #260]	; (8004334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800422e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004232:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004234:	4b40      	ldr	r3, [pc, #256]	; (8004338 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2232      	movs	r2, #50	; 0x32
 800423a:	fb02 f303 	mul.w	r3, r2, r3
 800423e:	4a3f      	ldr	r2, [pc, #252]	; (800433c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004240:	fba2 2303 	umull	r2, r3, r2, r3
 8004244:	0c9b      	lsrs	r3, r3, #18
 8004246:	3301      	adds	r3, #1
 8004248:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800424a:	e002      	b.n	8004252 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	3b01      	subs	r3, #1
 8004250:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004252:	4b38      	ldr	r3, [pc, #224]	; (8004334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800425a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800425e:	d102      	bne.n	8004266 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d1f2      	bne.n	800424c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004266:	4b33      	ldr	r3, [pc, #204]	; (8004334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800426e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004272:	d158      	bne.n	8004326 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e057      	b.n	8004328 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004278:	4b2e      	ldr	r3, [pc, #184]	; (8004334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800427a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800427e:	4a2d      	ldr	r2, [pc, #180]	; (8004334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004280:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004284:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004288:	e04d      	b.n	8004326 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004290:	d141      	bne.n	8004316 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004292:	4b28      	ldr	r3, [pc, #160]	; (8004334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800429a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800429e:	d131      	bne.n	8004304 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80042a0:	4b24      	ldr	r3, [pc, #144]	; (8004334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042a6:	4a23      	ldr	r2, [pc, #140]	; (8004334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80042b0:	4b20      	ldr	r3, [pc, #128]	; (8004334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80042b8:	4a1e      	ldr	r2, [pc, #120]	; (8004334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042be:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80042c0:	4b1d      	ldr	r3, [pc, #116]	; (8004338 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2232      	movs	r2, #50	; 0x32
 80042c6:	fb02 f303 	mul.w	r3, r2, r3
 80042ca:	4a1c      	ldr	r2, [pc, #112]	; (800433c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80042cc:	fba2 2303 	umull	r2, r3, r2, r3
 80042d0:	0c9b      	lsrs	r3, r3, #18
 80042d2:	3301      	adds	r3, #1
 80042d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042d6:	e002      	b.n	80042de <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	3b01      	subs	r3, #1
 80042dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042de:	4b15      	ldr	r3, [pc, #84]	; (8004334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042ea:	d102      	bne.n	80042f2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1f2      	bne.n	80042d8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80042f2:	4b10      	ldr	r3, [pc, #64]	; (8004334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042fe:	d112      	bne.n	8004326 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	e011      	b.n	8004328 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004304:	4b0b      	ldr	r3, [pc, #44]	; (8004334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004306:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800430a:	4a0a      	ldr	r2, [pc, #40]	; (8004334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800430c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004310:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004314:	e007      	b.n	8004326 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004316:	4b07      	ldr	r3, [pc, #28]	; (8004334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800431e:	4a05      	ldr	r2, [pc, #20]	; (8004334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004320:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004324:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	3714      	adds	r7, #20
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr
 8004334:	40007000 	.word	0x40007000
 8004338:	20000008 	.word	0x20000008
 800433c:	431bde83 	.word	0x431bde83

08004340 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b088      	sub	sp, #32
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d102      	bne.n	8004354 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	f000 bc16 	b.w	8004b80 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004354:	4ba0      	ldr	r3, [pc, #640]	; (80045d8 <HAL_RCC_OscConfig+0x298>)
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f003 030c 	and.w	r3, r3, #12
 800435c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800435e:	4b9e      	ldr	r3, [pc, #632]	; (80045d8 <HAL_RCC_OscConfig+0x298>)
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	f003 0303 	and.w	r3, r3, #3
 8004366:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0310 	and.w	r3, r3, #16
 8004370:	2b00      	cmp	r3, #0
 8004372:	f000 80e4 	beq.w	800453e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d007      	beq.n	800438c <HAL_RCC_OscConfig+0x4c>
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	2b0c      	cmp	r3, #12
 8004380:	f040 808b 	bne.w	800449a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	2b01      	cmp	r3, #1
 8004388:	f040 8087 	bne.w	800449a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800438c:	4b92      	ldr	r3, [pc, #584]	; (80045d8 <HAL_RCC_OscConfig+0x298>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0302 	and.w	r3, r3, #2
 8004394:	2b00      	cmp	r3, #0
 8004396:	d005      	beq.n	80043a4 <HAL_RCC_OscConfig+0x64>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d101      	bne.n	80043a4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e3ed      	b.n	8004b80 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a1a      	ldr	r2, [r3, #32]
 80043a8:	4b8b      	ldr	r3, [pc, #556]	; (80045d8 <HAL_RCC_OscConfig+0x298>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0308 	and.w	r3, r3, #8
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d004      	beq.n	80043be <HAL_RCC_OscConfig+0x7e>
 80043b4:	4b88      	ldr	r3, [pc, #544]	; (80045d8 <HAL_RCC_OscConfig+0x298>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043bc:	e005      	b.n	80043ca <HAL_RCC_OscConfig+0x8a>
 80043be:	4b86      	ldr	r3, [pc, #536]	; (80045d8 <HAL_RCC_OscConfig+0x298>)
 80043c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043c4:	091b      	lsrs	r3, r3, #4
 80043c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d223      	bcs.n	8004416 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	4618      	mov	r0, r3
 80043d4:	f000 fdca 	bl	8004f6c <RCC_SetFlashLatencyFromMSIRange>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d001      	beq.n	80043e2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e3ce      	b.n	8004b80 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043e2:	4b7d      	ldr	r3, [pc, #500]	; (80045d8 <HAL_RCC_OscConfig+0x298>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a7c      	ldr	r2, [pc, #496]	; (80045d8 <HAL_RCC_OscConfig+0x298>)
 80043e8:	f043 0308 	orr.w	r3, r3, #8
 80043ec:	6013      	str	r3, [r2, #0]
 80043ee:	4b7a      	ldr	r3, [pc, #488]	; (80045d8 <HAL_RCC_OscConfig+0x298>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a1b      	ldr	r3, [r3, #32]
 80043fa:	4977      	ldr	r1, [pc, #476]	; (80045d8 <HAL_RCC_OscConfig+0x298>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004400:	4b75      	ldr	r3, [pc, #468]	; (80045d8 <HAL_RCC_OscConfig+0x298>)
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	69db      	ldr	r3, [r3, #28]
 800440c:	021b      	lsls	r3, r3, #8
 800440e:	4972      	ldr	r1, [pc, #456]	; (80045d8 <HAL_RCC_OscConfig+0x298>)
 8004410:	4313      	orrs	r3, r2
 8004412:	604b      	str	r3, [r1, #4]
 8004414:	e025      	b.n	8004462 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004416:	4b70      	ldr	r3, [pc, #448]	; (80045d8 <HAL_RCC_OscConfig+0x298>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a6f      	ldr	r2, [pc, #444]	; (80045d8 <HAL_RCC_OscConfig+0x298>)
 800441c:	f043 0308 	orr.w	r3, r3, #8
 8004420:	6013      	str	r3, [r2, #0]
 8004422:	4b6d      	ldr	r3, [pc, #436]	; (80045d8 <HAL_RCC_OscConfig+0x298>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	496a      	ldr	r1, [pc, #424]	; (80045d8 <HAL_RCC_OscConfig+0x298>)
 8004430:	4313      	orrs	r3, r2
 8004432:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004434:	4b68      	ldr	r3, [pc, #416]	; (80045d8 <HAL_RCC_OscConfig+0x298>)
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	69db      	ldr	r3, [r3, #28]
 8004440:	021b      	lsls	r3, r3, #8
 8004442:	4965      	ldr	r1, [pc, #404]	; (80045d8 <HAL_RCC_OscConfig+0x298>)
 8004444:	4313      	orrs	r3, r2
 8004446:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d109      	bne.n	8004462 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a1b      	ldr	r3, [r3, #32]
 8004452:	4618      	mov	r0, r3
 8004454:	f000 fd8a 	bl	8004f6c <RCC_SetFlashLatencyFromMSIRange>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d001      	beq.n	8004462 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e38e      	b.n	8004b80 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004462:	f000 fcbf 	bl	8004de4 <HAL_RCC_GetSysClockFreq>
 8004466:	4602      	mov	r2, r0
 8004468:	4b5b      	ldr	r3, [pc, #364]	; (80045d8 <HAL_RCC_OscConfig+0x298>)
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	091b      	lsrs	r3, r3, #4
 800446e:	f003 030f 	and.w	r3, r3, #15
 8004472:	495a      	ldr	r1, [pc, #360]	; (80045dc <HAL_RCC_OscConfig+0x29c>)
 8004474:	5ccb      	ldrb	r3, [r1, r3]
 8004476:	f003 031f 	and.w	r3, r3, #31
 800447a:	fa22 f303 	lsr.w	r3, r2, r3
 800447e:	4a58      	ldr	r2, [pc, #352]	; (80045e0 <HAL_RCC_OscConfig+0x2a0>)
 8004480:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004482:	4b58      	ldr	r3, [pc, #352]	; (80045e4 <HAL_RCC_OscConfig+0x2a4>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4618      	mov	r0, r3
 8004488:	f7fd fb8a 	bl	8001ba0 <HAL_InitTick>
 800448c:	4603      	mov	r3, r0
 800448e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004490:	7bfb      	ldrb	r3, [r7, #15]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d052      	beq.n	800453c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004496:	7bfb      	ldrb	r3, [r7, #15]
 8004498:	e372      	b.n	8004b80 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d032      	beq.n	8004508 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80044a2:	4b4d      	ldr	r3, [pc, #308]	; (80045d8 <HAL_RCC_OscConfig+0x298>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a4c      	ldr	r2, [pc, #304]	; (80045d8 <HAL_RCC_OscConfig+0x298>)
 80044a8:	f043 0301 	orr.w	r3, r3, #1
 80044ac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044ae:	f7fd fbc7 	bl	8001c40 <HAL_GetTick>
 80044b2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044b4:	e008      	b.n	80044c8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044b6:	f7fd fbc3 	bl	8001c40 <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d901      	bls.n	80044c8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e35b      	b.n	8004b80 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044c8:	4b43      	ldr	r3, [pc, #268]	; (80045d8 <HAL_RCC_OscConfig+0x298>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d0f0      	beq.n	80044b6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044d4:	4b40      	ldr	r3, [pc, #256]	; (80045d8 <HAL_RCC_OscConfig+0x298>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a3f      	ldr	r2, [pc, #252]	; (80045d8 <HAL_RCC_OscConfig+0x298>)
 80044da:	f043 0308 	orr.w	r3, r3, #8
 80044de:	6013      	str	r3, [r2, #0]
 80044e0:	4b3d      	ldr	r3, [pc, #244]	; (80045d8 <HAL_RCC_OscConfig+0x298>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a1b      	ldr	r3, [r3, #32]
 80044ec:	493a      	ldr	r1, [pc, #232]	; (80045d8 <HAL_RCC_OscConfig+0x298>)
 80044ee:	4313      	orrs	r3, r2
 80044f0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044f2:	4b39      	ldr	r3, [pc, #228]	; (80045d8 <HAL_RCC_OscConfig+0x298>)
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	69db      	ldr	r3, [r3, #28]
 80044fe:	021b      	lsls	r3, r3, #8
 8004500:	4935      	ldr	r1, [pc, #212]	; (80045d8 <HAL_RCC_OscConfig+0x298>)
 8004502:	4313      	orrs	r3, r2
 8004504:	604b      	str	r3, [r1, #4]
 8004506:	e01a      	b.n	800453e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004508:	4b33      	ldr	r3, [pc, #204]	; (80045d8 <HAL_RCC_OscConfig+0x298>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a32      	ldr	r2, [pc, #200]	; (80045d8 <HAL_RCC_OscConfig+0x298>)
 800450e:	f023 0301 	bic.w	r3, r3, #1
 8004512:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004514:	f7fd fb94 	bl	8001c40 <HAL_GetTick>
 8004518:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800451a:	e008      	b.n	800452e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800451c:	f7fd fb90 	bl	8001c40 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	2b02      	cmp	r3, #2
 8004528:	d901      	bls.n	800452e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e328      	b.n	8004b80 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800452e:	4b2a      	ldr	r3, [pc, #168]	; (80045d8 <HAL_RCC_OscConfig+0x298>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0302 	and.w	r3, r3, #2
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1f0      	bne.n	800451c <HAL_RCC_OscConfig+0x1dc>
 800453a:	e000      	b.n	800453e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800453c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0301 	and.w	r3, r3, #1
 8004546:	2b00      	cmp	r3, #0
 8004548:	d073      	beq.n	8004632 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	2b08      	cmp	r3, #8
 800454e:	d005      	beq.n	800455c <HAL_RCC_OscConfig+0x21c>
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	2b0c      	cmp	r3, #12
 8004554:	d10e      	bne.n	8004574 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	2b03      	cmp	r3, #3
 800455a:	d10b      	bne.n	8004574 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800455c:	4b1e      	ldr	r3, [pc, #120]	; (80045d8 <HAL_RCC_OscConfig+0x298>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d063      	beq.n	8004630 <HAL_RCC_OscConfig+0x2f0>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d15f      	bne.n	8004630 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e305      	b.n	8004b80 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800457c:	d106      	bne.n	800458c <HAL_RCC_OscConfig+0x24c>
 800457e:	4b16      	ldr	r3, [pc, #88]	; (80045d8 <HAL_RCC_OscConfig+0x298>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a15      	ldr	r2, [pc, #84]	; (80045d8 <HAL_RCC_OscConfig+0x298>)
 8004584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004588:	6013      	str	r3, [r2, #0]
 800458a:	e01d      	b.n	80045c8 <HAL_RCC_OscConfig+0x288>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004594:	d10c      	bne.n	80045b0 <HAL_RCC_OscConfig+0x270>
 8004596:	4b10      	ldr	r3, [pc, #64]	; (80045d8 <HAL_RCC_OscConfig+0x298>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a0f      	ldr	r2, [pc, #60]	; (80045d8 <HAL_RCC_OscConfig+0x298>)
 800459c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045a0:	6013      	str	r3, [r2, #0]
 80045a2:	4b0d      	ldr	r3, [pc, #52]	; (80045d8 <HAL_RCC_OscConfig+0x298>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a0c      	ldr	r2, [pc, #48]	; (80045d8 <HAL_RCC_OscConfig+0x298>)
 80045a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045ac:	6013      	str	r3, [r2, #0]
 80045ae:	e00b      	b.n	80045c8 <HAL_RCC_OscConfig+0x288>
 80045b0:	4b09      	ldr	r3, [pc, #36]	; (80045d8 <HAL_RCC_OscConfig+0x298>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a08      	ldr	r2, [pc, #32]	; (80045d8 <HAL_RCC_OscConfig+0x298>)
 80045b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045ba:	6013      	str	r3, [r2, #0]
 80045bc:	4b06      	ldr	r3, [pc, #24]	; (80045d8 <HAL_RCC_OscConfig+0x298>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a05      	ldr	r2, [pc, #20]	; (80045d8 <HAL_RCC_OscConfig+0x298>)
 80045c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d01b      	beq.n	8004608 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d0:	f7fd fb36 	bl	8001c40 <HAL_GetTick>
 80045d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045d6:	e010      	b.n	80045fa <HAL_RCC_OscConfig+0x2ba>
 80045d8:	40021000 	.word	0x40021000
 80045dc:	08007940 	.word	0x08007940
 80045e0:	20000008 	.word	0x20000008
 80045e4:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045e8:	f7fd fb2a 	bl	8001c40 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	2b64      	cmp	r3, #100	; 0x64
 80045f4:	d901      	bls.n	80045fa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e2c2      	b.n	8004b80 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045fa:	4baf      	ldr	r3, [pc, #700]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d0f0      	beq.n	80045e8 <HAL_RCC_OscConfig+0x2a8>
 8004606:	e014      	b.n	8004632 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004608:	f7fd fb1a 	bl	8001c40 <HAL_GetTick>
 800460c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800460e:	e008      	b.n	8004622 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004610:	f7fd fb16 	bl	8001c40 <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	2b64      	cmp	r3, #100	; 0x64
 800461c:	d901      	bls.n	8004622 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e2ae      	b.n	8004b80 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004622:	4ba5      	ldr	r3, [pc, #660]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d1f0      	bne.n	8004610 <HAL_RCC_OscConfig+0x2d0>
 800462e:	e000      	b.n	8004632 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004630:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b00      	cmp	r3, #0
 800463c:	d060      	beq.n	8004700 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	2b04      	cmp	r3, #4
 8004642:	d005      	beq.n	8004650 <HAL_RCC_OscConfig+0x310>
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	2b0c      	cmp	r3, #12
 8004648:	d119      	bne.n	800467e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	2b02      	cmp	r3, #2
 800464e:	d116      	bne.n	800467e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004650:	4b99      	ldr	r3, [pc, #612]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004658:	2b00      	cmp	r3, #0
 800465a:	d005      	beq.n	8004668 <HAL_RCC_OscConfig+0x328>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d101      	bne.n	8004668 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e28b      	b.n	8004b80 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004668:	4b93      	ldr	r3, [pc, #588]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	061b      	lsls	r3, r3, #24
 8004676:	4990      	ldr	r1, [pc, #576]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 8004678:	4313      	orrs	r3, r2
 800467a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800467c:	e040      	b.n	8004700 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d023      	beq.n	80046ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004686:	4b8c      	ldr	r3, [pc, #560]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a8b      	ldr	r2, [pc, #556]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 800468c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004690:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004692:	f7fd fad5 	bl	8001c40 <HAL_GetTick>
 8004696:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004698:	e008      	b.n	80046ac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800469a:	f7fd fad1 	bl	8001c40 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d901      	bls.n	80046ac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e269      	b.n	8004b80 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046ac:	4b82      	ldr	r3, [pc, #520]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d0f0      	beq.n	800469a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046b8:	4b7f      	ldr	r3, [pc, #508]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	061b      	lsls	r3, r3, #24
 80046c6:	497c      	ldr	r1, [pc, #496]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	604b      	str	r3, [r1, #4]
 80046cc:	e018      	b.n	8004700 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046ce:	4b7a      	ldr	r3, [pc, #488]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a79      	ldr	r2, [pc, #484]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 80046d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046da:	f7fd fab1 	bl	8001c40 <HAL_GetTick>
 80046de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046e0:	e008      	b.n	80046f4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046e2:	f7fd faad 	bl	8001c40 <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d901      	bls.n	80046f4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e245      	b.n	8004b80 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046f4:	4b70      	ldr	r3, [pc, #448]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d1f0      	bne.n	80046e2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0308 	and.w	r3, r3, #8
 8004708:	2b00      	cmp	r3, #0
 800470a:	d03c      	beq.n	8004786 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	695b      	ldr	r3, [r3, #20]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d01c      	beq.n	800474e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004714:	4b68      	ldr	r3, [pc, #416]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 8004716:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800471a:	4a67      	ldr	r2, [pc, #412]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 800471c:	f043 0301 	orr.w	r3, r3, #1
 8004720:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004724:	f7fd fa8c 	bl	8001c40 <HAL_GetTick>
 8004728:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800472a:	e008      	b.n	800473e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800472c:	f7fd fa88 	bl	8001c40 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b02      	cmp	r3, #2
 8004738:	d901      	bls.n	800473e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e220      	b.n	8004b80 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800473e:	4b5e      	ldr	r3, [pc, #376]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 8004740:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004744:	f003 0302 	and.w	r3, r3, #2
 8004748:	2b00      	cmp	r3, #0
 800474a:	d0ef      	beq.n	800472c <HAL_RCC_OscConfig+0x3ec>
 800474c:	e01b      	b.n	8004786 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800474e:	4b5a      	ldr	r3, [pc, #360]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 8004750:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004754:	4a58      	ldr	r2, [pc, #352]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 8004756:	f023 0301 	bic.w	r3, r3, #1
 800475a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800475e:	f7fd fa6f 	bl	8001c40 <HAL_GetTick>
 8004762:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004764:	e008      	b.n	8004778 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004766:	f7fd fa6b 	bl	8001c40 <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	2b02      	cmp	r3, #2
 8004772:	d901      	bls.n	8004778 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	e203      	b.n	8004b80 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004778:	4b4f      	ldr	r3, [pc, #316]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 800477a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800477e:	f003 0302 	and.w	r3, r3, #2
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1ef      	bne.n	8004766 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0304 	and.w	r3, r3, #4
 800478e:	2b00      	cmp	r3, #0
 8004790:	f000 80a6 	beq.w	80048e0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004794:	2300      	movs	r3, #0
 8004796:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004798:	4b47      	ldr	r3, [pc, #284]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 800479a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800479c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d10d      	bne.n	80047c0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047a4:	4b44      	ldr	r3, [pc, #272]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 80047a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047a8:	4a43      	ldr	r2, [pc, #268]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 80047aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047ae:	6593      	str	r3, [r2, #88]	; 0x58
 80047b0:	4b41      	ldr	r3, [pc, #260]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 80047b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047b8:	60bb      	str	r3, [r7, #8]
 80047ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047bc:	2301      	movs	r3, #1
 80047be:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047c0:	4b3e      	ldr	r3, [pc, #248]	; (80048bc <HAL_RCC_OscConfig+0x57c>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d118      	bne.n	80047fe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047cc:	4b3b      	ldr	r3, [pc, #236]	; (80048bc <HAL_RCC_OscConfig+0x57c>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a3a      	ldr	r2, [pc, #232]	; (80048bc <HAL_RCC_OscConfig+0x57c>)
 80047d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047d8:	f7fd fa32 	bl	8001c40 <HAL_GetTick>
 80047dc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047de:	e008      	b.n	80047f2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047e0:	f7fd fa2e 	bl	8001c40 <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d901      	bls.n	80047f2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e1c6      	b.n	8004b80 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047f2:	4b32      	ldr	r3, [pc, #200]	; (80048bc <HAL_RCC_OscConfig+0x57c>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d0f0      	beq.n	80047e0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	2b01      	cmp	r3, #1
 8004804:	d108      	bne.n	8004818 <HAL_RCC_OscConfig+0x4d8>
 8004806:	4b2c      	ldr	r3, [pc, #176]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 8004808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800480c:	4a2a      	ldr	r2, [pc, #168]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 800480e:	f043 0301 	orr.w	r3, r3, #1
 8004812:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004816:	e024      	b.n	8004862 <HAL_RCC_OscConfig+0x522>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	2b05      	cmp	r3, #5
 800481e:	d110      	bne.n	8004842 <HAL_RCC_OscConfig+0x502>
 8004820:	4b25      	ldr	r3, [pc, #148]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 8004822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004826:	4a24      	ldr	r2, [pc, #144]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 8004828:	f043 0304 	orr.w	r3, r3, #4
 800482c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004830:	4b21      	ldr	r3, [pc, #132]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 8004832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004836:	4a20      	ldr	r2, [pc, #128]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 8004838:	f043 0301 	orr.w	r3, r3, #1
 800483c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004840:	e00f      	b.n	8004862 <HAL_RCC_OscConfig+0x522>
 8004842:	4b1d      	ldr	r3, [pc, #116]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 8004844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004848:	4a1b      	ldr	r2, [pc, #108]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 800484a:	f023 0301 	bic.w	r3, r3, #1
 800484e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004852:	4b19      	ldr	r3, [pc, #100]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 8004854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004858:	4a17      	ldr	r2, [pc, #92]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 800485a:	f023 0304 	bic.w	r3, r3, #4
 800485e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d016      	beq.n	8004898 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800486a:	f7fd f9e9 	bl	8001c40 <HAL_GetTick>
 800486e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004870:	e00a      	b.n	8004888 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004872:	f7fd f9e5 	bl	8001c40 <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004880:	4293      	cmp	r3, r2
 8004882:	d901      	bls.n	8004888 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e17b      	b.n	8004b80 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004888:	4b0b      	ldr	r3, [pc, #44]	; (80048b8 <HAL_RCC_OscConfig+0x578>)
 800488a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d0ed      	beq.n	8004872 <HAL_RCC_OscConfig+0x532>
 8004896:	e01a      	b.n	80048ce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004898:	f7fd f9d2 	bl	8001c40 <HAL_GetTick>
 800489c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800489e:	e00f      	b.n	80048c0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048a0:	f7fd f9ce 	bl	8001c40 <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d906      	bls.n	80048c0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e164      	b.n	8004b80 <HAL_RCC_OscConfig+0x840>
 80048b6:	bf00      	nop
 80048b8:	40021000 	.word	0x40021000
 80048bc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048c0:	4ba8      	ldr	r3, [pc, #672]	; (8004b64 <HAL_RCC_OscConfig+0x824>)
 80048c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1e8      	bne.n	80048a0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048ce:	7ffb      	ldrb	r3, [r7, #31]
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d105      	bne.n	80048e0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048d4:	4ba3      	ldr	r3, [pc, #652]	; (8004b64 <HAL_RCC_OscConfig+0x824>)
 80048d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048d8:	4aa2      	ldr	r2, [pc, #648]	; (8004b64 <HAL_RCC_OscConfig+0x824>)
 80048da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048de:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0320 	and.w	r3, r3, #32
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d03c      	beq.n	8004966 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d01c      	beq.n	800492e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80048f4:	4b9b      	ldr	r3, [pc, #620]	; (8004b64 <HAL_RCC_OscConfig+0x824>)
 80048f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048fa:	4a9a      	ldr	r2, [pc, #616]	; (8004b64 <HAL_RCC_OscConfig+0x824>)
 80048fc:	f043 0301 	orr.w	r3, r3, #1
 8004900:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004904:	f7fd f99c 	bl	8001c40 <HAL_GetTick>
 8004908:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800490a:	e008      	b.n	800491e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800490c:	f7fd f998 	bl	8001c40 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	2b02      	cmp	r3, #2
 8004918:	d901      	bls.n	800491e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e130      	b.n	8004b80 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800491e:	4b91      	ldr	r3, [pc, #580]	; (8004b64 <HAL_RCC_OscConfig+0x824>)
 8004920:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004924:	f003 0302 	and.w	r3, r3, #2
 8004928:	2b00      	cmp	r3, #0
 800492a:	d0ef      	beq.n	800490c <HAL_RCC_OscConfig+0x5cc>
 800492c:	e01b      	b.n	8004966 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800492e:	4b8d      	ldr	r3, [pc, #564]	; (8004b64 <HAL_RCC_OscConfig+0x824>)
 8004930:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004934:	4a8b      	ldr	r2, [pc, #556]	; (8004b64 <HAL_RCC_OscConfig+0x824>)
 8004936:	f023 0301 	bic.w	r3, r3, #1
 800493a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800493e:	f7fd f97f 	bl	8001c40 <HAL_GetTick>
 8004942:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004944:	e008      	b.n	8004958 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004946:	f7fd f97b 	bl	8001c40 <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	2b02      	cmp	r3, #2
 8004952:	d901      	bls.n	8004958 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e113      	b.n	8004b80 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004958:	4b82      	ldr	r3, [pc, #520]	; (8004b64 <HAL_RCC_OscConfig+0x824>)
 800495a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1ef      	bne.n	8004946 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800496a:	2b00      	cmp	r3, #0
 800496c:	f000 8107 	beq.w	8004b7e <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004974:	2b02      	cmp	r3, #2
 8004976:	f040 80cb 	bne.w	8004b10 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800497a:	4b7a      	ldr	r3, [pc, #488]	; (8004b64 <HAL_RCC_OscConfig+0x824>)
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	f003 0203 	and.w	r2, r3, #3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498a:	429a      	cmp	r2, r3
 800498c:	d12c      	bne.n	80049e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004998:	3b01      	subs	r3, #1
 800499a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800499c:	429a      	cmp	r2, r3
 800499e:	d123      	bne.n	80049e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049aa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d11b      	bne.n	80049e8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ba:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049bc:	429a      	cmp	r2, r3
 80049be:	d113      	bne.n	80049e8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ca:	085b      	lsrs	r3, r3, #1
 80049cc:	3b01      	subs	r3, #1
 80049ce:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d109      	bne.n	80049e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049de:	085b      	lsrs	r3, r3, #1
 80049e0:	3b01      	subs	r3, #1
 80049e2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d06d      	beq.n	8004ac4 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	2b0c      	cmp	r3, #12
 80049ec:	d068      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80049ee:	4b5d      	ldr	r3, [pc, #372]	; (8004b64 <HAL_RCC_OscConfig+0x824>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d105      	bne.n	8004a06 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80049fa:	4b5a      	ldr	r3, [pc, #360]	; (8004b64 <HAL_RCC_OscConfig+0x824>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d001      	beq.n	8004a0a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e0ba      	b.n	8004b80 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004a0a:	4b56      	ldr	r3, [pc, #344]	; (8004b64 <HAL_RCC_OscConfig+0x824>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a55      	ldr	r2, [pc, #340]	; (8004b64 <HAL_RCC_OscConfig+0x824>)
 8004a10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a14:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a16:	f7fd f913 	bl	8001c40 <HAL_GetTick>
 8004a1a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a1c:	e008      	b.n	8004a30 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a1e:	f7fd f90f 	bl	8001c40 <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d901      	bls.n	8004a30 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e0a7      	b.n	8004b80 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a30:	4b4c      	ldr	r3, [pc, #304]	; (8004b64 <HAL_RCC_OscConfig+0x824>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1f0      	bne.n	8004a1e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a3c:	4b49      	ldr	r3, [pc, #292]	; (8004b64 <HAL_RCC_OscConfig+0x824>)
 8004a3e:	68da      	ldr	r2, [r3, #12]
 8004a40:	4b49      	ldr	r3, [pc, #292]	; (8004b68 <HAL_RCC_OscConfig+0x828>)
 8004a42:	4013      	ands	r3, r2
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004a4c:	3a01      	subs	r2, #1
 8004a4e:	0112      	lsls	r2, r2, #4
 8004a50:	4311      	orrs	r1, r2
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a56:	0212      	lsls	r2, r2, #8
 8004a58:	4311      	orrs	r1, r2
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004a5e:	0852      	lsrs	r2, r2, #1
 8004a60:	3a01      	subs	r2, #1
 8004a62:	0552      	lsls	r2, r2, #21
 8004a64:	4311      	orrs	r1, r2
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004a6a:	0852      	lsrs	r2, r2, #1
 8004a6c:	3a01      	subs	r2, #1
 8004a6e:	0652      	lsls	r2, r2, #25
 8004a70:	4311      	orrs	r1, r2
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a76:	06d2      	lsls	r2, r2, #27
 8004a78:	430a      	orrs	r2, r1
 8004a7a:	493a      	ldr	r1, [pc, #232]	; (8004b64 <HAL_RCC_OscConfig+0x824>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004a80:	4b38      	ldr	r3, [pc, #224]	; (8004b64 <HAL_RCC_OscConfig+0x824>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a37      	ldr	r2, [pc, #220]	; (8004b64 <HAL_RCC_OscConfig+0x824>)
 8004a86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a8a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a8c:	4b35      	ldr	r3, [pc, #212]	; (8004b64 <HAL_RCC_OscConfig+0x824>)
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	4a34      	ldr	r2, [pc, #208]	; (8004b64 <HAL_RCC_OscConfig+0x824>)
 8004a92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a96:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a98:	f7fd f8d2 	bl	8001c40 <HAL_GetTick>
 8004a9c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a9e:	e008      	b.n	8004ab2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aa0:	f7fd f8ce 	bl	8001c40 <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d901      	bls.n	8004ab2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e066      	b.n	8004b80 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ab2:	4b2c      	ldr	r3, [pc, #176]	; (8004b64 <HAL_RCC_OscConfig+0x824>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d0f0      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004abe:	e05e      	b.n	8004b7e <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e05d      	b.n	8004b80 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ac4:	4b27      	ldr	r3, [pc, #156]	; (8004b64 <HAL_RCC_OscConfig+0x824>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d156      	bne.n	8004b7e <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004ad0:	4b24      	ldr	r3, [pc, #144]	; (8004b64 <HAL_RCC_OscConfig+0x824>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a23      	ldr	r2, [pc, #140]	; (8004b64 <HAL_RCC_OscConfig+0x824>)
 8004ad6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ada:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004adc:	4b21      	ldr	r3, [pc, #132]	; (8004b64 <HAL_RCC_OscConfig+0x824>)
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	4a20      	ldr	r2, [pc, #128]	; (8004b64 <HAL_RCC_OscConfig+0x824>)
 8004ae2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ae6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004ae8:	f7fd f8aa 	bl	8001c40 <HAL_GetTick>
 8004aec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004aee:	e008      	b.n	8004b02 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004af0:	f7fd f8a6 	bl	8001c40 <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d901      	bls.n	8004b02 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e03e      	b.n	8004b80 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b02:	4b18      	ldr	r3, [pc, #96]	; (8004b64 <HAL_RCC_OscConfig+0x824>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d0f0      	beq.n	8004af0 <HAL_RCC_OscConfig+0x7b0>
 8004b0e:	e036      	b.n	8004b7e <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	2b0c      	cmp	r3, #12
 8004b14:	d031      	beq.n	8004b7a <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b16:	4b13      	ldr	r3, [pc, #76]	; (8004b64 <HAL_RCC_OscConfig+0x824>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a12      	ldr	r2, [pc, #72]	; (8004b64 <HAL_RCC_OscConfig+0x824>)
 8004b1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b20:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004b22:	4b10      	ldr	r3, [pc, #64]	; (8004b64 <HAL_RCC_OscConfig+0x824>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d105      	bne.n	8004b3a <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004b2e:	4b0d      	ldr	r3, [pc, #52]	; (8004b64 <HAL_RCC_OscConfig+0x824>)
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	4a0c      	ldr	r2, [pc, #48]	; (8004b64 <HAL_RCC_OscConfig+0x824>)
 8004b34:	f023 0303 	bic.w	r3, r3, #3
 8004b38:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004b3a:	4b0a      	ldr	r3, [pc, #40]	; (8004b64 <HAL_RCC_OscConfig+0x824>)
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	4a09      	ldr	r2, [pc, #36]	; (8004b64 <HAL_RCC_OscConfig+0x824>)
 8004b40:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004b44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b48:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b4a:	f7fd f879 	bl	8001c40 <HAL_GetTick>
 8004b4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b50:	e00c      	b.n	8004b6c <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b52:	f7fd f875 	bl	8001c40 <HAL_GetTick>
 8004b56:	4602      	mov	r2, r0
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d905      	bls.n	8004b6c <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e00d      	b.n	8004b80 <HAL_RCC_OscConfig+0x840>
 8004b64:	40021000 	.word	0x40021000
 8004b68:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b6c:	4b06      	ldr	r3, [pc, #24]	; (8004b88 <HAL_RCC_OscConfig+0x848>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d1ec      	bne.n	8004b52 <HAL_RCC_OscConfig+0x812>
 8004b78:	e001      	b.n	8004b7e <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e000      	b.n	8004b80 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3720      	adds	r7, #32
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	40021000 	.word	0x40021000

08004b8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b086      	sub	sp, #24
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004b96:	2300      	movs	r3, #0
 8004b98:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d101      	bne.n	8004ba4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e10f      	b.n	8004dc4 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ba4:	4b89      	ldr	r3, [pc, #548]	; (8004dcc <HAL_RCC_ClockConfig+0x240>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 030f 	and.w	r3, r3, #15
 8004bac:	683a      	ldr	r2, [r7, #0]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d910      	bls.n	8004bd4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bb2:	4b86      	ldr	r3, [pc, #536]	; (8004dcc <HAL_RCC_ClockConfig+0x240>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f023 020f 	bic.w	r2, r3, #15
 8004bba:	4984      	ldr	r1, [pc, #528]	; (8004dcc <HAL_RCC_ClockConfig+0x240>)
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bc2:	4b82      	ldr	r3, [pc, #520]	; (8004dcc <HAL_RCC_ClockConfig+0x240>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 030f 	and.w	r3, r3, #15
 8004bca:	683a      	ldr	r2, [r7, #0]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d001      	beq.n	8004bd4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e0f7      	b.n	8004dc4 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0301 	and.w	r3, r3, #1
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	f000 8089 	beq.w	8004cf4 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	2b03      	cmp	r3, #3
 8004be8:	d133      	bne.n	8004c52 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bea:	4b79      	ldr	r3, [pc, #484]	; (8004dd0 <HAL_RCC_ClockConfig+0x244>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d101      	bne.n	8004bfa <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e0e4      	b.n	8004dc4 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004bfa:	f000 fa11 	bl	8005020 <RCC_GetSysClockFreqFromPLLSource>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	4a74      	ldr	r2, [pc, #464]	; (8004dd4 <HAL_RCC_ClockConfig+0x248>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d955      	bls.n	8004cb2 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004c06:	4b72      	ldr	r3, [pc, #456]	; (8004dd0 <HAL_RCC_ClockConfig+0x244>)
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d10a      	bne.n	8004c28 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004c12:	4b6f      	ldr	r3, [pc, #444]	; (8004dd0 <HAL_RCC_ClockConfig+0x244>)
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c1a:	4a6d      	ldr	r2, [pc, #436]	; (8004dd0 <HAL_RCC_ClockConfig+0x244>)
 8004c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c20:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004c22:	2380      	movs	r3, #128	; 0x80
 8004c24:	617b      	str	r3, [r7, #20]
 8004c26:	e044      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 0302 	and.w	r3, r3, #2
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d03e      	beq.n	8004cb2 <HAL_RCC_ClockConfig+0x126>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d13a      	bne.n	8004cb2 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004c3c:	4b64      	ldr	r3, [pc, #400]	; (8004dd0 <HAL_RCC_ClockConfig+0x244>)
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c44:	4a62      	ldr	r2, [pc, #392]	; (8004dd0 <HAL_RCC_ClockConfig+0x244>)
 8004c46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c4a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004c4c:	2380      	movs	r3, #128	; 0x80
 8004c4e:	617b      	str	r3, [r7, #20]
 8004c50:	e02f      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d107      	bne.n	8004c6a <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c5a:	4b5d      	ldr	r3, [pc, #372]	; (8004dd0 <HAL_RCC_ClockConfig+0x244>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d115      	bne.n	8004c92 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e0ac      	b.n	8004dc4 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d107      	bne.n	8004c82 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c72:	4b57      	ldr	r3, [pc, #348]	; (8004dd0 <HAL_RCC_ClockConfig+0x244>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d109      	bne.n	8004c92 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e0a0      	b.n	8004dc4 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c82:	4b53      	ldr	r3, [pc, #332]	; (8004dd0 <HAL_RCC_ClockConfig+0x244>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d101      	bne.n	8004c92 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e098      	b.n	8004dc4 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004c92:	f000 f8a7 	bl	8004de4 <HAL_RCC_GetSysClockFreq>
 8004c96:	4603      	mov	r3, r0
 8004c98:	4a4e      	ldr	r2, [pc, #312]	; (8004dd4 <HAL_RCC_ClockConfig+0x248>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d909      	bls.n	8004cb2 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004c9e:	4b4c      	ldr	r3, [pc, #304]	; (8004dd0 <HAL_RCC_ClockConfig+0x244>)
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ca6:	4a4a      	ldr	r2, [pc, #296]	; (8004dd0 <HAL_RCC_ClockConfig+0x244>)
 8004ca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004cae:	2380      	movs	r3, #128	; 0x80
 8004cb0:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004cb2:	4b47      	ldr	r3, [pc, #284]	; (8004dd0 <HAL_RCC_ClockConfig+0x244>)
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	f023 0203 	bic.w	r2, r3, #3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	4944      	ldr	r1, [pc, #272]	; (8004dd0 <HAL_RCC_ClockConfig+0x244>)
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cc4:	f7fc ffbc 	bl	8001c40 <HAL_GetTick>
 8004cc8:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cca:	e00a      	b.n	8004ce2 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ccc:	f7fc ffb8 	bl	8001c40 <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d901      	bls.n	8004ce2 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e070      	b.n	8004dc4 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ce2:	4b3b      	ldr	r3, [pc, #236]	; (8004dd0 <HAL_RCC_ClockConfig+0x244>)
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	f003 020c 	and.w	r2, r3, #12
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d1eb      	bne.n	8004ccc <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0302 	and.w	r3, r3, #2
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d009      	beq.n	8004d14 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d00:	4b33      	ldr	r3, [pc, #204]	; (8004dd0 <HAL_RCC_ClockConfig+0x244>)
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	4930      	ldr	r1, [pc, #192]	; (8004dd0 <HAL_RCC_ClockConfig+0x244>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	608b      	str	r3, [r1, #8]
 8004d12:	e008      	b.n	8004d26 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	2b80      	cmp	r3, #128	; 0x80
 8004d18:	d105      	bne.n	8004d26 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004d1a:	4b2d      	ldr	r3, [pc, #180]	; (8004dd0 <HAL_RCC_ClockConfig+0x244>)
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	4a2c      	ldr	r2, [pc, #176]	; (8004dd0 <HAL_RCC_ClockConfig+0x244>)
 8004d20:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d24:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d26:	4b29      	ldr	r3, [pc, #164]	; (8004dcc <HAL_RCC_ClockConfig+0x240>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 030f 	and.w	r3, r3, #15
 8004d2e:	683a      	ldr	r2, [r7, #0]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d210      	bcs.n	8004d56 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d34:	4b25      	ldr	r3, [pc, #148]	; (8004dcc <HAL_RCC_ClockConfig+0x240>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f023 020f 	bic.w	r2, r3, #15
 8004d3c:	4923      	ldr	r1, [pc, #140]	; (8004dcc <HAL_RCC_ClockConfig+0x240>)
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d44:	4b21      	ldr	r3, [pc, #132]	; (8004dcc <HAL_RCC_ClockConfig+0x240>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 030f 	and.w	r3, r3, #15
 8004d4c:	683a      	ldr	r2, [r7, #0]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d001      	beq.n	8004d56 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e036      	b.n	8004dc4 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0304 	and.w	r3, r3, #4
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d008      	beq.n	8004d74 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d62:	4b1b      	ldr	r3, [pc, #108]	; (8004dd0 <HAL_RCC_ClockConfig+0x244>)
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	4918      	ldr	r1, [pc, #96]	; (8004dd0 <HAL_RCC_ClockConfig+0x244>)
 8004d70:	4313      	orrs	r3, r2
 8004d72:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0308 	and.w	r3, r3, #8
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d009      	beq.n	8004d94 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d80:	4b13      	ldr	r3, [pc, #76]	; (8004dd0 <HAL_RCC_ClockConfig+0x244>)
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	00db      	lsls	r3, r3, #3
 8004d8e:	4910      	ldr	r1, [pc, #64]	; (8004dd0 <HAL_RCC_ClockConfig+0x244>)
 8004d90:	4313      	orrs	r3, r2
 8004d92:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d94:	f000 f826 	bl	8004de4 <HAL_RCC_GetSysClockFreq>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	4b0d      	ldr	r3, [pc, #52]	; (8004dd0 <HAL_RCC_ClockConfig+0x244>)
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	091b      	lsrs	r3, r3, #4
 8004da0:	f003 030f 	and.w	r3, r3, #15
 8004da4:	490c      	ldr	r1, [pc, #48]	; (8004dd8 <HAL_RCC_ClockConfig+0x24c>)
 8004da6:	5ccb      	ldrb	r3, [r1, r3]
 8004da8:	f003 031f 	and.w	r3, r3, #31
 8004dac:	fa22 f303 	lsr.w	r3, r2, r3
 8004db0:	4a0a      	ldr	r2, [pc, #40]	; (8004ddc <HAL_RCC_ClockConfig+0x250>)
 8004db2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004db4:	4b0a      	ldr	r3, [pc, #40]	; (8004de0 <HAL_RCC_ClockConfig+0x254>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4618      	mov	r0, r3
 8004dba:	f7fc fef1 	bl	8001ba0 <HAL_InitTick>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	73fb      	strb	r3, [r7, #15]

  return status;
 8004dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3718      	adds	r7, #24
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	40022000 	.word	0x40022000
 8004dd0:	40021000 	.word	0x40021000
 8004dd4:	04c4b400 	.word	0x04c4b400
 8004dd8:	08007940 	.word	0x08007940
 8004ddc:	20000008 	.word	0x20000008
 8004de0:	2000000c 	.word	0x2000000c

08004de4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b089      	sub	sp, #36	; 0x24
 8004de8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004dea:	2300      	movs	r3, #0
 8004dec:	61fb      	str	r3, [r7, #28]
 8004dee:	2300      	movs	r3, #0
 8004df0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004df2:	4b3e      	ldr	r3, [pc, #248]	; (8004eec <HAL_RCC_GetSysClockFreq+0x108>)
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f003 030c 	and.w	r3, r3, #12
 8004dfa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004dfc:	4b3b      	ldr	r3, [pc, #236]	; (8004eec <HAL_RCC_GetSysClockFreq+0x108>)
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	f003 0303 	and.w	r3, r3, #3
 8004e04:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d005      	beq.n	8004e18 <HAL_RCC_GetSysClockFreq+0x34>
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	2b0c      	cmp	r3, #12
 8004e10:	d121      	bne.n	8004e56 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d11e      	bne.n	8004e56 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004e18:	4b34      	ldr	r3, [pc, #208]	; (8004eec <HAL_RCC_GetSysClockFreq+0x108>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0308 	and.w	r3, r3, #8
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d107      	bne.n	8004e34 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004e24:	4b31      	ldr	r3, [pc, #196]	; (8004eec <HAL_RCC_GetSysClockFreq+0x108>)
 8004e26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e2a:	0a1b      	lsrs	r3, r3, #8
 8004e2c:	f003 030f 	and.w	r3, r3, #15
 8004e30:	61fb      	str	r3, [r7, #28]
 8004e32:	e005      	b.n	8004e40 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004e34:	4b2d      	ldr	r3, [pc, #180]	; (8004eec <HAL_RCC_GetSysClockFreq+0x108>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	091b      	lsrs	r3, r3, #4
 8004e3a:	f003 030f 	and.w	r3, r3, #15
 8004e3e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004e40:	4a2b      	ldr	r2, [pc, #172]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e48:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d10d      	bne.n	8004e6c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e54:	e00a      	b.n	8004e6c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	2b04      	cmp	r3, #4
 8004e5a:	d102      	bne.n	8004e62 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004e5c:	4b25      	ldr	r3, [pc, #148]	; (8004ef4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004e5e:	61bb      	str	r3, [r7, #24]
 8004e60:	e004      	b.n	8004e6c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	2b08      	cmp	r3, #8
 8004e66:	d101      	bne.n	8004e6c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004e68:	4b23      	ldr	r3, [pc, #140]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004e6a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	2b0c      	cmp	r3, #12
 8004e70:	d134      	bne.n	8004edc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e72:	4b1e      	ldr	r3, [pc, #120]	; (8004eec <HAL_RCC_GetSysClockFreq+0x108>)
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	f003 0303 	and.w	r3, r3, #3
 8004e7a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d003      	beq.n	8004e8a <HAL_RCC_GetSysClockFreq+0xa6>
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	2b03      	cmp	r3, #3
 8004e86:	d003      	beq.n	8004e90 <HAL_RCC_GetSysClockFreq+0xac>
 8004e88:	e005      	b.n	8004e96 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004e8a:	4b1a      	ldr	r3, [pc, #104]	; (8004ef4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004e8c:	617b      	str	r3, [r7, #20]
      break;
 8004e8e:	e005      	b.n	8004e9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004e90:	4b19      	ldr	r3, [pc, #100]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004e92:	617b      	str	r3, [r7, #20]
      break;
 8004e94:	e002      	b.n	8004e9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	617b      	str	r3, [r7, #20]
      break;
 8004e9a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e9c:	4b13      	ldr	r3, [pc, #76]	; (8004eec <HAL_RCC_GetSysClockFreq+0x108>)
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	091b      	lsrs	r3, r3, #4
 8004ea2:	f003 030f 	and.w	r3, r3, #15
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004eaa:	4b10      	ldr	r3, [pc, #64]	; (8004eec <HAL_RCC_GetSysClockFreq+0x108>)
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	0a1b      	lsrs	r3, r3, #8
 8004eb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004eb4:	697a      	ldr	r2, [r7, #20]
 8004eb6:	fb02 f203 	mul.w	r2, r2, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ec0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ec2:	4b0a      	ldr	r3, [pc, #40]	; (8004eec <HAL_RCC_GetSysClockFreq+0x108>)
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	0e5b      	lsrs	r3, r3, #25
 8004ec8:	f003 0303 	and.w	r3, r3, #3
 8004ecc:	3301      	adds	r3, #1
 8004ece:	005b      	lsls	r3, r3, #1
 8004ed0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eda:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004edc:	69bb      	ldr	r3, [r7, #24]
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3724      	adds	r7, #36	; 0x24
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	40021000 	.word	0x40021000
 8004ef0:	08007958 	.word	0x08007958
 8004ef4:	00f42400 	.word	0x00f42400
 8004ef8:	007a1200 	.word	0x007a1200

08004efc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004efc:	b480      	push	{r7}
 8004efe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f00:	4b03      	ldr	r3, [pc, #12]	; (8004f10 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f02:	681b      	ldr	r3, [r3, #0]
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	20000008 	.word	0x20000008

08004f14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004f18:	f7ff fff0 	bl	8004efc <HAL_RCC_GetHCLKFreq>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	4b06      	ldr	r3, [pc, #24]	; (8004f38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	0a1b      	lsrs	r3, r3, #8
 8004f24:	f003 0307 	and.w	r3, r3, #7
 8004f28:	4904      	ldr	r1, [pc, #16]	; (8004f3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f2a:	5ccb      	ldrb	r3, [r1, r3]
 8004f2c:	f003 031f 	and.w	r3, r3, #31
 8004f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	40021000 	.word	0x40021000
 8004f3c:	08007950 	.word	0x08007950

08004f40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004f44:	f7ff ffda 	bl	8004efc <HAL_RCC_GetHCLKFreq>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	4b06      	ldr	r3, [pc, #24]	; (8004f64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	0adb      	lsrs	r3, r3, #11
 8004f50:	f003 0307 	and.w	r3, r3, #7
 8004f54:	4904      	ldr	r1, [pc, #16]	; (8004f68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004f56:	5ccb      	ldrb	r3, [r1, r3]
 8004f58:	f003 031f 	and.w	r3, r3, #31
 8004f5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	40021000 	.word	0x40021000
 8004f68:	08007950 	.word	0x08007950

08004f6c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b086      	sub	sp, #24
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004f74:	2300      	movs	r3, #0
 8004f76:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004f78:	4b27      	ldr	r3, [pc, #156]	; (8005018 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d003      	beq.n	8004f8c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004f84:	f7ff f918 	bl	80041b8 <HAL_PWREx_GetVoltageRange>
 8004f88:	6178      	str	r0, [r7, #20]
 8004f8a:	e014      	b.n	8004fb6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f8c:	4b22      	ldr	r3, [pc, #136]	; (8005018 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f90:	4a21      	ldr	r2, [pc, #132]	; (8005018 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004f92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f96:	6593      	str	r3, [r2, #88]	; 0x58
 8004f98:	4b1f      	ldr	r3, [pc, #124]	; (8005018 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fa0:	60fb      	str	r3, [r7, #12]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004fa4:	f7ff f908 	bl	80041b8 <HAL_PWREx_GetVoltageRange>
 8004fa8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004faa:	4b1b      	ldr	r3, [pc, #108]	; (8005018 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fae:	4a1a      	ldr	r2, [pc, #104]	; (8005018 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004fb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fb4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fbc:	d10b      	bne.n	8004fd6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2b80      	cmp	r3, #128	; 0x80
 8004fc2:	d913      	bls.n	8004fec <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2ba0      	cmp	r3, #160	; 0xa0
 8004fc8:	d902      	bls.n	8004fd0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004fca:	2302      	movs	r3, #2
 8004fcc:	613b      	str	r3, [r7, #16]
 8004fce:	e00d      	b.n	8004fec <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	613b      	str	r3, [r7, #16]
 8004fd4:	e00a      	b.n	8004fec <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2b7f      	cmp	r3, #127	; 0x7f
 8004fda:	d902      	bls.n	8004fe2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004fdc:	2302      	movs	r3, #2
 8004fde:	613b      	str	r3, [r7, #16]
 8004fe0:	e004      	b.n	8004fec <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2b70      	cmp	r3, #112	; 0x70
 8004fe6:	d101      	bne.n	8004fec <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004fe8:	2301      	movs	r3, #1
 8004fea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004fec:	4b0b      	ldr	r3, [pc, #44]	; (800501c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f023 020f 	bic.w	r2, r3, #15
 8004ff4:	4909      	ldr	r1, [pc, #36]	; (800501c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004ffc:	4b07      	ldr	r3, [pc, #28]	; (800501c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 030f 	and.w	r3, r3, #15
 8005004:	693a      	ldr	r2, [r7, #16]
 8005006:	429a      	cmp	r2, r3
 8005008:	d001      	beq.n	800500e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e000      	b.n	8005010 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3718      	adds	r7, #24
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}
 8005018:	40021000 	.word	0x40021000
 800501c:	40022000 	.word	0x40022000

08005020 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005020:	b480      	push	{r7}
 8005022:	b087      	sub	sp, #28
 8005024:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8005026:	2300      	movs	r3, #0
 8005028:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800502a:	4b2d      	ldr	r3, [pc, #180]	; (80050e0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	f003 0303 	and.w	r3, r3, #3
 8005032:	2b01      	cmp	r3, #1
 8005034:	d118      	bne.n	8005068 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005036:	4b2a      	ldr	r3, [pc, #168]	; (80050e0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0308 	and.w	r3, r3, #8
 800503e:	2b00      	cmp	r3, #0
 8005040:	d107      	bne.n	8005052 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005042:	4b27      	ldr	r3, [pc, #156]	; (80050e0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005044:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005048:	0a1b      	lsrs	r3, r3, #8
 800504a:	f003 030f 	and.w	r3, r3, #15
 800504e:	617b      	str	r3, [r7, #20]
 8005050:	e005      	b.n	800505e <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005052:	4b23      	ldr	r3, [pc, #140]	; (80050e0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	091b      	lsrs	r3, r3, #4
 8005058:	f003 030f 	and.w	r3, r3, #15
 800505c:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800505e:	4a21      	ldr	r2, [pc, #132]	; (80050e4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005066:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005068:	4b1d      	ldr	r3, [pc, #116]	; (80050e0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	f003 0303 	and.w	r3, r3, #3
 8005070:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2b02      	cmp	r3, #2
 8005076:	d003      	beq.n	8005080 <RCC_GetSysClockFreqFromPLLSource+0x60>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2b03      	cmp	r3, #3
 800507c:	d003      	beq.n	8005086 <RCC_GetSysClockFreqFromPLLSource+0x66>
 800507e:	e005      	b.n	800508c <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005080:	4b19      	ldr	r3, [pc, #100]	; (80050e8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005082:	613b      	str	r3, [r7, #16]
    break;
 8005084:	e005      	b.n	8005092 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005086:	4b19      	ldr	r3, [pc, #100]	; (80050ec <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005088:	613b      	str	r3, [r7, #16]
    break;
 800508a:	e002      	b.n	8005092 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	613b      	str	r3, [r7, #16]
    break;
 8005090:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005092:	4b13      	ldr	r3, [pc, #76]	; (80050e0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	091b      	lsrs	r3, r3, #4
 8005098:	f003 030f 	and.w	r3, r3, #15
 800509c:	3301      	adds	r3, #1
 800509e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80050a0:	4b0f      	ldr	r3, [pc, #60]	; (80050e0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	0a1b      	lsrs	r3, r3, #8
 80050a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050aa:	693a      	ldr	r2, [r7, #16]
 80050ac:	fb02 f203 	mul.w	r2, r2, r3
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050b6:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80050b8:	4b09      	ldr	r3, [pc, #36]	; (80050e0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	0e5b      	lsrs	r3, r3, #25
 80050be:	f003 0303 	and.w	r3, r3, #3
 80050c2:	3301      	adds	r3, #1
 80050c4:	005b      	lsls	r3, r3, #1
 80050c6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80050c8:	693a      	ldr	r2, [r7, #16]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80050d0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80050d2:	683b      	ldr	r3, [r7, #0]
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	371c      	adds	r7, #28
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr
 80050e0:	40021000 	.word	0x40021000
 80050e4:	08007958 	.word	0x08007958
 80050e8:	00f42400 	.word	0x00f42400
 80050ec:	007a1200 	.word	0x007a1200

080050f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b086      	sub	sp, #24
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80050f8:	2300      	movs	r3, #0
 80050fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80050fc:	2300      	movs	r3, #0
 80050fe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005108:	2b00      	cmp	r3, #0
 800510a:	d040      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005110:	2b80      	cmp	r3, #128	; 0x80
 8005112:	d02a      	beq.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005114:	2b80      	cmp	r3, #128	; 0x80
 8005116:	d825      	bhi.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005118:	2b60      	cmp	r3, #96	; 0x60
 800511a:	d026      	beq.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800511c:	2b60      	cmp	r3, #96	; 0x60
 800511e:	d821      	bhi.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005120:	2b40      	cmp	r3, #64	; 0x40
 8005122:	d006      	beq.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005124:	2b40      	cmp	r3, #64	; 0x40
 8005126:	d81d      	bhi.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005128:	2b00      	cmp	r3, #0
 800512a:	d009      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800512c:	2b20      	cmp	r3, #32
 800512e:	d010      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005130:	e018      	b.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005132:	4b89      	ldr	r3, [pc, #548]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	4a88      	ldr	r2, [pc, #544]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800513c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800513e:	e015      	b.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	3304      	adds	r3, #4
 8005144:	2100      	movs	r1, #0
 8005146:	4618      	mov	r0, r3
 8005148:	f000 fb12 	bl	8005770 <RCCEx_PLLSAI1_Config>
 800514c:	4603      	mov	r3, r0
 800514e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005150:	e00c      	b.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	3320      	adds	r3, #32
 8005156:	2100      	movs	r1, #0
 8005158:	4618      	mov	r0, r3
 800515a:	f000 fbfd 	bl	8005958 <RCCEx_PLLSAI2_Config>
 800515e:	4603      	mov	r3, r0
 8005160:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005162:	e003      	b.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	74fb      	strb	r3, [r7, #19]
      break;
 8005168:	e000      	b.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800516a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800516c:	7cfb      	ldrb	r3, [r7, #19]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d10b      	bne.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005172:	4b79      	ldr	r3, [pc, #484]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005174:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005178:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005180:	4975      	ldr	r1, [pc, #468]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005182:	4313      	orrs	r3, r2
 8005184:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005188:	e001      	b.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800518a:	7cfb      	ldrb	r3, [r7, #19]
 800518c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d047      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800519e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051a2:	d030      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80051a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051a8:	d82a      	bhi.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80051aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051ae:	d02a      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80051b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051b4:	d824      	bhi.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80051b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051ba:	d008      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0xde>
 80051bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051c0:	d81e      	bhi.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00a      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0xec>
 80051c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051ca:	d010      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80051cc:	e018      	b.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80051ce:	4b62      	ldr	r3, [pc, #392]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	4a61      	ldr	r2, [pc, #388]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051d8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80051da:	e015      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	3304      	adds	r3, #4
 80051e0:	2100      	movs	r1, #0
 80051e2:	4618      	mov	r0, r3
 80051e4:	f000 fac4 	bl	8005770 <RCCEx_PLLSAI1_Config>
 80051e8:	4603      	mov	r3, r0
 80051ea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80051ec:	e00c      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	3320      	adds	r3, #32
 80051f2:	2100      	movs	r1, #0
 80051f4:	4618      	mov	r0, r3
 80051f6:	f000 fbaf 	bl	8005958 <RCCEx_PLLSAI2_Config>
 80051fa:	4603      	mov	r3, r0
 80051fc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80051fe:	e003      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	74fb      	strb	r3, [r7, #19]
      break;
 8005204:	e000      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005206:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005208:	7cfb      	ldrb	r3, [r7, #19]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d10b      	bne.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800520e:	4b52      	ldr	r3, [pc, #328]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005210:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005214:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800521c:	494e      	ldr	r1, [pc, #312]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800521e:	4313      	orrs	r3, r2
 8005220:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005224:	e001      	b.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005226:	7cfb      	ldrb	r3, [r7, #19]
 8005228:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005232:	2b00      	cmp	r3, #0
 8005234:	f000 809f 	beq.w	8005376 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005238:	2300      	movs	r3, #0
 800523a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800523c:	4b46      	ldr	r3, [pc, #280]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800523e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d101      	bne.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005248:	2301      	movs	r3, #1
 800524a:	e000      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800524c:	2300      	movs	r3, #0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d00d      	beq.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005252:	4b41      	ldr	r3, [pc, #260]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005256:	4a40      	ldr	r2, [pc, #256]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800525c:	6593      	str	r3, [r2, #88]	; 0x58
 800525e:	4b3e      	ldr	r3, [pc, #248]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005266:	60bb      	str	r3, [r7, #8]
 8005268:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800526a:	2301      	movs	r3, #1
 800526c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800526e:	4b3b      	ldr	r3, [pc, #236]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a3a      	ldr	r2, [pc, #232]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005274:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005278:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800527a:	f7fc fce1 	bl	8001c40 <HAL_GetTick>
 800527e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005280:	e009      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005282:	f7fc fcdd 	bl	8001c40 <HAL_GetTick>
 8005286:	4602      	mov	r2, r0
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	2b02      	cmp	r3, #2
 800528e:	d902      	bls.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	74fb      	strb	r3, [r7, #19]
        break;
 8005294:	e005      	b.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005296:	4b31      	ldr	r3, [pc, #196]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d0ef      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80052a2:	7cfb      	ldrb	r3, [r7, #19]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d15b      	bne.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80052a8:	4b2b      	ldr	r3, [pc, #172]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052b2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d01f      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052c0:	697a      	ldr	r2, [r7, #20]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d019      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80052c6:	4b24      	ldr	r3, [pc, #144]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052d0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80052d2:	4b21      	ldr	r3, [pc, #132]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052d8:	4a1f      	ldr	r2, [pc, #124]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80052e2:	4b1d      	ldr	r3, [pc, #116]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052e8:	4a1b      	ldr	r2, [pc, #108]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80052f2:	4a19      	ldr	r2, [pc, #100]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	f003 0301 	and.w	r3, r3, #1
 8005300:	2b00      	cmp	r3, #0
 8005302:	d016      	beq.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005304:	f7fc fc9c 	bl	8001c40 <HAL_GetTick>
 8005308:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800530a:	e00b      	b.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800530c:	f7fc fc98 	bl	8001c40 <HAL_GetTick>
 8005310:	4602      	mov	r2, r0
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	f241 3288 	movw	r2, #5000	; 0x1388
 800531a:	4293      	cmp	r3, r2
 800531c:	d902      	bls.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	74fb      	strb	r3, [r7, #19]
            break;
 8005322:	e006      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005324:	4b0c      	ldr	r3, [pc, #48]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800532a:	f003 0302 	and.w	r3, r3, #2
 800532e:	2b00      	cmp	r3, #0
 8005330:	d0ec      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005332:	7cfb      	ldrb	r3, [r7, #19]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d10c      	bne.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005338:	4b07      	ldr	r3, [pc, #28]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800533a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800533e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005348:	4903      	ldr	r1, [pc, #12]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800534a:	4313      	orrs	r3, r2
 800534c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005350:	e008      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005352:	7cfb      	ldrb	r3, [r7, #19]
 8005354:	74bb      	strb	r3, [r7, #18]
 8005356:	e005      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005358:	40021000 	.word	0x40021000
 800535c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005360:	7cfb      	ldrb	r3, [r7, #19]
 8005362:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005364:	7c7b      	ldrb	r3, [r7, #17]
 8005366:	2b01      	cmp	r3, #1
 8005368:	d105      	bne.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800536a:	4ba0      	ldr	r3, [pc, #640]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800536c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800536e:	4a9f      	ldr	r2, [pc, #636]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005370:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005374:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0301 	and.w	r3, r3, #1
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00a      	beq.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005382:	4b9a      	ldr	r3, [pc, #616]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005388:	f023 0203 	bic.w	r2, r3, #3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005390:	4996      	ldr	r1, [pc, #600]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005392:	4313      	orrs	r3, r2
 8005394:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0302 	and.w	r3, r3, #2
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d00a      	beq.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053a4:	4b91      	ldr	r3, [pc, #580]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053aa:	f023 020c 	bic.w	r2, r3, #12
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b2:	498e      	ldr	r1, [pc, #568]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053b4:	4313      	orrs	r3, r2
 80053b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0304 	and.w	r3, r3, #4
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00a      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80053c6:	4b89      	ldr	r3, [pc, #548]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053d4:	4985      	ldr	r1, [pc, #532]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053d6:	4313      	orrs	r3, r2
 80053d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0308 	and.w	r3, r3, #8
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00a      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80053e8:	4b80      	ldr	r3, [pc, #512]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053f6:	497d      	ldr	r1, [pc, #500]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053f8:	4313      	orrs	r3, r2
 80053fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 0310 	and.w	r3, r3, #16
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00a      	beq.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800540a:	4b78      	ldr	r3, [pc, #480]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800540c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005410:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005418:	4974      	ldr	r1, [pc, #464]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800541a:	4313      	orrs	r3, r2
 800541c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0320 	and.w	r3, r3, #32
 8005428:	2b00      	cmp	r3, #0
 800542a:	d00a      	beq.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800542c:	4b6f      	ldr	r3, [pc, #444]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800542e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005432:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800543a:	496c      	ldr	r1, [pc, #432]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800543c:	4313      	orrs	r3, r2
 800543e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00a      	beq.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800544e:	4b67      	ldr	r3, [pc, #412]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005454:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800545c:	4963      	ldr	r1, [pc, #396]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800545e:	4313      	orrs	r3, r2
 8005460:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800546c:	2b00      	cmp	r3, #0
 800546e:	d00a      	beq.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005470:	4b5e      	ldr	r3, [pc, #376]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005476:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800547e:	495b      	ldr	r1, [pc, #364]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005480:	4313      	orrs	r3, r2
 8005482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00a      	beq.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005492:	4b56      	ldr	r3, [pc, #344]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005498:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054a0:	4952      	ldr	r1, [pc, #328]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054a2:	4313      	orrs	r3, r2
 80054a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d00a      	beq.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80054b4:	4b4d      	ldr	r3, [pc, #308]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054c2:	494a      	ldr	r1, [pc, #296]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054c4:	4313      	orrs	r3, r2
 80054c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d00a      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80054d6:	4b45      	ldr	r3, [pc, #276]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054e4:	4941      	ldr	r1, [pc, #260]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054e6:	4313      	orrs	r3, r2
 80054e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d00a      	beq.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80054f8:	4b3c      	ldr	r3, [pc, #240]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054fe:	f023 0203 	bic.w	r2, r3, #3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005506:	4939      	ldr	r1, [pc, #228]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005508:	4313      	orrs	r3, r2
 800550a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d028      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800551a:	4b34      	ldr	r3, [pc, #208]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800551c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005520:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005528:	4930      	ldr	r1, [pc, #192]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800552a:	4313      	orrs	r3, r2
 800552c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005534:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005538:	d106      	bne.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800553a:	4b2c      	ldr	r3, [pc, #176]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	4a2b      	ldr	r2, [pc, #172]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005540:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005544:	60d3      	str	r3, [r2, #12]
 8005546:	e011      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800554c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005550:	d10c      	bne.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	3304      	adds	r3, #4
 8005556:	2101      	movs	r1, #1
 8005558:	4618      	mov	r0, r3
 800555a:	f000 f909 	bl	8005770 <RCCEx_PLLSAI1_Config>
 800555e:	4603      	mov	r3, r0
 8005560:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005562:	7cfb      	ldrb	r3, [r7, #19]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d001      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005568:	7cfb      	ldrb	r3, [r7, #19]
 800556a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005574:	2b00      	cmp	r3, #0
 8005576:	d04d      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800557c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005580:	d108      	bne.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005582:	4b1a      	ldr	r3, [pc, #104]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005584:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005588:	4a18      	ldr	r2, [pc, #96]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800558a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800558e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005592:	e012      	b.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005594:	4b15      	ldr	r3, [pc, #84]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005596:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800559a:	4a14      	ldr	r2, [pc, #80]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800559c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055a0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80055a4:	4b11      	ldr	r3, [pc, #68]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055b2:	490e      	ldr	r1, [pc, #56]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055c2:	d106      	bne.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055c4:	4b09      	ldr	r3, [pc, #36]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	4a08      	ldr	r2, [pc, #32]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055ce:	60d3      	str	r3, [r2, #12]
 80055d0:	e020      	b.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055da:	d109      	bne.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80055dc:	4b03      	ldr	r3, [pc, #12]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	4a02      	ldr	r2, [pc, #8]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055e6:	60d3      	str	r3, [r2, #12]
 80055e8:	e014      	b.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80055ea:	bf00      	nop
 80055ec:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055f8:	d10c      	bne.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	3304      	adds	r3, #4
 80055fe:	2101      	movs	r1, #1
 8005600:	4618      	mov	r0, r3
 8005602:	f000 f8b5 	bl	8005770 <RCCEx_PLLSAI1_Config>
 8005606:	4603      	mov	r3, r0
 8005608:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800560a:	7cfb      	ldrb	r3, [r7, #19]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d001      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005610:	7cfb      	ldrb	r3, [r7, #19]
 8005612:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800561c:	2b00      	cmp	r3, #0
 800561e:	d028      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005620:	4b4a      	ldr	r3, [pc, #296]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005626:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800562e:	4947      	ldr	r1, [pc, #284]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005630:	4313      	orrs	r3, r2
 8005632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800563a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800563e:	d106      	bne.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005640:	4b42      	ldr	r3, [pc, #264]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	4a41      	ldr	r2, [pc, #260]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005646:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800564a:	60d3      	str	r3, [r2, #12]
 800564c:	e011      	b.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005652:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005656:	d10c      	bne.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	3304      	adds	r3, #4
 800565c:	2101      	movs	r1, #1
 800565e:	4618      	mov	r0, r3
 8005660:	f000 f886 	bl	8005770 <RCCEx_PLLSAI1_Config>
 8005664:	4603      	mov	r3, r0
 8005666:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005668:	7cfb      	ldrb	r3, [r7, #19]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d001      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800566e:	7cfb      	ldrb	r3, [r7, #19]
 8005670:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d01e      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800567e:	4b33      	ldr	r3, [pc, #204]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005684:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800568e:	492f      	ldr	r1, [pc, #188]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005690:	4313      	orrs	r3, r2
 8005692:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800569c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056a0:	d10c      	bne.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	3304      	adds	r3, #4
 80056a6:	2102      	movs	r1, #2
 80056a8:	4618      	mov	r0, r3
 80056aa:	f000 f861 	bl	8005770 <RCCEx_PLLSAI1_Config>
 80056ae:	4603      	mov	r3, r0
 80056b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80056b2:	7cfb      	ldrb	r3, [r7, #19]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d001      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80056b8:	7cfb      	ldrb	r3, [r7, #19]
 80056ba:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d00b      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80056c8:	4b20      	ldr	r3, [pc, #128]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056ce:	f023 0204 	bic.w	r2, r3, #4
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056d8:	491c      	ldr	r1, [pc, #112]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056da:	4313      	orrs	r3, r2
 80056dc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d00b      	beq.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80056ec:	4b17      	ldr	r3, [pc, #92]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056f2:	f023 0218 	bic.w	r2, r3, #24
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056fc:	4913      	ldr	r1, [pc, #76]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056fe:	4313      	orrs	r3, r2
 8005700:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800570c:	2b00      	cmp	r3, #0
 800570e:	d017      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005710:	4b0e      	ldr	r3, [pc, #56]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005712:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005716:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005720:	490a      	ldr	r1, [pc, #40]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005722:	4313      	orrs	r3, r2
 8005724:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800572e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005732:	d105      	bne.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005734:	4b05      	ldr	r3, [pc, #20]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	4a04      	ldr	r2, [pc, #16]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800573a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800573e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005740:	7cbb      	ldrb	r3, [r7, #18]
}
 8005742:	4618      	mov	r0, r3
 8005744:	3718      	adds	r7, #24
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	40021000 	.word	0x40021000

08005750 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005750:	b480      	push	{r7}
 8005752:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005754:	4b05      	ldr	r3, [pc, #20]	; (800576c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a04      	ldr	r2, [pc, #16]	; (800576c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800575a:	f043 0304 	orr.w	r3, r3, #4
 800575e:	6013      	str	r3, [r2, #0]
}
 8005760:	bf00      	nop
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
 800576a:	bf00      	nop
 800576c:	40021000 	.word	0x40021000

08005770 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800577a:	2300      	movs	r3, #0
 800577c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800577e:	4b72      	ldr	r3, [pc, #456]	; (8005948 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	f003 0303 	and.w	r3, r3, #3
 8005786:	2b00      	cmp	r3, #0
 8005788:	d00e      	beq.n	80057a8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800578a:	4b6f      	ldr	r3, [pc, #444]	; (8005948 <RCCEx_PLLSAI1_Config+0x1d8>)
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	f003 0203 	and.w	r2, r3, #3
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	429a      	cmp	r2, r3
 8005798:	d103      	bne.n	80057a2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
       ||
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d142      	bne.n	8005828 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	73fb      	strb	r3, [r7, #15]
 80057a6:	e03f      	b.n	8005828 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	2b03      	cmp	r3, #3
 80057ae:	d018      	beq.n	80057e2 <RCCEx_PLLSAI1_Config+0x72>
 80057b0:	2b03      	cmp	r3, #3
 80057b2:	d825      	bhi.n	8005800 <RCCEx_PLLSAI1_Config+0x90>
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d002      	beq.n	80057be <RCCEx_PLLSAI1_Config+0x4e>
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d009      	beq.n	80057d0 <RCCEx_PLLSAI1_Config+0x60>
 80057bc:	e020      	b.n	8005800 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80057be:	4b62      	ldr	r3, [pc, #392]	; (8005948 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 0302 	and.w	r3, r3, #2
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d11d      	bne.n	8005806 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057ce:	e01a      	b.n	8005806 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80057d0:	4b5d      	ldr	r3, [pc, #372]	; (8005948 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d116      	bne.n	800580a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057e0:	e013      	b.n	800580a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80057e2:	4b59      	ldr	r3, [pc, #356]	; (8005948 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d10f      	bne.n	800580e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80057ee:	4b56      	ldr	r3, [pc, #344]	; (8005948 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d109      	bne.n	800580e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80057fe:	e006      	b.n	800580e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	73fb      	strb	r3, [r7, #15]
      break;
 8005804:	e004      	b.n	8005810 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005806:	bf00      	nop
 8005808:	e002      	b.n	8005810 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800580a:	bf00      	nop
 800580c:	e000      	b.n	8005810 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800580e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005810:	7bfb      	ldrb	r3, [r7, #15]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d108      	bne.n	8005828 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005816:	4b4c      	ldr	r3, [pc, #304]	; (8005948 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	f023 0203 	bic.w	r2, r3, #3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4949      	ldr	r1, [pc, #292]	; (8005948 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005824:	4313      	orrs	r3, r2
 8005826:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005828:	7bfb      	ldrb	r3, [r7, #15]
 800582a:	2b00      	cmp	r3, #0
 800582c:	f040 8086 	bne.w	800593c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005830:	4b45      	ldr	r3, [pc, #276]	; (8005948 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a44      	ldr	r2, [pc, #272]	; (8005948 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005836:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800583a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800583c:	f7fc fa00 	bl	8001c40 <HAL_GetTick>
 8005840:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005842:	e009      	b.n	8005858 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005844:	f7fc f9fc 	bl	8001c40 <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	2b02      	cmp	r3, #2
 8005850:	d902      	bls.n	8005858 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	73fb      	strb	r3, [r7, #15]
        break;
 8005856:	e005      	b.n	8005864 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005858:	4b3b      	ldr	r3, [pc, #236]	; (8005948 <RCCEx_PLLSAI1_Config+0x1d8>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005860:	2b00      	cmp	r3, #0
 8005862:	d1ef      	bne.n	8005844 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005864:	7bfb      	ldrb	r3, [r7, #15]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d168      	bne.n	800593c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d113      	bne.n	8005898 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005870:	4b35      	ldr	r3, [pc, #212]	; (8005948 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005872:	691a      	ldr	r2, [r3, #16]
 8005874:	4b35      	ldr	r3, [pc, #212]	; (800594c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005876:	4013      	ands	r3, r2
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	6892      	ldr	r2, [r2, #8]
 800587c:	0211      	lsls	r1, r2, #8
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	68d2      	ldr	r2, [r2, #12]
 8005882:	06d2      	lsls	r2, r2, #27
 8005884:	4311      	orrs	r1, r2
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	6852      	ldr	r2, [r2, #4]
 800588a:	3a01      	subs	r2, #1
 800588c:	0112      	lsls	r2, r2, #4
 800588e:	430a      	orrs	r2, r1
 8005890:	492d      	ldr	r1, [pc, #180]	; (8005948 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005892:	4313      	orrs	r3, r2
 8005894:	610b      	str	r3, [r1, #16]
 8005896:	e02d      	b.n	80058f4 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	2b01      	cmp	r3, #1
 800589c:	d115      	bne.n	80058ca <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800589e:	4b2a      	ldr	r3, [pc, #168]	; (8005948 <RCCEx_PLLSAI1_Config+0x1d8>)
 80058a0:	691a      	ldr	r2, [r3, #16]
 80058a2:	4b2b      	ldr	r3, [pc, #172]	; (8005950 <RCCEx_PLLSAI1_Config+0x1e0>)
 80058a4:	4013      	ands	r3, r2
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	6892      	ldr	r2, [r2, #8]
 80058aa:	0211      	lsls	r1, r2, #8
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	6912      	ldr	r2, [r2, #16]
 80058b0:	0852      	lsrs	r2, r2, #1
 80058b2:	3a01      	subs	r2, #1
 80058b4:	0552      	lsls	r2, r2, #21
 80058b6:	4311      	orrs	r1, r2
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	6852      	ldr	r2, [r2, #4]
 80058bc:	3a01      	subs	r2, #1
 80058be:	0112      	lsls	r2, r2, #4
 80058c0:	430a      	orrs	r2, r1
 80058c2:	4921      	ldr	r1, [pc, #132]	; (8005948 <RCCEx_PLLSAI1_Config+0x1d8>)
 80058c4:	4313      	orrs	r3, r2
 80058c6:	610b      	str	r3, [r1, #16]
 80058c8:	e014      	b.n	80058f4 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80058ca:	4b1f      	ldr	r3, [pc, #124]	; (8005948 <RCCEx_PLLSAI1_Config+0x1d8>)
 80058cc:	691a      	ldr	r2, [r3, #16]
 80058ce:	4b21      	ldr	r3, [pc, #132]	; (8005954 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058d0:	4013      	ands	r3, r2
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	6892      	ldr	r2, [r2, #8]
 80058d6:	0211      	lsls	r1, r2, #8
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	6952      	ldr	r2, [r2, #20]
 80058dc:	0852      	lsrs	r2, r2, #1
 80058de:	3a01      	subs	r2, #1
 80058e0:	0652      	lsls	r2, r2, #25
 80058e2:	4311      	orrs	r1, r2
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	6852      	ldr	r2, [r2, #4]
 80058e8:	3a01      	subs	r2, #1
 80058ea:	0112      	lsls	r2, r2, #4
 80058ec:	430a      	orrs	r2, r1
 80058ee:	4916      	ldr	r1, [pc, #88]	; (8005948 <RCCEx_PLLSAI1_Config+0x1d8>)
 80058f0:	4313      	orrs	r3, r2
 80058f2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80058f4:	4b14      	ldr	r3, [pc, #80]	; (8005948 <RCCEx_PLLSAI1_Config+0x1d8>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a13      	ldr	r2, [pc, #76]	; (8005948 <RCCEx_PLLSAI1_Config+0x1d8>)
 80058fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80058fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005900:	f7fc f99e 	bl	8001c40 <HAL_GetTick>
 8005904:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005906:	e009      	b.n	800591c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005908:	f7fc f99a 	bl	8001c40 <HAL_GetTick>
 800590c:	4602      	mov	r2, r0
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	2b02      	cmp	r3, #2
 8005914:	d902      	bls.n	800591c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	73fb      	strb	r3, [r7, #15]
          break;
 800591a:	e005      	b.n	8005928 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800591c:	4b0a      	ldr	r3, [pc, #40]	; (8005948 <RCCEx_PLLSAI1_Config+0x1d8>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005924:	2b00      	cmp	r3, #0
 8005926:	d0ef      	beq.n	8005908 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005928:	7bfb      	ldrb	r3, [r7, #15]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d106      	bne.n	800593c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800592e:	4b06      	ldr	r3, [pc, #24]	; (8005948 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005930:	691a      	ldr	r2, [r3, #16]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	699b      	ldr	r3, [r3, #24]
 8005936:	4904      	ldr	r1, [pc, #16]	; (8005948 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005938:	4313      	orrs	r3, r2
 800593a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800593c:	7bfb      	ldrb	r3, [r7, #15]
}
 800593e:	4618      	mov	r0, r3
 8005940:	3710      	adds	r7, #16
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	40021000 	.word	0x40021000
 800594c:	07ff800f 	.word	0x07ff800f
 8005950:	ff9f800f 	.word	0xff9f800f
 8005954:	f9ff800f 	.word	0xf9ff800f

08005958 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b084      	sub	sp, #16
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005962:	2300      	movs	r3, #0
 8005964:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005966:	4b72      	ldr	r3, [pc, #456]	; (8005b30 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	f003 0303 	and.w	r3, r3, #3
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00e      	beq.n	8005990 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005972:	4b6f      	ldr	r3, [pc, #444]	; (8005b30 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	f003 0203 	and.w	r2, r3, #3
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	429a      	cmp	r2, r3
 8005980:	d103      	bne.n	800598a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
       ||
 8005986:	2b00      	cmp	r3, #0
 8005988:	d142      	bne.n	8005a10 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	73fb      	strb	r3, [r7, #15]
 800598e:	e03f      	b.n	8005a10 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2b03      	cmp	r3, #3
 8005996:	d018      	beq.n	80059ca <RCCEx_PLLSAI2_Config+0x72>
 8005998:	2b03      	cmp	r3, #3
 800599a:	d825      	bhi.n	80059e8 <RCCEx_PLLSAI2_Config+0x90>
 800599c:	2b01      	cmp	r3, #1
 800599e:	d002      	beq.n	80059a6 <RCCEx_PLLSAI2_Config+0x4e>
 80059a0:	2b02      	cmp	r3, #2
 80059a2:	d009      	beq.n	80059b8 <RCCEx_PLLSAI2_Config+0x60>
 80059a4:	e020      	b.n	80059e8 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80059a6:	4b62      	ldr	r3, [pc, #392]	; (8005b30 <RCCEx_PLLSAI2_Config+0x1d8>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 0302 	and.w	r3, r3, #2
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d11d      	bne.n	80059ee <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059b6:	e01a      	b.n	80059ee <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80059b8:	4b5d      	ldr	r3, [pc, #372]	; (8005b30 <RCCEx_PLLSAI2_Config+0x1d8>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d116      	bne.n	80059f2 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059c8:	e013      	b.n	80059f2 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80059ca:	4b59      	ldr	r3, [pc, #356]	; (8005b30 <RCCEx_PLLSAI2_Config+0x1d8>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d10f      	bne.n	80059f6 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80059d6:	4b56      	ldr	r3, [pc, #344]	; (8005b30 <RCCEx_PLLSAI2_Config+0x1d8>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d109      	bne.n	80059f6 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80059e6:	e006      	b.n	80059f6 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	73fb      	strb	r3, [r7, #15]
      break;
 80059ec:	e004      	b.n	80059f8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80059ee:	bf00      	nop
 80059f0:	e002      	b.n	80059f8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80059f2:	bf00      	nop
 80059f4:	e000      	b.n	80059f8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80059f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80059f8:	7bfb      	ldrb	r3, [r7, #15]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d108      	bne.n	8005a10 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80059fe:	4b4c      	ldr	r3, [pc, #304]	; (8005b30 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	f023 0203 	bic.w	r2, r3, #3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4949      	ldr	r1, [pc, #292]	; (8005b30 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005a10:	7bfb      	ldrb	r3, [r7, #15]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	f040 8086 	bne.w	8005b24 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005a18:	4b45      	ldr	r3, [pc, #276]	; (8005b30 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a44      	ldr	r2, [pc, #272]	; (8005b30 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a24:	f7fc f90c 	bl	8001c40 <HAL_GetTick>
 8005a28:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005a2a:	e009      	b.n	8005a40 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005a2c:	f7fc f908 	bl	8001c40 <HAL_GetTick>
 8005a30:	4602      	mov	r2, r0
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d902      	bls.n	8005a40 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	73fb      	strb	r3, [r7, #15]
        break;
 8005a3e:	e005      	b.n	8005a4c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005a40:	4b3b      	ldr	r3, [pc, #236]	; (8005b30 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d1ef      	bne.n	8005a2c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005a4c:	7bfb      	ldrb	r3, [r7, #15]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d168      	bne.n	8005b24 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d113      	bne.n	8005a80 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005a58:	4b35      	ldr	r3, [pc, #212]	; (8005b30 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a5a:	695a      	ldr	r2, [r3, #20]
 8005a5c:	4b35      	ldr	r3, [pc, #212]	; (8005b34 <RCCEx_PLLSAI2_Config+0x1dc>)
 8005a5e:	4013      	ands	r3, r2
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	6892      	ldr	r2, [r2, #8]
 8005a64:	0211      	lsls	r1, r2, #8
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	68d2      	ldr	r2, [r2, #12]
 8005a6a:	06d2      	lsls	r2, r2, #27
 8005a6c:	4311      	orrs	r1, r2
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	6852      	ldr	r2, [r2, #4]
 8005a72:	3a01      	subs	r2, #1
 8005a74:	0112      	lsls	r2, r2, #4
 8005a76:	430a      	orrs	r2, r1
 8005a78:	492d      	ldr	r1, [pc, #180]	; (8005b30 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	614b      	str	r3, [r1, #20]
 8005a7e:	e02d      	b.n	8005adc <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d115      	bne.n	8005ab2 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005a86:	4b2a      	ldr	r3, [pc, #168]	; (8005b30 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a88:	695a      	ldr	r2, [r3, #20]
 8005a8a:	4b2b      	ldr	r3, [pc, #172]	; (8005b38 <RCCEx_PLLSAI2_Config+0x1e0>)
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	6892      	ldr	r2, [r2, #8]
 8005a92:	0211      	lsls	r1, r2, #8
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	6912      	ldr	r2, [r2, #16]
 8005a98:	0852      	lsrs	r2, r2, #1
 8005a9a:	3a01      	subs	r2, #1
 8005a9c:	0552      	lsls	r2, r2, #21
 8005a9e:	4311      	orrs	r1, r2
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	6852      	ldr	r2, [r2, #4]
 8005aa4:	3a01      	subs	r2, #1
 8005aa6:	0112      	lsls	r2, r2, #4
 8005aa8:	430a      	orrs	r2, r1
 8005aaa:	4921      	ldr	r1, [pc, #132]	; (8005b30 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005aac:	4313      	orrs	r3, r2
 8005aae:	614b      	str	r3, [r1, #20]
 8005ab0:	e014      	b.n	8005adc <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005ab2:	4b1f      	ldr	r3, [pc, #124]	; (8005b30 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ab4:	695a      	ldr	r2, [r3, #20]
 8005ab6:	4b21      	ldr	r3, [pc, #132]	; (8005b3c <RCCEx_PLLSAI2_Config+0x1e4>)
 8005ab8:	4013      	ands	r3, r2
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	6892      	ldr	r2, [r2, #8]
 8005abe:	0211      	lsls	r1, r2, #8
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	6952      	ldr	r2, [r2, #20]
 8005ac4:	0852      	lsrs	r2, r2, #1
 8005ac6:	3a01      	subs	r2, #1
 8005ac8:	0652      	lsls	r2, r2, #25
 8005aca:	4311      	orrs	r1, r2
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	6852      	ldr	r2, [r2, #4]
 8005ad0:	3a01      	subs	r2, #1
 8005ad2:	0112      	lsls	r2, r2, #4
 8005ad4:	430a      	orrs	r2, r1
 8005ad6:	4916      	ldr	r1, [pc, #88]	; (8005b30 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005adc:	4b14      	ldr	r3, [pc, #80]	; (8005b30 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a13      	ldr	r2, [pc, #76]	; (8005b30 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ae2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ae6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ae8:	f7fc f8aa 	bl	8001c40 <HAL_GetTick>
 8005aec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005aee:	e009      	b.n	8005b04 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005af0:	f7fc f8a6 	bl	8001c40 <HAL_GetTick>
 8005af4:	4602      	mov	r2, r0
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d902      	bls.n	8005b04 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	73fb      	strb	r3, [r7, #15]
          break;
 8005b02:	e005      	b.n	8005b10 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005b04:	4b0a      	ldr	r3, [pc, #40]	; (8005b30 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d0ef      	beq.n	8005af0 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005b10:	7bfb      	ldrb	r3, [r7, #15]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d106      	bne.n	8005b24 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005b16:	4b06      	ldr	r3, [pc, #24]	; (8005b30 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b18:	695a      	ldr	r2, [r3, #20]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	699b      	ldr	r3, [r3, #24]
 8005b1e:	4904      	ldr	r1, [pc, #16]	; (8005b30 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b20:	4313      	orrs	r3, r2
 8005b22:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3710      	adds	r7, #16
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	40021000 	.word	0x40021000
 8005b34:	07ff800f 	.word	0x07ff800f
 8005b38:	ff9f800f 	.word	0xff9f800f
 8005b3c:	f9ff800f 	.word	0xf9ff800f

08005b40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d101      	bne.n	8005b52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e095      	b.n	8005c7e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d108      	bne.n	8005b6c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b62:	d009      	beq.n	8005b78 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	61da      	str	r2, [r3, #28]
 8005b6a:	e005      	b.n	8005b78 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d106      	bne.n	8005b98 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f7fb fd52 	bl	800163c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2202      	movs	r2, #2
 8005b9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005bb8:	d902      	bls.n	8005bc0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	60fb      	str	r3, [r7, #12]
 8005bbe:	e002      	b.n	8005bc6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005bc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005bc4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005bce:	d007      	beq.n	8005be0 <HAL_SPI_Init+0xa0>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005bd8:	d002      	beq.n	8005be0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005bf0:	431a      	orrs	r2, r3
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	f003 0302 	and.w	r3, r3, #2
 8005bfa:	431a      	orrs	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	695b      	ldr	r3, [r3, #20]
 8005c00:	f003 0301 	and.w	r3, r3, #1
 8005c04:	431a      	orrs	r2, r3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	699b      	ldr	r3, [r3, #24]
 8005c0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c0e:	431a      	orrs	r2, r3
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	69db      	ldr	r3, [r3, #28]
 8005c14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c18:	431a      	orrs	r2, r3
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a1b      	ldr	r3, [r3, #32]
 8005c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c22:	ea42 0103 	orr.w	r1, r2, r3
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c2a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	430a      	orrs	r2, r1
 8005c34:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	699b      	ldr	r3, [r3, #24]
 8005c3a:	0c1b      	lsrs	r3, r3, #16
 8005c3c:	f003 0204 	and.w	r2, r3, #4
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c44:	f003 0310 	and.w	r3, r3, #16
 8005c48:	431a      	orrs	r2, r3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c4e:	f003 0308 	and.w	r3, r3, #8
 8005c52:	431a      	orrs	r2, r3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005c5c:	ea42 0103 	orr.w	r1, r2, r3
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	430a      	orrs	r2, r1
 8005c6c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3710      	adds	r7, #16
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}

08005c86 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c86:	b580      	push	{r7, lr}
 8005c88:	b082      	sub	sp, #8
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d101      	bne.n	8005c98 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	e049      	b.n	8005d2c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d106      	bne.n	8005cb2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f7fb fd09 	bl	80016c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2202      	movs	r2, #2
 8005cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	3304      	adds	r3, #4
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	4610      	mov	r0, r2
 8005cc6:	f000 fb7b 	bl	80063c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2201      	movs	r2, #1
 8005cee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2201      	movs	r2, #1
 8005d06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2201      	movs	r2, #1
 8005d16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2201      	movs	r2, #1
 8005d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d2a:	2300      	movs	r3, #0
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3708      	adds	r7, #8
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b082      	sub	sp, #8
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d101      	bne.n	8005d46 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e049      	b.n	8005dda <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d106      	bne.n	8005d60 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 f841 	bl	8005de2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2202      	movs	r2, #2
 8005d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	3304      	adds	r3, #4
 8005d70:	4619      	mov	r1, r3
 8005d72:	4610      	mov	r0, r2
 8005d74:	f000 fb24 	bl	80063c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3708      	adds	r7, #8
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}

08005de2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005de2:	b480      	push	{r7}
 8005de4:	b083      	sub	sp, #12
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005dea:	bf00      	nop
 8005dec:	370c      	adds	r7, #12
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr
	...

08005df8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d109      	bne.n	8005e1c <HAL_TIM_PWM_Start+0x24>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	bf14      	ite	ne
 8005e14:	2301      	movne	r3, #1
 8005e16:	2300      	moveq	r3, #0
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	e03c      	b.n	8005e96 <HAL_TIM_PWM_Start+0x9e>
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	2b04      	cmp	r3, #4
 8005e20:	d109      	bne.n	8005e36 <HAL_TIM_PWM_Start+0x3e>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	bf14      	ite	ne
 8005e2e:	2301      	movne	r3, #1
 8005e30:	2300      	moveq	r3, #0
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	e02f      	b.n	8005e96 <HAL_TIM_PWM_Start+0x9e>
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	2b08      	cmp	r3, #8
 8005e3a:	d109      	bne.n	8005e50 <HAL_TIM_PWM_Start+0x58>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	bf14      	ite	ne
 8005e48:	2301      	movne	r3, #1
 8005e4a:	2300      	moveq	r3, #0
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	e022      	b.n	8005e96 <HAL_TIM_PWM_Start+0x9e>
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	2b0c      	cmp	r3, #12
 8005e54:	d109      	bne.n	8005e6a <HAL_TIM_PWM_Start+0x72>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	bf14      	ite	ne
 8005e62:	2301      	movne	r3, #1
 8005e64:	2300      	moveq	r3, #0
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	e015      	b.n	8005e96 <HAL_TIM_PWM_Start+0x9e>
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	2b10      	cmp	r3, #16
 8005e6e:	d109      	bne.n	8005e84 <HAL_TIM_PWM_Start+0x8c>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	bf14      	ite	ne
 8005e7c:	2301      	movne	r3, #1
 8005e7e:	2300      	moveq	r3, #0
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	e008      	b.n	8005e96 <HAL_TIM_PWM_Start+0x9e>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	bf14      	ite	ne
 8005e90:	2301      	movne	r3, #1
 8005e92:	2300      	moveq	r3, #0
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d001      	beq.n	8005e9e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e09c      	b.n	8005fd8 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d104      	bne.n	8005eae <HAL_TIM_PWM_Start+0xb6>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2202      	movs	r2, #2
 8005ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005eac:	e023      	b.n	8005ef6 <HAL_TIM_PWM_Start+0xfe>
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	2b04      	cmp	r3, #4
 8005eb2:	d104      	bne.n	8005ebe <HAL_TIM_PWM_Start+0xc6>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2202      	movs	r2, #2
 8005eb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ebc:	e01b      	b.n	8005ef6 <HAL_TIM_PWM_Start+0xfe>
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	2b08      	cmp	r3, #8
 8005ec2:	d104      	bne.n	8005ece <HAL_TIM_PWM_Start+0xd6>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2202      	movs	r2, #2
 8005ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ecc:	e013      	b.n	8005ef6 <HAL_TIM_PWM_Start+0xfe>
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	2b0c      	cmp	r3, #12
 8005ed2:	d104      	bne.n	8005ede <HAL_TIM_PWM_Start+0xe6>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2202      	movs	r2, #2
 8005ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005edc:	e00b      	b.n	8005ef6 <HAL_TIM_PWM_Start+0xfe>
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	2b10      	cmp	r3, #16
 8005ee2:	d104      	bne.n	8005eee <HAL_TIM_PWM_Start+0xf6>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2202      	movs	r2, #2
 8005ee8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005eec:	e003      	b.n	8005ef6 <HAL_TIM_PWM_Start+0xfe>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2202      	movs	r2, #2
 8005ef2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2201      	movs	r2, #1
 8005efc:	6839      	ldr	r1, [r7, #0]
 8005efe:	4618      	mov	r0, r3
 8005f00:	f000 fe68 	bl	8006bd4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a35      	ldr	r2, [pc, #212]	; (8005fe0 <HAL_TIM_PWM_Start+0x1e8>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d013      	beq.n	8005f36 <HAL_TIM_PWM_Start+0x13e>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a34      	ldr	r2, [pc, #208]	; (8005fe4 <HAL_TIM_PWM_Start+0x1ec>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d00e      	beq.n	8005f36 <HAL_TIM_PWM_Start+0x13e>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a32      	ldr	r2, [pc, #200]	; (8005fe8 <HAL_TIM_PWM_Start+0x1f0>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d009      	beq.n	8005f36 <HAL_TIM_PWM_Start+0x13e>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a31      	ldr	r2, [pc, #196]	; (8005fec <HAL_TIM_PWM_Start+0x1f4>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d004      	beq.n	8005f36 <HAL_TIM_PWM_Start+0x13e>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a2f      	ldr	r2, [pc, #188]	; (8005ff0 <HAL_TIM_PWM_Start+0x1f8>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d101      	bne.n	8005f3a <HAL_TIM_PWM_Start+0x142>
 8005f36:	2301      	movs	r3, #1
 8005f38:	e000      	b.n	8005f3c <HAL_TIM_PWM_Start+0x144>
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d007      	beq.n	8005f50 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f4e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a22      	ldr	r2, [pc, #136]	; (8005fe0 <HAL_TIM_PWM_Start+0x1e8>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d01d      	beq.n	8005f96 <HAL_TIM_PWM_Start+0x19e>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f62:	d018      	beq.n	8005f96 <HAL_TIM_PWM_Start+0x19e>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a22      	ldr	r2, [pc, #136]	; (8005ff4 <HAL_TIM_PWM_Start+0x1fc>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d013      	beq.n	8005f96 <HAL_TIM_PWM_Start+0x19e>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a21      	ldr	r2, [pc, #132]	; (8005ff8 <HAL_TIM_PWM_Start+0x200>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d00e      	beq.n	8005f96 <HAL_TIM_PWM_Start+0x19e>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a1f      	ldr	r2, [pc, #124]	; (8005ffc <HAL_TIM_PWM_Start+0x204>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d009      	beq.n	8005f96 <HAL_TIM_PWM_Start+0x19e>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a17      	ldr	r2, [pc, #92]	; (8005fe4 <HAL_TIM_PWM_Start+0x1ec>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d004      	beq.n	8005f96 <HAL_TIM_PWM_Start+0x19e>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a15      	ldr	r2, [pc, #84]	; (8005fe8 <HAL_TIM_PWM_Start+0x1f0>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d115      	bne.n	8005fc2 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	689a      	ldr	r2, [r3, #8]
 8005f9c:	4b18      	ldr	r3, [pc, #96]	; (8006000 <HAL_TIM_PWM_Start+0x208>)
 8005f9e:	4013      	ands	r3, r2
 8005fa0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2b06      	cmp	r3, #6
 8005fa6:	d015      	beq.n	8005fd4 <HAL_TIM_PWM_Start+0x1dc>
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fae:	d011      	beq.n	8005fd4 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f042 0201 	orr.w	r2, r2, #1
 8005fbe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fc0:	e008      	b.n	8005fd4 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f042 0201 	orr.w	r2, r2, #1
 8005fd0:	601a      	str	r2, [r3, #0]
 8005fd2:	e000      	b.n	8005fd6 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fd4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3710      	adds	r7, #16
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	40012c00 	.word	0x40012c00
 8005fe4:	40013400 	.word	0x40013400
 8005fe8:	40014000 	.word	0x40014000
 8005fec:	40014400 	.word	0x40014400
 8005ff0:	40014800 	.word	0x40014800
 8005ff4:	40000400 	.word	0x40000400
 8005ff8:	40000800 	.word	0x40000800
 8005ffc:	40000c00 	.word	0x40000c00
 8006000:	00010007 	.word	0x00010007

08006004 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b086      	sub	sp, #24
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006010:	2300      	movs	r3, #0
 8006012:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800601a:	2b01      	cmp	r3, #1
 800601c:	d101      	bne.n	8006022 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800601e:	2302      	movs	r3, #2
 8006020:	e0ff      	b.n	8006222 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2201      	movs	r2, #1
 8006026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2b14      	cmp	r3, #20
 800602e:	f200 80f0 	bhi.w	8006212 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006032:	a201      	add	r2, pc, #4	; (adr r2, 8006038 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006038:	0800608d 	.word	0x0800608d
 800603c:	08006213 	.word	0x08006213
 8006040:	08006213 	.word	0x08006213
 8006044:	08006213 	.word	0x08006213
 8006048:	080060cd 	.word	0x080060cd
 800604c:	08006213 	.word	0x08006213
 8006050:	08006213 	.word	0x08006213
 8006054:	08006213 	.word	0x08006213
 8006058:	0800610f 	.word	0x0800610f
 800605c:	08006213 	.word	0x08006213
 8006060:	08006213 	.word	0x08006213
 8006064:	08006213 	.word	0x08006213
 8006068:	0800614f 	.word	0x0800614f
 800606c:	08006213 	.word	0x08006213
 8006070:	08006213 	.word	0x08006213
 8006074:	08006213 	.word	0x08006213
 8006078:	08006191 	.word	0x08006191
 800607c:	08006213 	.word	0x08006213
 8006080:	08006213 	.word	0x08006213
 8006084:	08006213 	.word	0x08006213
 8006088:	080061d1 	.word	0x080061d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	68b9      	ldr	r1, [r7, #8]
 8006092:	4618      	mov	r0, r3
 8006094:	f000 fa2e 	bl	80064f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	699a      	ldr	r2, [r3, #24]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f042 0208 	orr.w	r2, r2, #8
 80060a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	699a      	ldr	r2, [r3, #24]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f022 0204 	bic.w	r2, r2, #4
 80060b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	6999      	ldr	r1, [r3, #24]
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	691a      	ldr	r2, [r3, #16]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	430a      	orrs	r2, r1
 80060c8:	619a      	str	r2, [r3, #24]
      break;
 80060ca:	e0a5      	b.n	8006218 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68b9      	ldr	r1, [r7, #8]
 80060d2:	4618      	mov	r0, r3
 80060d4:	f000 fa9e 	bl	8006614 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	699a      	ldr	r2, [r3, #24]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	699a      	ldr	r2, [r3, #24]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	6999      	ldr	r1, [r3, #24]
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	021a      	lsls	r2, r3, #8
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	430a      	orrs	r2, r1
 800610a:	619a      	str	r2, [r3, #24]
      break;
 800610c:	e084      	b.n	8006218 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68b9      	ldr	r1, [r7, #8]
 8006114:	4618      	mov	r0, r3
 8006116:	f000 fb07 	bl	8006728 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	69da      	ldr	r2, [r3, #28]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f042 0208 	orr.w	r2, r2, #8
 8006128:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	69da      	ldr	r2, [r3, #28]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f022 0204 	bic.w	r2, r2, #4
 8006138:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	69d9      	ldr	r1, [r3, #28]
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	691a      	ldr	r2, [r3, #16]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	430a      	orrs	r2, r1
 800614a:	61da      	str	r2, [r3, #28]
      break;
 800614c:	e064      	b.n	8006218 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	68b9      	ldr	r1, [r7, #8]
 8006154:	4618      	mov	r0, r3
 8006156:	f000 fb6f 	bl	8006838 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	69da      	ldr	r2, [r3, #28]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006168:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	69da      	ldr	r2, [r3, #28]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006178:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	69d9      	ldr	r1, [r3, #28]
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	691b      	ldr	r3, [r3, #16]
 8006184:	021a      	lsls	r2, r3, #8
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	430a      	orrs	r2, r1
 800618c:	61da      	str	r2, [r3, #28]
      break;
 800618e:	e043      	b.n	8006218 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68b9      	ldr	r1, [r7, #8]
 8006196:	4618      	mov	r0, r3
 8006198:	f000 fbb8 	bl	800690c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f042 0208 	orr.w	r2, r2, #8
 80061aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f022 0204 	bic.w	r2, r2, #4
 80061ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	691a      	ldr	r2, [r3, #16]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	430a      	orrs	r2, r1
 80061cc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80061ce:	e023      	b.n	8006218 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	68b9      	ldr	r1, [r7, #8]
 80061d6:	4618      	mov	r0, r3
 80061d8:	f000 fbfc 	bl	80069d4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	021a      	lsls	r2, r3, #8
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	430a      	orrs	r2, r1
 800620e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006210:	e002      	b.n	8006218 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	75fb      	strb	r3, [r7, #23]
      break;
 8006216:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006220:	7dfb      	ldrb	r3, [r7, #23]
}
 8006222:	4618      	mov	r0, r3
 8006224:	3718      	adds	r7, #24
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop

0800622c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b084      	sub	sp, #16
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006236:	2300      	movs	r3, #0
 8006238:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006240:	2b01      	cmp	r3, #1
 8006242:	d101      	bne.n	8006248 <HAL_TIM_ConfigClockSource+0x1c>
 8006244:	2302      	movs	r3, #2
 8006246:	e0b6      	b.n	80063b6 <HAL_TIM_ConfigClockSource+0x18a>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2202      	movs	r2, #2
 8006254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006266:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800626a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006272:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68ba      	ldr	r2, [r7, #8]
 800627a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006284:	d03e      	beq.n	8006304 <HAL_TIM_ConfigClockSource+0xd8>
 8006286:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800628a:	f200 8087 	bhi.w	800639c <HAL_TIM_ConfigClockSource+0x170>
 800628e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006292:	f000 8086 	beq.w	80063a2 <HAL_TIM_ConfigClockSource+0x176>
 8006296:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800629a:	d87f      	bhi.n	800639c <HAL_TIM_ConfigClockSource+0x170>
 800629c:	2b70      	cmp	r3, #112	; 0x70
 800629e:	d01a      	beq.n	80062d6 <HAL_TIM_ConfigClockSource+0xaa>
 80062a0:	2b70      	cmp	r3, #112	; 0x70
 80062a2:	d87b      	bhi.n	800639c <HAL_TIM_ConfigClockSource+0x170>
 80062a4:	2b60      	cmp	r3, #96	; 0x60
 80062a6:	d050      	beq.n	800634a <HAL_TIM_ConfigClockSource+0x11e>
 80062a8:	2b60      	cmp	r3, #96	; 0x60
 80062aa:	d877      	bhi.n	800639c <HAL_TIM_ConfigClockSource+0x170>
 80062ac:	2b50      	cmp	r3, #80	; 0x50
 80062ae:	d03c      	beq.n	800632a <HAL_TIM_ConfigClockSource+0xfe>
 80062b0:	2b50      	cmp	r3, #80	; 0x50
 80062b2:	d873      	bhi.n	800639c <HAL_TIM_ConfigClockSource+0x170>
 80062b4:	2b40      	cmp	r3, #64	; 0x40
 80062b6:	d058      	beq.n	800636a <HAL_TIM_ConfigClockSource+0x13e>
 80062b8:	2b40      	cmp	r3, #64	; 0x40
 80062ba:	d86f      	bhi.n	800639c <HAL_TIM_ConfigClockSource+0x170>
 80062bc:	2b30      	cmp	r3, #48	; 0x30
 80062be:	d064      	beq.n	800638a <HAL_TIM_ConfigClockSource+0x15e>
 80062c0:	2b30      	cmp	r3, #48	; 0x30
 80062c2:	d86b      	bhi.n	800639c <HAL_TIM_ConfigClockSource+0x170>
 80062c4:	2b20      	cmp	r3, #32
 80062c6:	d060      	beq.n	800638a <HAL_TIM_ConfigClockSource+0x15e>
 80062c8:	2b20      	cmp	r3, #32
 80062ca:	d867      	bhi.n	800639c <HAL_TIM_ConfigClockSource+0x170>
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d05c      	beq.n	800638a <HAL_TIM_ConfigClockSource+0x15e>
 80062d0:	2b10      	cmp	r3, #16
 80062d2:	d05a      	beq.n	800638a <HAL_TIM_ConfigClockSource+0x15e>
 80062d4:	e062      	b.n	800639c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6818      	ldr	r0, [r3, #0]
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	6899      	ldr	r1, [r3, #8]
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	685a      	ldr	r2, [r3, #4]
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	f000 fc55 	bl	8006b94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80062f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	68ba      	ldr	r2, [r7, #8]
 8006300:	609a      	str	r2, [r3, #8]
      break;
 8006302:	e04f      	b.n	80063a4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6818      	ldr	r0, [r3, #0]
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	6899      	ldr	r1, [r3, #8]
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	685a      	ldr	r2, [r3, #4]
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	f000 fc3e 	bl	8006b94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	689a      	ldr	r2, [r3, #8]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006326:	609a      	str	r2, [r3, #8]
      break;
 8006328:	e03c      	b.n	80063a4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6818      	ldr	r0, [r3, #0]
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	6859      	ldr	r1, [r3, #4]
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	461a      	mov	r2, r3
 8006338:	f000 fbb2 	bl	8006aa0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	2150      	movs	r1, #80	; 0x50
 8006342:	4618      	mov	r0, r3
 8006344:	f000 fc0b 	bl	8006b5e <TIM_ITRx_SetConfig>
      break;
 8006348:	e02c      	b.n	80063a4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6818      	ldr	r0, [r3, #0]
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	6859      	ldr	r1, [r3, #4]
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	68db      	ldr	r3, [r3, #12]
 8006356:	461a      	mov	r2, r3
 8006358:	f000 fbd1 	bl	8006afe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	2160      	movs	r1, #96	; 0x60
 8006362:	4618      	mov	r0, r3
 8006364:	f000 fbfb 	bl	8006b5e <TIM_ITRx_SetConfig>
      break;
 8006368:	e01c      	b.n	80063a4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6818      	ldr	r0, [r3, #0]
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	6859      	ldr	r1, [r3, #4]
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	68db      	ldr	r3, [r3, #12]
 8006376:	461a      	mov	r2, r3
 8006378:	f000 fb92 	bl	8006aa0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2140      	movs	r1, #64	; 0x40
 8006382:	4618      	mov	r0, r3
 8006384:	f000 fbeb 	bl	8006b5e <TIM_ITRx_SetConfig>
      break;
 8006388:	e00c      	b.n	80063a4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4619      	mov	r1, r3
 8006394:	4610      	mov	r0, r2
 8006396:	f000 fbe2 	bl	8006b5e <TIM_ITRx_SetConfig>
      break;
 800639a:	e003      	b.n	80063a4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	73fb      	strb	r3, [r7, #15]
      break;
 80063a0:	e000      	b.n	80063a4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80063a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80063b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3710      	adds	r7, #16
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
	...

080063c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b085      	sub	sp, #20
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4a40      	ldr	r2, [pc, #256]	; (80064d4 <TIM_Base_SetConfig+0x114>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d013      	beq.n	8006400 <TIM_Base_SetConfig+0x40>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063de:	d00f      	beq.n	8006400 <TIM_Base_SetConfig+0x40>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4a3d      	ldr	r2, [pc, #244]	; (80064d8 <TIM_Base_SetConfig+0x118>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d00b      	beq.n	8006400 <TIM_Base_SetConfig+0x40>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	4a3c      	ldr	r2, [pc, #240]	; (80064dc <TIM_Base_SetConfig+0x11c>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d007      	beq.n	8006400 <TIM_Base_SetConfig+0x40>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4a3b      	ldr	r2, [pc, #236]	; (80064e0 <TIM_Base_SetConfig+0x120>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d003      	beq.n	8006400 <TIM_Base_SetConfig+0x40>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4a3a      	ldr	r2, [pc, #232]	; (80064e4 <TIM_Base_SetConfig+0x124>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d108      	bne.n	8006412 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006406:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	4313      	orrs	r3, r2
 8006410:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a2f      	ldr	r2, [pc, #188]	; (80064d4 <TIM_Base_SetConfig+0x114>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d01f      	beq.n	800645a <TIM_Base_SetConfig+0x9a>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006420:	d01b      	beq.n	800645a <TIM_Base_SetConfig+0x9a>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4a2c      	ldr	r2, [pc, #176]	; (80064d8 <TIM_Base_SetConfig+0x118>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d017      	beq.n	800645a <TIM_Base_SetConfig+0x9a>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4a2b      	ldr	r2, [pc, #172]	; (80064dc <TIM_Base_SetConfig+0x11c>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d013      	beq.n	800645a <TIM_Base_SetConfig+0x9a>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4a2a      	ldr	r2, [pc, #168]	; (80064e0 <TIM_Base_SetConfig+0x120>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d00f      	beq.n	800645a <TIM_Base_SetConfig+0x9a>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4a29      	ldr	r2, [pc, #164]	; (80064e4 <TIM_Base_SetConfig+0x124>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d00b      	beq.n	800645a <TIM_Base_SetConfig+0x9a>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4a28      	ldr	r2, [pc, #160]	; (80064e8 <TIM_Base_SetConfig+0x128>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d007      	beq.n	800645a <TIM_Base_SetConfig+0x9a>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	4a27      	ldr	r2, [pc, #156]	; (80064ec <TIM_Base_SetConfig+0x12c>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d003      	beq.n	800645a <TIM_Base_SetConfig+0x9a>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	4a26      	ldr	r2, [pc, #152]	; (80064f0 <TIM_Base_SetConfig+0x130>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d108      	bne.n	800646c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006460:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	68fa      	ldr	r2, [r7, #12]
 8006468:	4313      	orrs	r3, r2
 800646a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	695b      	ldr	r3, [r3, #20]
 8006476:	4313      	orrs	r3, r2
 8006478:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	68fa      	ldr	r2, [r7, #12]
 800647e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	689a      	ldr	r2, [r3, #8]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4a10      	ldr	r2, [pc, #64]	; (80064d4 <TIM_Base_SetConfig+0x114>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d00f      	beq.n	80064b8 <TIM_Base_SetConfig+0xf8>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	4a12      	ldr	r2, [pc, #72]	; (80064e4 <TIM_Base_SetConfig+0x124>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d00b      	beq.n	80064b8 <TIM_Base_SetConfig+0xf8>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4a11      	ldr	r2, [pc, #68]	; (80064e8 <TIM_Base_SetConfig+0x128>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d007      	beq.n	80064b8 <TIM_Base_SetConfig+0xf8>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4a10      	ldr	r2, [pc, #64]	; (80064ec <TIM_Base_SetConfig+0x12c>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d003      	beq.n	80064b8 <TIM_Base_SetConfig+0xf8>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4a0f      	ldr	r2, [pc, #60]	; (80064f0 <TIM_Base_SetConfig+0x130>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d103      	bne.n	80064c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	691a      	ldr	r2, [r3, #16]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2201      	movs	r2, #1
 80064c4:	615a      	str	r2, [r3, #20]
}
 80064c6:	bf00      	nop
 80064c8:	3714      	adds	r7, #20
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr
 80064d2:	bf00      	nop
 80064d4:	40012c00 	.word	0x40012c00
 80064d8:	40000400 	.word	0x40000400
 80064dc:	40000800 	.word	0x40000800
 80064e0:	40000c00 	.word	0x40000c00
 80064e4:	40013400 	.word	0x40013400
 80064e8:	40014000 	.word	0x40014000
 80064ec:	40014400 	.word	0x40014400
 80064f0:	40014800 	.word	0x40014800

080064f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b087      	sub	sp, #28
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a1b      	ldr	r3, [r3, #32]
 8006502:	f023 0201 	bic.w	r2, r3, #1
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a1b      	ldr	r3, [r3, #32]
 800650e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	699b      	ldr	r3, [r3, #24]
 800651a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006526:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f023 0303 	bic.w	r3, r3, #3
 800652e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	68fa      	ldr	r2, [r7, #12]
 8006536:	4313      	orrs	r3, r2
 8006538:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	f023 0302 	bic.w	r3, r3, #2
 8006540:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	697a      	ldr	r2, [r7, #20]
 8006548:	4313      	orrs	r3, r2
 800654a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a2c      	ldr	r2, [pc, #176]	; (8006600 <TIM_OC1_SetConfig+0x10c>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d00f      	beq.n	8006574 <TIM_OC1_SetConfig+0x80>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4a2b      	ldr	r2, [pc, #172]	; (8006604 <TIM_OC1_SetConfig+0x110>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d00b      	beq.n	8006574 <TIM_OC1_SetConfig+0x80>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4a2a      	ldr	r2, [pc, #168]	; (8006608 <TIM_OC1_SetConfig+0x114>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d007      	beq.n	8006574 <TIM_OC1_SetConfig+0x80>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	4a29      	ldr	r2, [pc, #164]	; (800660c <TIM_OC1_SetConfig+0x118>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d003      	beq.n	8006574 <TIM_OC1_SetConfig+0x80>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	4a28      	ldr	r2, [pc, #160]	; (8006610 <TIM_OC1_SetConfig+0x11c>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d10c      	bne.n	800658e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	f023 0308 	bic.w	r3, r3, #8
 800657a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	697a      	ldr	r2, [r7, #20]
 8006582:	4313      	orrs	r3, r2
 8006584:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	f023 0304 	bic.w	r3, r3, #4
 800658c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a1b      	ldr	r2, [pc, #108]	; (8006600 <TIM_OC1_SetConfig+0x10c>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d00f      	beq.n	80065b6 <TIM_OC1_SetConfig+0xc2>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a1a      	ldr	r2, [pc, #104]	; (8006604 <TIM_OC1_SetConfig+0x110>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d00b      	beq.n	80065b6 <TIM_OC1_SetConfig+0xc2>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a19      	ldr	r2, [pc, #100]	; (8006608 <TIM_OC1_SetConfig+0x114>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d007      	beq.n	80065b6 <TIM_OC1_SetConfig+0xc2>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4a18      	ldr	r2, [pc, #96]	; (800660c <TIM_OC1_SetConfig+0x118>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d003      	beq.n	80065b6 <TIM_OC1_SetConfig+0xc2>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	4a17      	ldr	r2, [pc, #92]	; (8006610 <TIM_OC1_SetConfig+0x11c>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d111      	bne.n	80065da <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80065c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	695b      	ldr	r3, [r3, #20]
 80065ca:	693a      	ldr	r2, [r7, #16]
 80065cc:	4313      	orrs	r3, r2
 80065ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	699b      	ldr	r3, [r3, #24]
 80065d4:	693a      	ldr	r2, [r7, #16]
 80065d6:	4313      	orrs	r3, r2
 80065d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	693a      	ldr	r2, [r7, #16]
 80065de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	68fa      	ldr	r2, [r7, #12]
 80065e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	685a      	ldr	r2, [r3, #4]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	697a      	ldr	r2, [r7, #20]
 80065f2:	621a      	str	r2, [r3, #32]
}
 80065f4:	bf00      	nop
 80065f6:	371c      	adds	r7, #28
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr
 8006600:	40012c00 	.word	0x40012c00
 8006604:	40013400 	.word	0x40013400
 8006608:	40014000 	.word	0x40014000
 800660c:	40014400 	.word	0x40014400
 8006610:	40014800 	.word	0x40014800

08006614 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006614:	b480      	push	{r7}
 8006616:	b087      	sub	sp, #28
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6a1b      	ldr	r3, [r3, #32]
 8006622:	f023 0210 	bic.w	r2, r3, #16
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6a1b      	ldr	r3, [r3, #32]
 800662e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	699b      	ldr	r3, [r3, #24]
 800663a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006642:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006646:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800664e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	021b      	lsls	r3, r3, #8
 8006656:	68fa      	ldr	r2, [r7, #12]
 8006658:	4313      	orrs	r3, r2
 800665a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	f023 0320 	bic.w	r3, r3, #32
 8006662:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	011b      	lsls	r3, r3, #4
 800666a:	697a      	ldr	r2, [r7, #20]
 800666c:	4313      	orrs	r3, r2
 800666e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	4a28      	ldr	r2, [pc, #160]	; (8006714 <TIM_OC2_SetConfig+0x100>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d003      	beq.n	8006680 <TIM_OC2_SetConfig+0x6c>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	4a27      	ldr	r2, [pc, #156]	; (8006718 <TIM_OC2_SetConfig+0x104>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d10d      	bne.n	800669c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006686:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	011b      	lsls	r3, r3, #4
 800668e:	697a      	ldr	r2, [r7, #20]
 8006690:	4313      	orrs	r3, r2
 8006692:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800669a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a1d      	ldr	r2, [pc, #116]	; (8006714 <TIM_OC2_SetConfig+0x100>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d00f      	beq.n	80066c4 <TIM_OC2_SetConfig+0xb0>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4a1c      	ldr	r2, [pc, #112]	; (8006718 <TIM_OC2_SetConfig+0x104>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d00b      	beq.n	80066c4 <TIM_OC2_SetConfig+0xb0>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4a1b      	ldr	r2, [pc, #108]	; (800671c <TIM_OC2_SetConfig+0x108>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d007      	beq.n	80066c4 <TIM_OC2_SetConfig+0xb0>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	4a1a      	ldr	r2, [pc, #104]	; (8006720 <TIM_OC2_SetConfig+0x10c>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d003      	beq.n	80066c4 <TIM_OC2_SetConfig+0xb0>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	4a19      	ldr	r2, [pc, #100]	; (8006724 <TIM_OC2_SetConfig+0x110>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d113      	bne.n	80066ec <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80066ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80066d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	695b      	ldr	r3, [r3, #20]
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	693a      	ldr	r2, [r7, #16]
 80066dc:	4313      	orrs	r3, r2
 80066de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	699b      	ldr	r3, [r3, #24]
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	693a      	ldr	r2, [r7, #16]
 80066e8:	4313      	orrs	r3, r2
 80066ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	693a      	ldr	r2, [r7, #16]
 80066f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	68fa      	ldr	r2, [r7, #12]
 80066f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	685a      	ldr	r2, [r3, #4]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	697a      	ldr	r2, [r7, #20]
 8006704:	621a      	str	r2, [r3, #32]
}
 8006706:	bf00      	nop
 8006708:	371c      	adds	r7, #28
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr
 8006712:	bf00      	nop
 8006714:	40012c00 	.word	0x40012c00
 8006718:	40013400 	.word	0x40013400
 800671c:	40014000 	.word	0x40014000
 8006720:	40014400 	.word	0x40014400
 8006724:	40014800 	.word	0x40014800

08006728 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006728:	b480      	push	{r7}
 800672a:	b087      	sub	sp, #28
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a1b      	ldr	r3, [r3, #32]
 8006736:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6a1b      	ldr	r3, [r3, #32]
 8006742:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	69db      	ldr	r3, [r3, #28]
 800674e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800675a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f023 0303 	bic.w	r3, r3, #3
 8006762:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	4313      	orrs	r3, r2
 800676c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006774:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	021b      	lsls	r3, r3, #8
 800677c:	697a      	ldr	r2, [r7, #20]
 800677e:	4313      	orrs	r3, r2
 8006780:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a27      	ldr	r2, [pc, #156]	; (8006824 <TIM_OC3_SetConfig+0xfc>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d003      	beq.n	8006792 <TIM_OC3_SetConfig+0x6a>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a26      	ldr	r2, [pc, #152]	; (8006828 <TIM_OC3_SetConfig+0x100>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d10d      	bne.n	80067ae <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006798:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	021b      	lsls	r3, r3, #8
 80067a0:	697a      	ldr	r2, [r7, #20]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4a1c      	ldr	r2, [pc, #112]	; (8006824 <TIM_OC3_SetConfig+0xfc>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d00f      	beq.n	80067d6 <TIM_OC3_SetConfig+0xae>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4a1b      	ldr	r2, [pc, #108]	; (8006828 <TIM_OC3_SetConfig+0x100>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d00b      	beq.n	80067d6 <TIM_OC3_SetConfig+0xae>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	4a1a      	ldr	r2, [pc, #104]	; (800682c <TIM_OC3_SetConfig+0x104>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d007      	beq.n	80067d6 <TIM_OC3_SetConfig+0xae>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4a19      	ldr	r2, [pc, #100]	; (8006830 <TIM_OC3_SetConfig+0x108>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d003      	beq.n	80067d6 <TIM_OC3_SetConfig+0xae>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4a18      	ldr	r2, [pc, #96]	; (8006834 <TIM_OC3_SetConfig+0x10c>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d113      	bne.n	80067fe <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80067e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	695b      	ldr	r3, [r3, #20]
 80067ea:	011b      	lsls	r3, r3, #4
 80067ec:	693a      	ldr	r2, [r7, #16]
 80067ee:	4313      	orrs	r3, r2
 80067f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	699b      	ldr	r3, [r3, #24]
 80067f6:	011b      	lsls	r3, r3, #4
 80067f8:	693a      	ldr	r2, [r7, #16]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	693a      	ldr	r2, [r7, #16]
 8006802:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	68fa      	ldr	r2, [r7, #12]
 8006808:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	685a      	ldr	r2, [r3, #4]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	697a      	ldr	r2, [r7, #20]
 8006816:	621a      	str	r2, [r3, #32]
}
 8006818:	bf00      	nop
 800681a:	371c      	adds	r7, #28
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr
 8006824:	40012c00 	.word	0x40012c00
 8006828:	40013400 	.word	0x40013400
 800682c:	40014000 	.word	0x40014000
 8006830:	40014400 	.word	0x40014400
 8006834:	40014800 	.word	0x40014800

08006838 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006838:	b480      	push	{r7}
 800683a:	b087      	sub	sp, #28
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a1b      	ldr	r3, [r3, #32]
 8006846:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a1b      	ldr	r3, [r3, #32]
 8006852:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	69db      	ldr	r3, [r3, #28]
 800685e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006866:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800686a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006872:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	021b      	lsls	r3, r3, #8
 800687a:	68fa      	ldr	r2, [r7, #12]
 800687c:	4313      	orrs	r3, r2
 800687e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006886:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	031b      	lsls	r3, r3, #12
 800688e:	693a      	ldr	r2, [r7, #16]
 8006890:	4313      	orrs	r3, r2
 8006892:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4a18      	ldr	r2, [pc, #96]	; (80068f8 <TIM_OC4_SetConfig+0xc0>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d00f      	beq.n	80068bc <TIM_OC4_SetConfig+0x84>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4a17      	ldr	r2, [pc, #92]	; (80068fc <TIM_OC4_SetConfig+0xc4>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d00b      	beq.n	80068bc <TIM_OC4_SetConfig+0x84>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4a16      	ldr	r2, [pc, #88]	; (8006900 <TIM_OC4_SetConfig+0xc8>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d007      	beq.n	80068bc <TIM_OC4_SetConfig+0x84>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4a15      	ldr	r2, [pc, #84]	; (8006904 <TIM_OC4_SetConfig+0xcc>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d003      	beq.n	80068bc <TIM_OC4_SetConfig+0x84>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a14      	ldr	r2, [pc, #80]	; (8006908 <TIM_OC4_SetConfig+0xd0>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d109      	bne.n	80068d0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	695b      	ldr	r3, [r3, #20]
 80068c8:	019b      	lsls	r3, r3, #6
 80068ca:	697a      	ldr	r2, [r7, #20]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	697a      	ldr	r2, [r7, #20]
 80068d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	68fa      	ldr	r2, [r7, #12]
 80068da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	685a      	ldr	r2, [r3, #4]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	693a      	ldr	r2, [r7, #16]
 80068e8:	621a      	str	r2, [r3, #32]
}
 80068ea:	bf00      	nop
 80068ec:	371c      	adds	r7, #28
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr
 80068f6:	bf00      	nop
 80068f8:	40012c00 	.word	0x40012c00
 80068fc:	40013400 	.word	0x40013400
 8006900:	40014000 	.word	0x40014000
 8006904:	40014400 	.word	0x40014400
 8006908:	40014800 	.word	0x40014800

0800690c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800690c:	b480      	push	{r7}
 800690e:	b087      	sub	sp, #28
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6a1b      	ldr	r3, [r3, #32]
 800691a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6a1b      	ldr	r3, [r3, #32]
 8006926:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800693a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800693e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	4313      	orrs	r3, r2
 8006948:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006950:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	041b      	lsls	r3, r3, #16
 8006958:	693a      	ldr	r2, [r7, #16]
 800695a:	4313      	orrs	r3, r2
 800695c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a17      	ldr	r2, [pc, #92]	; (80069c0 <TIM_OC5_SetConfig+0xb4>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d00f      	beq.n	8006986 <TIM_OC5_SetConfig+0x7a>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a16      	ldr	r2, [pc, #88]	; (80069c4 <TIM_OC5_SetConfig+0xb8>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d00b      	beq.n	8006986 <TIM_OC5_SetConfig+0x7a>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4a15      	ldr	r2, [pc, #84]	; (80069c8 <TIM_OC5_SetConfig+0xbc>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d007      	beq.n	8006986 <TIM_OC5_SetConfig+0x7a>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4a14      	ldr	r2, [pc, #80]	; (80069cc <TIM_OC5_SetConfig+0xc0>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d003      	beq.n	8006986 <TIM_OC5_SetConfig+0x7a>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4a13      	ldr	r2, [pc, #76]	; (80069d0 <TIM_OC5_SetConfig+0xc4>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d109      	bne.n	800699a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800698c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	695b      	ldr	r3, [r3, #20]
 8006992:	021b      	lsls	r3, r3, #8
 8006994:	697a      	ldr	r2, [r7, #20]
 8006996:	4313      	orrs	r3, r2
 8006998:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	697a      	ldr	r2, [r7, #20]
 800699e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	68fa      	ldr	r2, [r7, #12]
 80069a4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	685a      	ldr	r2, [r3, #4]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	693a      	ldr	r2, [r7, #16]
 80069b2:	621a      	str	r2, [r3, #32]
}
 80069b4:	bf00      	nop
 80069b6:	371c      	adds	r7, #28
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr
 80069c0:	40012c00 	.word	0x40012c00
 80069c4:	40013400 	.word	0x40013400
 80069c8:	40014000 	.word	0x40014000
 80069cc:	40014400 	.word	0x40014400
 80069d0:	40014800 	.word	0x40014800

080069d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b087      	sub	sp, #28
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a1b      	ldr	r3, [r3, #32]
 80069e2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6a1b      	ldr	r3, [r3, #32]
 80069ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	021b      	lsls	r3, r3, #8
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006a1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	051b      	lsls	r3, r3, #20
 8006a22:	693a      	ldr	r2, [r7, #16]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	4a18      	ldr	r2, [pc, #96]	; (8006a8c <TIM_OC6_SetConfig+0xb8>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d00f      	beq.n	8006a50 <TIM_OC6_SetConfig+0x7c>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	4a17      	ldr	r2, [pc, #92]	; (8006a90 <TIM_OC6_SetConfig+0xbc>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d00b      	beq.n	8006a50 <TIM_OC6_SetConfig+0x7c>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	4a16      	ldr	r2, [pc, #88]	; (8006a94 <TIM_OC6_SetConfig+0xc0>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d007      	beq.n	8006a50 <TIM_OC6_SetConfig+0x7c>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	4a15      	ldr	r2, [pc, #84]	; (8006a98 <TIM_OC6_SetConfig+0xc4>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d003      	beq.n	8006a50 <TIM_OC6_SetConfig+0x7c>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	4a14      	ldr	r2, [pc, #80]	; (8006a9c <TIM_OC6_SetConfig+0xc8>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d109      	bne.n	8006a64 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a56:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	695b      	ldr	r3, [r3, #20]
 8006a5c:	029b      	lsls	r3, r3, #10
 8006a5e:	697a      	ldr	r2, [r7, #20]
 8006a60:	4313      	orrs	r3, r2
 8006a62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	697a      	ldr	r2, [r7, #20]
 8006a68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	685a      	ldr	r2, [r3, #4]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	693a      	ldr	r2, [r7, #16]
 8006a7c:	621a      	str	r2, [r3, #32]
}
 8006a7e:	bf00      	nop
 8006a80:	371c      	adds	r7, #28
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr
 8006a8a:	bf00      	nop
 8006a8c:	40012c00 	.word	0x40012c00
 8006a90:	40013400 	.word	0x40013400
 8006a94:	40014000 	.word	0x40014000
 8006a98:	40014400 	.word	0x40014400
 8006a9c:	40014800 	.word	0x40014800

08006aa0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b087      	sub	sp, #28
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	6a1b      	ldr	r3, [r3, #32]
 8006ab0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6a1b      	ldr	r3, [r3, #32]
 8006ab6:	f023 0201 	bic.w	r2, r3, #1
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	699b      	ldr	r3, [r3, #24]
 8006ac2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006aca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	011b      	lsls	r3, r3, #4
 8006ad0:	693a      	ldr	r2, [r7, #16]
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	f023 030a 	bic.w	r3, r3, #10
 8006adc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ade:	697a      	ldr	r2, [r7, #20]
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	693a      	ldr	r2, [r7, #16]
 8006aea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	697a      	ldr	r2, [r7, #20]
 8006af0:	621a      	str	r2, [r3, #32]
}
 8006af2:	bf00      	nop
 8006af4:	371c      	adds	r7, #28
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr

08006afe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006afe:	b480      	push	{r7}
 8006b00:	b087      	sub	sp, #28
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	60f8      	str	r0, [r7, #12]
 8006b06:	60b9      	str	r1, [r7, #8]
 8006b08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	6a1b      	ldr	r3, [r3, #32]
 8006b0e:	f023 0210 	bic.w	r2, r3, #16
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	699b      	ldr	r3, [r3, #24]
 8006b1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	6a1b      	ldr	r3, [r3, #32]
 8006b20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	031b      	lsls	r3, r3, #12
 8006b2e:	697a      	ldr	r2, [r7, #20]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006b3a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	011b      	lsls	r3, r3, #4
 8006b40:	693a      	ldr	r2, [r7, #16]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	697a      	ldr	r2, [r7, #20]
 8006b4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	693a      	ldr	r2, [r7, #16]
 8006b50:	621a      	str	r2, [r3, #32]
}
 8006b52:	bf00      	nop
 8006b54:	371c      	adds	r7, #28
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr

08006b5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b5e:	b480      	push	{r7}
 8006b60:	b085      	sub	sp, #20
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
 8006b66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b76:	683a      	ldr	r2, [r7, #0]
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	f043 0307 	orr.w	r3, r3, #7
 8006b80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	68fa      	ldr	r2, [r7, #12]
 8006b86:	609a      	str	r2, [r3, #8]
}
 8006b88:	bf00      	nop
 8006b8a:	3714      	adds	r7, #20
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr

08006b94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b087      	sub	sp, #28
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	60f8      	str	r0, [r7, #12]
 8006b9c:	60b9      	str	r1, [r7, #8]
 8006b9e:	607a      	str	r2, [r7, #4]
 8006ba0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006bae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	021a      	lsls	r2, r3, #8
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	431a      	orrs	r2, r3
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	697a      	ldr	r2, [r7, #20]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	697a      	ldr	r2, [r7, #20]
 8006bc6:	609a      	str	r2, [r3, #8]
}
 8006bc8:	bf00      	nop
 8006bca:	371c      	adds	r7, #28
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr

08006bd4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b087      	sub	sp, #28
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	60f8      	str	r0, [r7, #12]
 8006bdc:	60b9      	str	r1, [r7, #8]
 8006bde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	f003 031f 	and.w	r3, r3, #31
 8006be6:	2201      	movs	r2, #1
 8006be8:	fa02 f303 	lsl.w	r3, r2, r3
 8006bec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	6a1a      	ldr	r2, [r3, #32]
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	43db      	mvns	r3, r3
 8006bf6:	401a      	ands	r2, r3
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	6a1a      	ldr	r2, [r3, #32]
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	f003 031f 	and.w	r3, r3, #31
 8006c06:	6879      	ldr	r1, [r7, #4]
 8006c08:	fa01 f303 	lsl.w	r3, r1, r3
 8006c0c:	431a      	orrs	r2, r3
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	621a      	str	r2, [r3, #32]
}
 8006c12:	bf00      	nop
 8006c14:	371c      	adds	r7, #28
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr
	...

08006c20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b085      	sub	sp, #20
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d101      	bne.n	8006c38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c34:	2302      	movs	r3, #2
 8006c36:	e068      	b.n	8006d0a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2202      	movs	r2, #2
 8006c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a2e      	ldr	r2, [pc, #184]	; (8006d18 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d004      	beq.n	8006c6c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a2d      	ldr	r2, [pc, #180]	; (8006d1c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d108      	bne.n	8006c7e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006c72:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	68fa      	ldr	r2, [r7, #12]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c84:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	68fa      	ldr	r2, [r7, #12]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	68fa      	ldr	r2, [r7, #12]
 8006c96:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a1e      	ldr	r2, [pc, #120]	; (8006d18 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d01d      	beq.n	8006cde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006caa:	d018      	beq.n	8006cde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a1b      	ldr	r2, [pc, #108]	; (8006d20 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d013      	beq.n	8006cde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a1a      	ldr	r2, [pc, #104]	; (8006d24 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d00e      	beq.n	8006cde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a18      	ldr	r2, [pc, #96]	; (8006d28 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d009      	beq.n	8006cde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a13      	ldr	r2, [pc, #76]	; (8006d1c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d004      	beq.n	8006cde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a14      	ldr	r2, [pc, #80]	; (8006d2c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d10c      	bne.n	8006cf8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ce4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	68ba      	ldr	r2, [r7, #8]
 8006cec:	4313      	orrs	r3, r2
 8006cee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	68ba      	ldr	r2, [r7, #8]
 8006cf6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3714      	adds	r7, #20
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr
 8006d16:	bf00      	nop
 8006d18:	40012c00 	.word	0x40012c00
 8006d1c:	40013400 	.word	0x40013400
 8006d20:	40000400 	.word	0x40000400
 8006d24:	40000800 	.word	0x40000800
 8006d28:	40000c00 	.word	0x40000c00
 8006d2c:	40014000 	.word	0x40014000

08006d30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b082      	sub	sp, #8
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d101      	bne.n	8006d42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e042      	b.n	8006dc8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d106      	bne.n	8006d5a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f7fa fd43 	bl	80017e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2224      	movs	r2, #36	; 0x24
 8006d5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f022 0201 	bic.w	r2, r2, #1
 8006d70:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 f82c 	bl	8006dd0 <UART_SetConfig>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d101      	bne.n	8006d82 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e022      	b.n	8006dc8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d002      	beq.n	8006d90 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 fae8 	bl	8007360 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	685a      	ldr	r2, [r3, #4]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	689a      	ldr	r2, [r3, #8]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006dae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f042 0201 	orr.w	r2, r2, #1
 8006dbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f000 fb6f 	bl	80074a4 <UART_CheckIdleState>
 8006dc6:	4603      	mov	r3, r0
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3708      	adds	r7, #8
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006dd0:	b5b0      	push	{r4, r5, r7, lr}
 8006dd2:	b088      	sub	sp, #32
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	689a      	ldr	r2, [r3, #8]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	691b      	ldr	r3, [r3, #16]
 8006de4:	431a      	orrs	r2, r3
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	695b      	ldr	r3, [r3, #20]
 8006dea:	431a      	orrs	r2, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	69db      	ldr	r3, [r3, #28]
 8006df0:	4313      	orrs	r3, r2
 8006df2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	4bb1      	ldr	r3, [pc, #708]	; (80070c0 <UART_SetConfig+0x2f0>)
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	6812      	ldr	r2, [r2, #0]
 8006e02:	69f9      	ldr	r1, [r7, #28]
 8006e04:	430b      	orrs	r3, r1
 8006e06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	68da      	ldr	r2, [r3, #12]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	430a      	orrs	r2, r1
 8006e1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	699b      	ldr	r3, [r3, #24]
 8006e22:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4aa6      	ldr	r2, [pc, #664]	; (80070c4 <UART_SetConfig+0x2f4>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d004      	beq.n	8006e38 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6a1b      	ldr	r3, [r3, #32]
 8006e32:	69fa      	ldr	r2, [r7, #28]
 8006e34:	4313      	orrs	r3, r2
 8006e36:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006e42:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	6812      	ldr	r2, [r2, #0]
 8006e4a:	69f9      	ldr	r1, [r7, #28]
 8006e4c:	430b      	orrs	r3, r1
 8006e4e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e56:	f023 010f 	bic.w	r1, r3, #15
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	430a      	orrs	r2, r1
 8006e64:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a97      	ldr	r2, [pc, #604]	; (80070c8 <UART_SetConfig+0x2f8>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d120      	bne.n	8006eb2 <UART_SetConfig+0xe2>
 8006e70:	4b96      	ldr	r3, [pc, #600]	; (80070cc <UART_SetConfig+0x2fc>)
 8006e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e76:	f003 0303 	and.w	r3, r3, #3
 8006e7a:	2b03      	cmp	r3, #3
 8006e7c:	d816      	bhi.n	8006eac <UART_SetConfig+0xdc>
 8006e7e:	a201      	add	r2, pc, #4	; (adr r2, 8006e84 <UART_SetConfig+0xb4>)
 8006e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e84:	08006e95 	.word	0x08006e95
 8006e88:	08006ea1 	.word	0x08006ea1
 8006e8c:	08006e9b 	.word	0x08006e9b
 8006e90:	08006ea7 	.word	0x08006ea7
 8006e94:	2301      	movs	r3, #1
 8006e96:	76fb      	strb	r3, [r7, #27]
 8006e98:	e0e7      	b.n	800706a <UART_SetConfig+0x29a>
 8006e9a:	2302      	movs	r3, #2
 8006e9c:	76fb      	strb	r3, [r7, #27]
 8006e9e:	e0e4      	b.n	800706a <UART_SetConfig+0x29a>
 8006ea0:	2304      	movs	r3, #4
 8006ea2:	76fb      	strb	r3, [r7, #27]
 8006ea4:	e0e1      	b.n	800706a <UART_SetConfig+0x29a>
 8006ea6:	2308      	movs	r3, #8
 8006ea8:	76fb      	strb	r3, [r7, #27]
 8006eaa:	e0de      	b.n	800706a <UART_SetConfig+0x29a>
 8006eac:	2310      	movs	r3, #16
 8006eae:	76fb      	strb	r3, [r7, #27]
 8006eb0:	e0db      	b.n	800706a <UART_SetConfig+0x29a>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a86      	ldr	r2, [pc, #536]	; (80070d0 <UART_SetConfig+0x300>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d132      	bne.n	8006f22 <UART_SetConfig+0x152>
 8006ebc:	4b83      	ldr	r3, [pc, #524]	; (80070cc <UART_SetConfig+0x2fc>)
 8006ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ec2:	f003 030c 	and.w	r3, r3, #12
 8006ec6:	2b0c      	cmp	r3, #12
 8006ec8:	d828      	bhi.n	8006f1c <UART_SetConfig+0x14c>
 8006eca:	a201      	add	r2, pc, #4	; (adr r2, 8006ed0 <UART_SetConfig+0x100>)
 8006ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ed0:	08006f05 	.word	0x08006f05
 8006ed4:	08006f1d 	.word	0x08006f1d
 8006ed8:	08006f1d 	.word	0x08006f1d
 8006edc:	08006f1d 	.word	0x08006f1d
 8006ee0:	08006f11 	.word	0x08006f11
 8006ee4:	08006f1d 	.word	0x08006f1d
 8006ee8:	08006f1d 	.word	0x08006f1d
 8006eec:	08006f1d 	.word	0x08006f1d
 8006ef0:	08006f0b 	.word	0x08006f0b
 8006ef4:	08006f1d 	.word	0x08006f1d
 8006ef8:	08006f1d 	.word	0x08006f1d
 8006efc:	08006f1d 	.word	0x08006f1d
 8006f00:	08006f17 	.word	0x08006f17
 8006f04:	2300      	movs	r3, #0
 8006f06:	76fb      	strb	r3, [r7, #27]
 8006f08:	e0af      	b.n	800706a <UART_SetConfig+0x29a>
 8006f0a:	2302      	movs	r3, #2
 8006f0c:	76fb      	strb	r3, [r7, #27]
 8006f0e:	e0ac      	b.n	800706a <UART_SetConfig+0x29a>
 8006f10:	2304      	movs	r3, #4
 8006f12:	76fb      	strb	r3, [r7, #27]
 8006f14:	e0a9      	b.n	800706a <UART_SetConfig+0x29a>
 8006f16:	2308      	movs	r3, #8
 8006f18:	76fb      	strb	r3, [r7, #27]
 8006f1a:	e0a6      	b.n	800706a <UART_SetConfig+0x29a>
 8006f1c:	2310      	movs	r3, #16
 8006f1e:	76fb      	strb	r3, [r7, #27]
 8006f20:	e0a3      	b.n	800706a <UART_SetConfig+0x29a>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a6b      	ldr	r2, [pc, #428]	; (80070d4 <UART_SetConfig+0x304>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d120      	bne.n	8006f6e <UART_SetConfig+0x19e>
 8006f2c:	4b67      	ldr	r3, [pc, #412]	; (80070cc <UART_SetConfig+0x2fc>)
 8006f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f32:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006f36:	2b30      	cmp	r3, #48	; 0x30
 8006f38:	d013      	beq.n	8006f62 <UART_SetConfig+0x192>
 8006f3a:	2b30      	cmp	r3, #48	; 0x30
 8006f3c:	d814      	bhi.n	8006f68 <UART_SetConfig+0x198>
 8006f3e:	2b20      	cmp	r3, #32
 8006f40:	d009      	beq.n	8006f56 <UART_SetConfig+0x186>
 8006f42:	2b20      	cmp	r3, #32
 8006f44:	d810      	bhi.n	8006f68 <UART_SetConfig+0x198>
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d002      	beq.n	8006f50 <UART_SetConfig+0x180>
 8006f4a:	2b10      	cmp	r3, #16
 8006f4c:	d006      	beq.n	8006f5c <UART_SetConfig+0x18c>
 8006f4e:	e00b      	b.n	8006f68 <UART_SetConfig+0x198>
 8006f50:	2300      	movs	r3, #0
 8006f52:	76fb      	strb	r3, [r7, #27]
 8006f54:	e089      	b.n	800706a <UART_SetConfig+0x29a>
 8006f56:	2302      	movs	r3, #2
 8006f58:	76fb      	strb	r3, [r7, #27]
 8006f5a:	e086      	b.n	800706a <UART_SetConfig+0x29a>
 8006f5c:	2304      	movs	r3, #4
 8006f5e:	76fb      	strb	r3, [r7, #27]
 8006f60:	e083      	b.n	800706a <UART_SetConfig+0x29a>
 8006f62:	2308      	movs	r3, #8
 8006f64:	76fb      	strb	r3, [r7, #27]
 8006f66:	e080      	b.n	800706a <UART_SetConfig+0x29a>
 8006f68:	2310      	movs	r3, #16
 8006f6a:	76fb      	strb	r3, [r7, #27]
 8006f6c:	e07d      	b.n	800706a <UART_SetConfig+0x29a>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a59      	ldr	r2, [pc, #356]	; (80070d8 <UART_SetConfig+0x308>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d120      	bne.n	8006fba <UART_SetConfig+0x1ea>
 8006f78:	4b54      	ldr	r3, [pc, #336]	; (80070cc <UART_SetConfig+0x2fc>)
 8006f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f7e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006f82:	2bc0      	cmp	r3, #192	; 0xc0
 8006f84:	d013      	beq.n	8006fae <UART_SetConfig+0x1de>
 8006f86:	2bc0      	cmp	r3, #192	; 0xc0
 8006f88:	d814      	bhi.n	8006fb4 <UART_SetConfig+0x1e4>
 8006f8a:	2b80      	cmp	r3, #128	; 0x80
 8006f8c:	d009      	beq.n	8006fa2 <UART_SetConfig+0x1d2>
 8006f8e:	2b80      	cmp	r3, #128	; 0x80
 8006f90:	d810      	bhi.n	8006fb4 <UART_SetConfig+0x1e4>
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d002      	beq.n	8006f9c <UART_SetConfig+0x1cc>
 8006f96:	2b40      	cmp	r3, #64	; 0x40
 8006f98:	d006      	beq.n	8006fa8 <UART_SetConfig+0x1d8>
 8006f9a:	e00b      	b.n	8006fb4 <UART_SetConfig+0x1e4>
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	76fb      	strb	r3, [r7, #27]
 8006fa0:	e063      	b.n	800706a <UART_SetConfig+0x29a>
 8006fa2:	2302      	movs	r3, #2
 8006fa4:	76fb      	strb	r3, [r7, #27]
 8006fa6:	e060      	b.n	800706a <UART_SetConfig+0x29a>
 8006fa8:	2304      	movs	r3, #4
 8006faa:	76fb      	strb	r3, [r7, #27]
 8006fac:	e05d      	b.n	800706a <UART_SetConfig+0x29a>
 8006fae:	2308      	movs	r3, #8
 8006fb0:	76fb      	strb	r3, [r7, #27]
 8006fb2:	e05a      	b.n	800706a <UART_SetConfig+0x29a>
 8006fb4:	2310      	movs	r3, #16
 8006fb6:	76fb      	strb	r3, [r7, #27]
 8006fb8:	e057      	b.n	800706a <UART_SetConfig+0x29a>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a47      	ldr	r2, [pc, #284]	; (80070dc <UART_SetConfig+0x30c>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d125      	bne.n	8007010 <UART_SetConfig+0x240>
 8006fc4:	4b41      	ldr	r3, [pc, #260]	; (80070cc <UART_SetConfig+0x2fc>)
 8006fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fd2:	d017      	beq.n	8007004 <UART_SetConfig+0x234>
 8006fd4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fd8:	d817      	bhi.n	800700a <UART_SetConfig+0x23a>
 8006fda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fde:	d00b      	beq.n	8006ff8 <UART_SetConfig+0x228>
 8006fe0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fe4:	d811      	bhi.n	800700a <UART_SetConfig+0x23a>
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d003      	beq.n	8006ff2 <UART_SetConfig+0x222>
 8006fea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fee:	d006      	beq.n	8006ffe <UART_SetConfig+0x22e>
 8006ff0:	e00b      	b.n	800700a <UART_SetConfig+0x23a>
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	76fb      	strb	r3, [r7, #27]
 8006ff6:	e038      	b.n	800706a <UART_SetConfig+0x29a>
 8006ff8:	2302      	movs	r3, #2
 8006ffa:	76fb      	strb	r3, [r7, #27]
 8006ffc:	e035      	b.n	800706a <UART_SetConfig+0x29a>
 8006ffe:	2304      	movs	r3, #4
 8007000:	76fb      	strb	r3, [r7, #27]
 8007002:	e032      	b.n	800706a <UART_SetConfig+0x29a>
 8007004:	2308      	movs	r3, #8
 8007006:	76fb      	strb	r3, [r7, #27]
 8007008:	e02f      	b.n	800706a <UART_SetConfig+0x29a>
 800700a:	2310      	movs	r3, #16
 800700c:	76fb      	strb	r3, [r7, #27]
 800700e:	e02c      	b.n	800706a <UART_SetConfig+0x29a>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a2b      	ldr	r2, [pc, #172]	; (80070c4 <UART_SetConfig+0x2f4>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d125      	bne.n	8007066 <UART_SetConfig+0x296>
 800701a:	4b2c      	ldr	r3, [pc, #176]	; (80070cc <UART_SetConfig+0x2fc>)
 800701c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007020:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007024:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007028:	d017      	beq.n	800705a <UART_SetConfig+0x28a>
 800702a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800702e:	d817      	bhi.n	8007060 <UART_SetConfig+0x290>
 8007030:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007034:	d00b      	beq.n	800704e <UART_SetConfig+0x27e>
 8007036:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800703a:	d811      	bhi.n	8007060 <UART_SetConfig+0x290>
 800703c:	2b00      	cmp	r3, #0
 800703e:	d003      	beq.n	8007048 <UART_SetConfig+0x278>
 8007040:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007044:	d006      	beq.n	8007054 <UART_SetConfig+0x284>
 8007046:	e00b      	b.n	8007060 <UART_SetConfig+0x290>
 8007048:	2300      	movs	r3, #0
 800704a:	76fb      	strb	r3, [r7, #27]
 800704c:	e00d      	b.n	800706a <UART_SetConfig+0x29a>
 800704e:	2302      	movs	r3, #2
 8007050:	76fb      	strb	r3, [r7, #27]
 8007052:	e00a      	b.n	800706a <UART_SetConfig+0x29a>
 8007054:	2304      	movs	r3, #4
 8007056:	76fb      	strb	r3, [r7, #27]
 8007058:	e007      	b.n	800706a <UART_SetConfig+0x29a>
 800705a:	2308      	movs	r3, #8
 800705c:	76fb      	strb	r3, [r7, #27]
 800705e:	e004      	b.n	800706a <UART_SetConfig+0x29a>
 8007060:	2310      	movs	r3, #16
 8007062:	76fb      	strb	r3, [r7, #27]
 8007064:	e001      	b.n	800706a <UART_SetConfig+0x29a>
 8007066:	2310      	movs	r3, #16
 8007068:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a15      	ldr	r2, [pc, #84]	; (80070c4 <UART_SetConfig+0x2f4>)
 8007070:	4293      	cmp	r3, r2
 8007072:	f040 809f 	bne.w	80071b4 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007076:	7efb      	ldrb	r3, [r7, #27]
 8007078:	2b08      	cmp	r3, #8
 800707a:	d837      	bhi.n	80070ec <UART_SetConfig+0x31c>
 800707c:	a201      	add	r2, pc, #4	; (adr r2, 8007084 <UART_SetConfig+0x2b4>)
 800707e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007082:	bf00      	nop
 8007084:	080070a9 	.word	0x080070a9
 8007088:	080070ed 	.word	0x080070ed
 800708c:	080070b1 	.word	0x080070b1
 8007090:	080070ed 	.word	0x080070ed
 8007094:	080070b7 	.word	0x080070b7
 8007098:	080070ed 	.word	0x080070ed
 800709c:	080070ed 	.word	0x080070ed
 80070a0:	080070ed 	.word	0x080070ed
 80070a4:	080070e5 	.word	0x080070e5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070a8:	f7fd ff34 	bl	8004f14 <HAL_RCC_GetPCLK1Freq>
 80070ac:	6178      	str	r0, [r7, #20]
        break;
 80070ae:	e022      	b.n	80070f6 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070b0:	4b0b      	ldr	r3, [pc, #44]	; (80070e0 <UART_SetConfig+0x310>)
 80070b2:	617b      	str	r3, [r7, #20]
        break;
 80070b4:	e01f      	b.n	80070f6 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070b6:	f7fd fe95 	bl	8004de4 <HAL_RCC_GetSysClockFreq>
 80070ba:	6178      	str	r0, [r7, #20]
        break;
 80070bc:	e01b      	b.n	80070f6 <UART_SetConfig+0x326>
 80070be:	bf00      	nop
 80070c0:	cfff69f3 	.word	0xcfff69f3
 80070c4:	40008000 	.word	0x40008000
 80070c8:	40013800 	.word	0x40013800
 80070cc:	40021000 	.word	0x40021000
 80070d0:	40004400 	.word	0x40004400
 80070d4:	40004800 	.word	0x40004800
 80070d8:	40004c00 	.word	0x40004c00
 80070dc:	40005000 	.word	0x40005000
 80070e0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070e8:	617b      	str	r3, [r7, #20]
        break;
 80070ea:	e004      	b.n	80070f6 <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 80070ec:	2300      	movs	r3, #0
 80070ee:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80070f0:	2301      	movs	r3, #1
 80070f2:	76bb      	strb	r3, [r7, #26]
        break;
 80070f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	f000 8119 	beq.w	8007330 <UART_SetConfig+0x560>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007102:	4a95      	ldr	r2, [pc, #596]	; (8007358 <UART_SetConfig+0x588>)
 8007104:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007108:	461a      	mov	r2, r3
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007110:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	685a      	ldr	r2, [r3, #4]
 8007116:	4613      	mov	r3, r2
 8007118:	005b      	lsls	r3, r3, #1
 800711a:	4413      	add	r3, r2
 800711c:	68ba      	ldr	r2, [r7, #8]
 800711e:	429a      	cmp	r2, r3
 8007120:	d305      	bcc.n	800712e <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007128:	68ba      	ldr	r2, [r7, #8]
 800712a:	429a      	cmp	r2, r3
 800712c:	d902      	bls.n	8007134 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	76bb      	strb	r3, [r7, #26]
 8007132:	e0fd      	b.n	8007330 <UART_SetConfig+0x560>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	4618      	mov	r0, r3
 8007138:	f04f 0100 	mov.w	r1, #0
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007140:	4a85      	ldr	r2, [pc, #532]	; (8007358 <UART_SetConfig+0x588>)
 8007142:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007146:	b29a      	uxth	r2, r3
 8007148:	f04f 0300 	mov.w	r3, #0
 800714c:	f7f9 f856 	bl	80001fc <__aeabi_uldivmod>
 8007150:	4602      	mov	r2, r0
 8007152:	460b      	mov	r3, r1
 8007154:	4610      	mov	r0, r2
 8007156:	4619      	mov	r1, r3
 8007158:	f04f 0200 	mov.w	r2, #0
 800715c:	f04f 0300 	mov.w	r3, #0
 8007160:	020b      	lsls	r3, r1, #8
 8007162:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007166:	0202      	lsls	r2, r0, #8
 8007168:	6879      	ldr	r1, [r7, #4]
 800716a:	6849      	ldr	r1, [r1, #4]
 800716c:	0849      	lsrs	r1, r1, #1
 800716e:	4608      	mov	r0, r1
 8007170:	f04f 0100 	mov.w	r1, #0
 8007174:	1814      	adds	r4, r2, r0
 8007176:	eb43 0501 	adc.w	r5, r3, r1
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	461a      	mov	r2, r3
 8007180:	f04f 0300 	mov.w	r3, #0
 8007184:	4620      	mov	r0, r4
 8007186:	4629      	mov	r1, r5
 8007188:	f7f9 f838 	bl	80001fc <__aeabi_uldivmod>
 800718c:	4602      	mov	r2, r0
 800718e:	460b      	mov	r3, r1
 8007190:	4613      	mov	r3, r2
 8007192:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800719a:	d308      	bcc.n	80071ae <UART_SetConfig+0x3de>
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071a2:	d204      	bcs.n	80071ae <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	693a      	ldr	r2, [r7, #16]
 80071aa:	60da      	str	r2, [r3, #12]
 80071ac:	e0c0      	b.n	8007330 <UART_SetConfig+0x560>
        }
        else
        {
          ret = HAL_ERROR;
 80071ae:	2301      	movs	r3, #1
 80071b0:	76bb      	strb	r3, [r7, #26]
 80071b2:	e0bd      	b.n	8007330 <UART_SetConfig+0x560>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	69db      	ldr	r3, [r3, #28]
 80071b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071bc:	d164      	bne.n	8007288 <UART_SetConfig+0x4b8>
  {
    switch (clocksource)
 80071be:	7efb      	ldrb	r3, [r7, #27]
 80071c0:	2b08      	cmp	r3, #8
 80071c2:	d828      	bhi.n	8007216 <UART_SetConfig+0x446>
 80071c4:	a201      	add	r2, pc, #4	; (adr r2, 80071cc <UART_SetConfig+0x3fc>)
 80071c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ca:	bf00      	nop
 80071cc:	080071f1 	.word	0x080071f1
 80071d0:	080071f9 	.word	0x080071f9
 80071d4:	08007201 	.word	0x08007201
 80071d8:	08007217 	.word	0x08007217
 80071dc:	08007207 	.word	0x08007207
 80071e0:	08007217 	.word	0x08007217
 80071e4:	08007217 	.word	0x08007217
 80071e8:	08007217 	.word	0x08007217
 80071ec:	0800720f 	.word	0x0800720f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071f0:	f7fd fe90 	bl	8004f14 <HAL_RCC_GetPCLK1Freq>
 80071f4:	6178      	str	r0, [r7, #20]
        break;
 80071f6:	e013      	b.n	8007220 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071f8:	f7fd fea2 	bl	8004f40 <HAL_RCC_GetPCLK2Freq>
 80071fc:	6178      	str	r0, [r7, #20]
        break;
 80071fe:	e00f      	b.n	8007220 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007200:	4b56      	ldr	r3, [pc, #344]	; (800735c <UART_SetConfig+0x58c>)
 8007202:	617b      	str	r3, [r7, #20]
        break;
 8007204:	e00c      	b.n	8007220 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007206:	f7fd fded 	bl	8004de4 <HAL_RCC_GetSysClockFreq>
 800720a:	6178      	str	r0, [r7, #20]
        break;
 800720c:	e008      	b.n	8007220 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800720e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007212:	617b      	str	r3, [r7, #20]
        break;
 8007214:	e004      	b.n	8007220 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 8007216:	2300      	movs	r3, #0
 8007218:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800721a:	2301      	movs	r3, #1
 800721c:	76bb      	strb	r3, [r7, #26]
        break;
 800721e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	2b00      	cmp	r3, #0
 8007224:	f000 8084 	beq.w	8007330 <UART_SetConfig+0x560>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722c:	4a4a      	ldr	r2, [pc, #296]	; (8007358 <UART_SetConfig+0x588>)
 800722e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007232:	461a      	mov	r2, r3
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	fbb3 f3f2 	udiv	r3, r3, r2
 800723a:	005a      	lsls	r2, r3, #1
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	085b      	lsrs	r3, r3, #1
 8007242:	441a      	add	r2, r3
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	fbb2 f3f3 	udiv	r3, r2, r3
 800724c:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	2b0f      	cmp	r3, #15
 8007252:	d916      	bls.n	8007282 <UART_SetConfig+0x4b2>
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800725a:	d212      	bcs.n	8007282 <UART_SetConfig+0x4b2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	b29b      	uxth	r3, r3
 8007260:	f023 030f 	bic.w	r3, r3, #15
 8007264:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	085b      	lsrs	r3, r3, #1
 800726a:	b29b      	uxth	r3, r3
 800726c:	f003 0307 	and.w	r3, r3, #7
 8007270:	b29a      	uxth	r2, r3
 8007272:	89fb      	ldrh	r3, [r7, #14]
 8007274:	4313      	orrs	r3, r2
 8007276:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	89fa      	ldrh	r2, [r7, #14]
 800727e:	60da      	str	r2, [r3, #12]
 8007280:	e056      	b.n	8007330 <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	76bb      	strb	r3, [r7, #26]
 8007286:	e053      	b.n	8007330 <UART_SetConfig+0x560>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007288:	7efb      	ldrb	r3, [r7, #27]
 800728a:	2b08      	cmp	r3, #8
 800728c:	d827      	bhi.n	80072de <UART_SetConfig+0x50e>
 800728e:	a201      	add	r2, pc, #4	; (adr r2, 8007294 <UART_SetConfig+0x4c4>)
 8007290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007294:	080072b9 	.word	0x080072b9
 8007298:	080072c1 	.word	0x080072c1
 800729c:	080072c9 	.word	0x080072c9
 80072a0:	080072df 	.word	0x080072df
 80072a4:	080072cf 	.word	0x080072cf
 80072a8:	080072df 	.word	0x080072df
 80072ac:	080072df 	.word	0x080072df
 80072b0:	080072df 	.word	0x080072df
 80072b4:	080072d7 	.word	0x080072d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072b8:	f7fd fe2c 	bl	8004f14 <HAL_RCC_GetPCLK1Freq>
 80072bc:	6178      	str	r0, [r7, #20]
        break;
 80072be:	e013      	b.n	80072e8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072c0:	f7fd fe3e 	bl	8004f40 <HAL_RCC_GetPCLK2Freq>
 80072c4:	6178      	str	r0, [r7, #20]
        break;
 80072c6:	e00f      	b.n	80072e8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072c8:	4b24      	ldr	r3, [pc, #144]	; (800735c <UART_SetConfig+0x58c>)
 80072ca:	617b      	str	r3, [r7, #20]
        break;
 80072cc:	e00c      	b.n	80072e8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072ce:	f7fd fd89 	bl	8004de4 <HAL_RCC_GetSysClockFreq>
 80072d2:	6178      	str	r0, [r7, #20]
        break;
 80072d4:	e008      	b.n	80072e8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072da:	617b      	str	r3, [r7, #20]
        break;
 80072dc:	e004      	b.n	80072e8 <UART_SetConfig+0x518>
      default:
        pclk = 0U;
 80072de:	2300      	movs	r3, #0
 80072e0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	76bb      	strb	r3, [r7, #26]
        break;
 80072e6:	bf00      	nop
    }

    if (pclk != 0U)
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d020      	beq.n	8007330 <UART_SetConfig+0x560>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f2:	4a19      	ldr	r2, [pc, #100]	; (8007358 <UART_SetConfig+0x588>)
 80072f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072f8:	461a      	mov	r2, r3
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	fbb3 f2f2 	udiv	r2, r3, r2
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	085b      	lsrs	r3, r3, #1
 8007306:	441a      	add	r2, r3
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007310:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	2b0f      	cmp	r3, #15
 8007316:	d909      	bls.n	800732c <UART_SetConfig+0x55c>
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800731e:	d205      	bcs.n	800732c <UART_SetConfig+0x55c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	b29a      	uxth	r2, r3
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	60da      	str	r2, [r3, #12]
 800732a:	e001      	b.n	8007330 <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 800732c:	2301      	movs	r3, #1
 800732e:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2201      	movs	r2, #1
 8007334:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2201      	movs	r2, #1
 800733c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2200      	movs	r2, #0
 8007344:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800734c:	7ebb      	ldrb	r3, [r7, #26]
}
 800734e:	4618      	mov	r0, r3
 8007350:	3720      	adds	r7, #32
 8007352:	46bd      	mov	sp, r7
 8007354:	bdb0      	pop	{r4, r5, r7, pc}
 8007356:	bf00      	nop
 8007358:	08007988 	.word	0x08007988
 800735c:	00f42400 	.word	0x00f42400

08007360 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007360:	b480      	push	{r7}
 8007362:	b083      	sub	sp, #12
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800736c:	f003 0301 	and.w	r3, r3, #1
 8007370:	2b00      	cmp	r3, #0
 8007372:	d00a      	beq.n	800738a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	430a      	orrs	r2, r1
 8007388:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800738e:	f003 0302 	and.w	r3, r3, #2
 8007392:	2b00      	cmp	r3, #0
 8007394:	d00a      	beq.n	80073ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	430a      	orrs	r2, r1
 80073aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b0:	f003 0304 	and.w	r3, r3, #4
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d00a      	beq.n	80073ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	430a      	orrs	r2, r1
 80073cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073d2:	f003 0308 	and.w	r3, r3, #8
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d00a      	beq.n	80073f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	430a      	orrs	r2, r1
 80073ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f4:	f003 0310 	and.w	r3, r3, #16
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d00a      	beq.n	8007412 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	430a      	orrs	r2, r1
 8007410:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007416:	f003 0320 	and.w	r3, r3, #32
 800741a:	2b00      	cmp	r3, #0
 800741c:	d00a      	beq.n	8007434 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	430a      	orrs	r2, r1
 8007432:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800743c:	2b00      	cmp	r3, #0
 800743e:	d01a      	beq.n	8007476 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	430a      	orrs	r2, r1
 8007454:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800745a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800745e:	d10a      	bne.n	8007476 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	430a      	orrs	r2, r1
 8007474:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800747a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800747e:	2b00      	cmp	r3, #0
 8007480:	d00a      	beq.n	8007498 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	430a      	orrs	r2, r1
 8007496:	605a      	str	r2, [r3, #4]
  }
}
 8007498:	bf00      	nop
 800749a:	370c      	adds	r7, #12
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr

080074a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b086      	sub	sp, #24
 80074a8:	af02      	add	r7, sp, #8
 80074aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80074b4:	f7fa fbc4 	bl	8001c40 <HAL_GetTick>
 80074b8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f003 0308 	and.w	r3, r3, #8
 80074c4:	2b08      	cmp	r3, #8
 80074c6:	d10e      	bne.n	80074e6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80074cc:	9300      	str	r3, [sp, #0]
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f000 f82f 	bl	800753a <UART_WaitOnFlagUntilTimeout>
 80074dc:	4603      	mov	r3, r0
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d001      	beq.n	80074e6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074e2:	2303      	movs	r3, #3
 80074e4:	e025      	b.n	8007532 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f003 0304 	and.w	r3, r3, #4
 80074f0:	2b04      	cmp	r3, #4
 80074f2:	d10e      	bne.n	8007512 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80074f8:	9300      	str	r3, [sp, #0]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2200      	movs	r2, #0
 80074fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 f819 	bl	800753a <UART_WaitOnFlagUntilTimeout>
 8007508:	4603      	mov	r3, r0
 800750a:	2b00      	cmp	r3, #0
 800750c:	d001      	beq.n	8007512 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800750e:	2303      	movs	r3, #3
 8007510:	e00f      	b.n	8007532 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2220      	movs	r2, #32
 8007516:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2220      	movs	r2, #32
 800751e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2200      	movs	r2, #0
 800752c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007530:	2300      	movs	r3, #0
}
 8007532:	4618      	mov	r0, r3
 8007534:	3710      	adds	r7, #16
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800753a:	b580      	push	{r7, lr}
 800753c:	b09c      	sub	sp, #112	; 0x70
 800753e:	af00      	add	r7, sp, #0
 8007540:	60f8      	str	r0, [r7, #12]
 8007542:	60b9      	str	r1, [r7, #8]
 8007544:	603b      	str	r3, [r7, #0]
 8007546:	4613      	mov	r3, r2
 8007548:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800754a:	e0a9      	b.n	80076a0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800754c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800754e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007552:	f000 80a5 	beq.w	80076a0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007556:	f7fa fb73 	bl	8001c40 <HAL_GetTick>
 800755a:	4602      	mov	r2, r0
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	1ad3      	subs	r3, r2, r3
 8007560:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007562:	429a      	cmp	r2, r3
 8007564:	d302      	bcc.n	800756c <UART_WaitOnFlagUntilTimeout+0x32>
 8007566:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007568:	2b00      	cmp	r3, #0
 800756a:	d140      	bne.n	80075ee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007572:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007574:	e853 3f00 	ldrex	r3, [r3]
 8007578:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800757a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800757c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007580:	667b      	str	r3, [r7, #100]	; 0x64
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	461a      	mov	r2, r3
 8007588:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800758a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800758c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800758e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007590:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007592:	e841 2300 	strex	r3, r2, [r1]
 8007596:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007598:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800759a:	2b00      	cmp	r3, #0
 800759c:	d1e6      	bne.n	800756c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	3308      	adds	r3, #8
 80075a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075a8:	e853 3f00 	ldrex	r3, [r3]
 80075ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80075ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b0:	f023 0301 	bic.w	r3, r3, #1
 80075b4:	663b      	str	r3, [r7, #96]	; 0x60
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	3308      	adds	r3, #8
 80075bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80075be:	64ba      	str	r2, [r7, #72]	; 0x48
 80075c0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80075c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075c6:	e841 2300 	strex	r3, r2, [r1]
 80075ca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80075cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d1e5      	bne.n	800759e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2220      	movs	r2, #32
 80075d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2220      	movs	r2, #32
 80075de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2200      	movs	r2, #0
 80075e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80075ea:	2303      	movs	r3, #3
 80075ec:	e069      	b.n	80076c2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f003 0304 	and.w	r3, r3, #4
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d051      	beq.n	80076a0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	69db      	ldr	r3, [r3, #28]
 8007602:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007606:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800760a:	d149      	bne.n	80076a0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007614:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800761c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800761e:	e853 3f00 	ldrex	r3, [r3]
 8007622:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007626:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800762a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	461a      	mov	r2, r3
 8007632:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007634:	637b      	str	r3, [r7, #52]	; 0x34
 8007636:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007638:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800763a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800763c:	e841 2300 	strex	r3, r2, [r1]
 8007640:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007644:	2b00      	cmp	r3, #0
 8007646:	d1e6      	bne.n	8007616 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	3308      	adds	r3, #8
 800764e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	e853 3f00 	ldrex	r3, [r3]
 8007656:	613b      	str	r3, [r7, #16]
   return(result);
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	f023 0301 	bic.w	r3, r3, #1
 800765e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	3308      	adds	r3, #8
 8007666:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007668:	623a      	str	r2, [r7, #32]
 800766a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800766c:	69f9      	ldr	r1, [r7, #28]
 800766e:	6a3a      	ldr	r2, [r7, #32]
 8007670:	e841 2300 	strex	r3, r2, [r1]
 8007674:	61bb      	str	r3, [r7, #24]
   return(result);
 8007676:	69bb      	ldr	r3, [r7, #24]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d1e5      	bne.n	8007648 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2220      	movs	r2, #32
 8007680:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2220      	movs	r2, #32
 8007688:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2220      	movs	r2, #32
 8007690:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2200      	movs	r2, #0
 8007698:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800769c:	2303      	movs	r3, #3
 800769e:	e010      	b.n	80076c2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	69da      	ldr	r2, [r3, #28]
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	4013      	ands	r3, r2
 80076aa:	68ba      	ldr	r2, [r7, #8]
 80076ac:	429a      	cmp	r2, r3
 80076ae:	bf0c      	ite	eq
 80076b0:	2301      	moveq	r3, #1
 80076b2:	2300      	movne	r3, #0
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	461a      	mov	r2, r3
 80076b8:	79fb      	ldrb	r3, [r7, #7]
 80076ba:	429a      	cmp	r2, r3
 80076bc:	f43f af46 	beq.w	800754c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80076c0:	2300      	movs	r3, #0
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3770      	adds	r7, #112	; 0x70
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}

080076ca <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80076ca:	b480      	push	{r7}
 80076cc:	b085      	sub	sp, #20
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d101      	bne.n	80076e0 <HAL_UARTEx_DisableFifoMode+0x16>
 80076dc:	2302      	movs	r3, #2
 80076de:	e027      	b.n	8007730 <HAL_UARTEx_DisableFifoMode+0x66>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2201      	movs	r2, #1
 80076e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2224      	movs	r2, #36	; 0x24
 80076ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f022 0201 	bic.w	r2, r2, #1
 8007706:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800770e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	68fa      	ldr	r2, [r7, #12]
 800771c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2220      	movs	r2, #32
 8007722:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800772e:	2300      	movs	r3, #0
}
 8007730:	4618      	mov	r0, r3
 8007732:	3714      	adds	r7, #20
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr

0800773c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800774c:	2b01      	cmp	r3, #1
 800774e:	d101      	bne.n	8007754 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007750:	2302      	movs	r3, #2
 8007752:	e02d      	b.n	80077b0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2224      	movs	r2, #36	; 0x24
 8007760:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f022 0201 	bic.w	r2, r2, #1
 800777a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	683a      	ldr	r2, [r7, #0]
 800778c:	430a      	orrs	r2, r1
 800778e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f000 f84f 	bl	8007834 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	68fa      	ldr	r2, [r7, #12]
 800779c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2220      	movs	r2, #32
 80077a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80077ae:	2300      	movs	r3, #0
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3710      	adds	r7, #16
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d101      	bne.n	80077d0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80077cc:	2302      	movs	r3, #2
 80077ce:	e02d      	b.n	800782c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2201      	movs	r2, #1
 80077d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2224      	movs	r2, #36	; 0x24
 80077dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f022 0201 	bic.w	r2, r2, #1
 80077f6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	683a      	ldr	r2, [r7, #0]
 8007808:	430a      	orrs	r2, r1
 800780a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 f811 	bl	8007834 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	68fa      	ldr	r2, [r7, #12]
 8007818:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2220      	movs	r2, #32
 800781e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2200      	movs	r2, #0
 8007826:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800782a:	2300      	movs	r3, #0
}
 800782c:	4618      	mov	r0, r3
 800782e:	3710      	adds	r7, #16
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007834:	b480      	push	{r7}
 8007836:	b085      	sub	sp, #20
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007840:	2b00      	cmp	r3, #0
 8007842:	d108      	bne.n	8007856 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2201      	movs	r2, #1
 8007848:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2201      	movs	r2, #1
 8007850:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007854:	e031      	b.n	80078ba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007856:	2308      	movs	r3, #8
 8007858:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800785a:	2308      	movs	r3, #8
 800785c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	0e5b      	lsrs	r3, r3, #25
 8007866:	b2db      	uxtb	r3, r3
 8007868:	f003 0307 	and.w	r3, r3, #7
 800786c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	689b      	ldr	r3, [r3, #8]
 8007874:	0f5b      	lsrs	r3, r3, #29
 8007876:	b2db      	uxtb	r3, r3
 8007878:	f003 0307 	and.w	r3, r3, #7
 800787c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800787e:	7bbb      	ldrb	r3, [r7, #14]
 8007880:	7b3a      	ldrb	r2, [r7, #12]
 8007882:	4911      	ldr	r1, [pc, #68]	; (80078c8 <UARTEx_SetNbDataToProcess+0x94>)
 8007884:	5c8a      	ldrb	r2, [r1, r2]
 8007886:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800788a:	7b3a      	ldrb	r2, [r7, #12]
 800788c:	490f      	ldr	r1, [pc, #60]	; (80078cc <UARTEx_SetNbDataToProcess+0x98>)
 800788e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007890:	fb93 f3f2 	sdiv	r3, r3, r2
 8007894:	b29a      	uxth	r2, r3
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800789c:	7bfb      	ldrb	r3, [r7, #15]
 800789e:	7b7a      	ldrb	r2, [r7, #13]
 80078a0:	4909      	ldr	r1, [pc, #36]	; (80078c8 <UARTEx_SetNbDataToProcess+0x94>)
 80078a2:	5c8a      	ldrb	r2, [r1, r2]
 80078a4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80078a8:	7b7a      	ldrb	r2, [r7, #13]
 80078aa:	4908      	ldr	r1, [pc, #32]	; (80078cc <UARTEx_SetNbDataToProcess+0x98>)
 80078ac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80078ae:	fb93 f3f2 	sdiv	r3, r3, r2
 80078b2:	b29a      	uxth	r2, r3
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80078ba:	bf00      	nop
 80078bc:	3714      	adds	r7, #20
 80078be:	46bd      	mov	sp, r7
 80078c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c4:	4770      	bx	lr
 80078c6:	bf00      	nop
 80078c8:	080079a0 	.word	0x080079a0
 80078cc:	080079a8 	.word	0x080079a8

080078d0 <__libc_init_array>:
 80078d0:	b570      	push	{r4, r5, r6, lr}
 80078d2:	4d0d      	ldr	r5, [pc, #52]	; (8007908 <__libc_init_array+0x38>)
 80078d4:	4c0d      	ldr	r4, [pc, #52]	; (800790c <__libc_init_array+0x3c>)
 80078d6:	1b64      	subs	r4, r4, r5
 80078d8:	10a4      	asrs	r4, r4, #2
 80078da:	2600      	movs	r6, #0
 80078dc:	42a6      	cmp	r6, r4
 80078de:	d109      	bne.n	80078f4 <__libc_init_array+0x24>
 80078e0:	4d0b      	ldr	r5, [pc, #44]	; (8007910 <__libc_init_array+0x40>)
 80078e2:	4c0c      	ldr	r4, [pc, #48]	; (8007914 <__libc_init_array+0x44>)
 80078e4:	f000 f820 	bl	8007928 <_init>
 80078e8:	1b64      	subs	r4, r4, r5
 80078ea:	10a4      	asrs	r4, r4, #2
 80078ec:	2600      	movs	r6, #0
 80078ee:	42a6      	cmp	r6, r4
 80078f0:	d105      	bne.n	80078fe <__libc_init_array+0x2e>
 80078f2:	bd70      	pop	{r4, r5, r6, pc}
 80078f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80078f8:	4798      	blx	r3
 80078fa:	3601      	adds	r6, #1
 80078fc:	e7ee      	b.n	80078dc <__libc_init_array+0xc>
 80078fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007902:	4798      	blx	r3
 8007904:	3601      	adds	r6, #1
 8007906:	e7f2      	b.n	80078ee <__libc_init_array+0x1e>
 8007908:	080079b8 	.word	0x080079b8
 800790c:	080079b8 	.word	0x080079b8
 8007910:	080079b8 	.word	0x080079b8
 8007914:	080079bc 	.word	0x080079bc

08007918 <memset>:
 8007918:	4402      	add	r2, r0
 800791a:	4603      	mov	r3, r0
 800791c:	4293      	cmp	r3, r2
 800791e:	d100      	bne.n	8007922 <memset+0xa>
 8007920:	4770      	bx	lr
 8007922:	f803 1b01 	strb.w	r1, [r3], #1
 8007926:	e7f9      	b.n	800791c <memset+0x4>

08007928 <_init>:
 8007928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800792a:	bf00      	nop
 800792c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800792e:	bc08      	pop	{r3}
 8007930:	469e      	mov	lr, r3
 8007932:	4770      	bx	lr

08007934 <_fini>:
 8007934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007936:	bf00      	nop
 8007938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800793a:	bc08      	pop	{r3}
 800793c:	469e      	mov	lr, r3
 800793e:	4770      	bx	lr
